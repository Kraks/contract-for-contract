// @ts-nocheck
// Generated from Spec.g4 by ANTLR 4.12.0
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
  ATN,
  ATNDeserializer,
  CharStream,
  DecisionState,
  DFA,
  Lexer,
  LexerATNSimulator,
  RuleContext,
  PredictionContextCache,
  Token,
} from 'antlr4';
export default class SpecLexer extends Lexer {
  public static readonly T__0 = 1;
  public static readonly T__1 = 2;
  public static readonly T__2 = 3;
  public static readonly T__3 = 4;
  public static readonly T__4 = 5;
  public static readonly T__5 = 6;
  public static readonly RETURNS = 7;
  public static readonly REQUIRES = 8;
  public static readonly ENSURES = 9;
  public static readonly WHERE = 10;
  public static readonly LCURPAR = 11;
  public static readonly RCURPAR = 12;
  public static readonly KEYWORDS = 13;
  public static readonly IDENT = 14;
  public static readonly TCONN = 15;
  public static readonly OP = 16;
  public static readonly QUOTE = 17;
  public static readonly INT = 18;
  public static readonly WS = 19;
  public static readonly EOF = Token.EOF;

  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN'];
  public static readonly literalNames: string[] = [
    null,
    "'when'",
    "'('",
    "')'",
    "'.'",
    "','",
    "':'",
    "'returns'",
    "'requires'",
    "'ensures'",
    "'where'",
    "'{'",
    "'}'",
  ];
  public static readonly symbolicNames: string[] = [
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    'RETURNS',
    'REQUIRES',
    'ENSURES',
    'WHERE',
    'LCURPAR',
    'RCURPAR',
    'KEYWORDS',
    'IDENT',
    'TCONN',
    'OP',
    'QUOTE',
    'INT',
    'WS',
  ];
  public static readonly modeNames: string[] = ['DEFAULT_MODE'];

  public static readonly ruleNames: string[] = [
    'T__0',
    'T__1',
    'T__2',
    'T__3',
    'T__4',
    'T__5',
    'RETURNS',
    'REQUIRES',
    'ENSURES',
    'WHERE',
    'LCURPAR',
    'RCURPAR',
    'KEYWORDS',
    'IDENT',
    'TCONN',
    'OP',
    'QUOTE',
    'INT',
    'WS',
  ];

  constructor(input: CharStream) {
    super(input);
    this._interp = new LexerATNSimulator(this, SpecLexer._ATN, SpecLexer.DecisionsToDFA, new PredictionContextCache());
  }

  public get grammarFileName(): string {
    return 'Spec.g4';
  }

  public get literalNames(): (string | null)[] {
    return SpecLexer.literalNames;
  }
  public get symbolicNames(): (string | null)[] {
    return SpecLexer.symbolicNames;
  }
  public get ruleNames(): string[] {
    return SpecLexer.ruleNames;
  }

  public get serializedATN(): number[] {
    return SpecLexer._serializedATN;
  }

  public get channelNames(): string[] {
    return SpecLexer.channelNames;
  }

  public get modeNames(): string[] {
    return SpecLexer.modeNames;
  }

  public static readonly _serializedATN: number[] = [
    4, 0, 19, 184, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7,
    7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2,
    16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4,
    1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1,
    8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 12,
    1, 12, 1, 12, 1, 12, 3, 12, 94, 8, 12, 1, 13, 1, 13, 5, 13, 98, 8, 13, 10, 13, 12, 13, 101, 9, 13, 1, 14, 1, 14, 1,
    14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 113, 8, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1,
    15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15,
    1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 151, 8, 15, 1, 16,
    1, 16, 1, 17, 4, 17, 156, 8, 17, 11, 17, 12, 17, 157, 1, 17, 1, 17, 1, 17, 4, 17, 163, 8, 17, 11, 17, 12, 17, 164,
    1, 17, 1, 17, 3, 17, 169, 8, 17, 1, 17, 4, 17, 172, 8, 17, 11, 17, 12, 17, 173, 3, 17, 176, 8, 17, 1, 18, 4, 18,
    179, 8, 18, 11, 18, 12, 18, 180, 1, 18, 1, 18, 0, 0, 19, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9,
    19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 1, 0, 12, 3, 0, 65, 90, 95, 95, 97,
    122, 4, 0, 48, 57, 65, 90, 95, 95, 97, 122, 10, 0, 33, 33, 37, 38, 42, 43, 45, 45, 47, 47, 58, 58, 63, 63, 94, 94,
    124, 124, 126, 126, 2, 0, 60, 60, 62, 62, 2, 0, 40, 41, 46, 46, 2, 0, 34, 34, 39, 39, 1, 0, 48, 57, 2, 0, 88, 88,
    120, 120, 3, 0, 48, 57, 65, 70, 97, 102, 2, 0, 79, 79, 111, 111, 1, 0, 48, 55, 3, 0, 9, 10, 13, 13, 32, 32, 215, 0,
    1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1,
    0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0,
    0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0,
    0, 1, 39, 1, 0, 0, 0, 3, 44, 1, 0, 0, 0, 5, 46, 1, 0, 0, 0, 7, 48, 1, 0, 0, 0, 9, 50, 1, 0, 0, 0, 11, 52, 1, 0, 0,
    0, 13, 54, 1, 0, 0, 0, 15, 62, 1, 0, 0, 0, 17, 71, 1, 0, 0, 0, 19, 79, 1, 0, 0, 0, 21, 85, 1, 0, 0, 0, 23, 87, 1, 0,
    0, 0, 25, 93, 1, 0, 0, 0, 27, 95, 1, 0, 0, 0, 29, 112, 1, 0, 0, 0, 31, 150, 1, 0, 0, 0, 33, 152, 1, 0, 0, 0, 35,
    175, 1, 0, 0, 0, 37, 178, 1, 0, 0, 0, 39, 40, 5, 119, 0, 0, 40, 41, 5, 104, 0, 0, 41, 42, 5, 101, 0, 0, 42, 43, 5,
    110, 0, 0, 43, 2, 1, 0, 0, 0, 44, 45, 5, 40, 0, 0, 45, 4, 1, 0, 0, 0, 46, 47, 5, 41, 0, 0, 47, 6, 1, 0, 0, 0, 48,
    49, 5, 46, 0, 0, 49, 8, 1, 0, 0, 0, 50, 51, 5, 44, 0, 0, 51, 10, 1, 0, 0, 0, 52, 53, 5, 58, 0, 0, 53, 12, 1, 0, 0,
    0, 54, 55, 5, 114, 0, 0, 55, 56, 5, 101, 0, 0, 56, 57, 5, 116, 0, 0, 57, 58, 5, 117, 0, 0, 58, 59, 5, 114, 0, 0, 59,
    60, 5, 110, 0, 0, 60, 61, 5, 115, 0, 0, 61, 14, 1, 0, 0, 0, 62, 63, 5, 114, 0, 0, 63, 64, 5, 101, 0, 0, 64, 65, 5,
    113, 0, 0, 65, 66, 5, 117, 0, 0, 66, 67, 5, 105, 0, 0, 67, 68, 5, 114, 0, 0, 68, 69, 5, 101, 0, 0, 69, 70, 5, 115,
    0, 0, 70, 16, 1, 0, 0, 0, 71, 72, 5, 101, 0, 0, 72, 73, 5, 110, 0, 0, 73, 74, 5, 115, 0, 0, 74, 75, 5, 117, 0, 0,
    75, 76, 5, 114, 0, 0, 76, 77, 5, 101, 0, 0, 77, 78, 5, 115, 0, 0, 78, 18, 1, 0, 0, 0, 79, 80, 5, 119, 0, 0, 80, 81,
    5, 104, 0, 0, 81, 82, 5, 101, 0, 0, 82, 83, 5, 114, 0, 0, 83, 84, 5, 101, 0, 0, 84, 20, 1, 0, 0, 0, 85, 86, 5, 123,
    0, 0, 86, 22, 1, 0, 0, 0, 87, 88, 5, 125, 0, 0, 88, 24, 1, 0, 0, 0, 89, 94, 3, 13, 6, 0, 90, 94, 3, 15, 7, 0, 91,
    94, 3, 17, 8, 0, 92, 94, 3, 19, 9, 0, 93, 89, 1, 0, 0, 0, 93, 90, 1, 0, 0, 0, 93, 91, 1, 0, 0, 0, 93, 92, 1, 0, 0,
    0, 94, 26, 1, 0, 0, 0, 95, 99, 7, 0, 0, 0, 96, 98, 7, 1, 0, 0, 97, 96, 1, 0, 0, 0, 98, 101, 1, 0, 0, 0, 99, 97, 1,
    0, 0, 0, 99, 100, 1, 0, 0, 0, 100, 28, 1, 0, 0, 0, 101, 99, 1, 0, 0, 0, 102, 103, 5, 61, 0, 0, 103, 113, 5, 62, 0,
    0, 104, 105, 5, 61, 0, 0, 105, 106, 5, 47, 0, 0, 106, 113, 5, 62, 0, 0, 107, 108, 5, 126, 0, 0, 108, 113, 5, 62, 0,
    0, 109, 110, 5, 126, 0, 0, 110, 111, 5, 47, 0, 0, 111, 113, 5, 62, 0, 0, 112, 102, 1, 0, 0, 0, 112, 104, 1, 0, 0, 0,
    112, 107, 1, 0, 0, 0, 112, 109, 1, 0, 0, 0, 113, 30, 1, 0, 0, 0, 114, 151, 7, 2, 0, 0, 115, 116, 5, 61, 0, 0, 116,
    151, 5, 61, 0, 0, 117, 118, 5, 33, 0, 0, 118, 151, 5, 61, 0, 0, 119, 151, 7, 3, 0, 0, 120, 121, 5, 60, 0, 0, 121,
    151, 5, 61, 0, 0, 122, 123, 5, 62, 0, 0, 123, 151, 5, 61, 0, 0, 124, 125, 5, 38, 0, 0, 125, 151, 5, 38, 0, 0, 126,
    127, 5, 124, 0, 0, 127, 151, 5, 124, 0, 0, 128, 129, 5, 43, 0, 0, 129, 151, 5, 43, 0, 0, 130, 131, 5, 45, 0, 0, 131,
    151, 5, 45, 0, 0, 132, 133, 5, 45, 0, 0, 133, 151, 5, 61, 0, 0, 134, 135, 5, 43, 0, 0, 135, 151, 5, 61, 0, 0, 136,
    137, 5, 42, 0, 0, 137, 151, 5, 61, 0, 0, 138, 139, 5, 47, 0, 0, 139, 151, 5, 61, 0, 0, 140, 141, 5, 37, 0, 0, 141,
    151, 5, 61, 0, 0, 142, 143, 5, 62, 0, 0, 143, 151, 5, 62, 0, 0, 144, 145, 5, 62, 0, 0, 145, 146, 5, 62, 0, 0, 146,
    151, 5, 62, 0, 0, 147, 148, 5, 60, 0, 0, 148, 151, 5, 60, 0, 0, 149, 151, 7, 4, 0, 0, 150, 114, 1, 0, 0, 0, 150,
    115, 1, 0, 0, 0, 150, 117, 1, 0, 0, 0, 150, 119, 1, 0, 0, 0, 150, 120, 1, 0, 0, 0, 150, 122, 1, 0, 0, 0, 150, 124,
    1, 0, 0, 0, 150, 126, 1, 0, 0, 0, 150, 128, 1, 0, 0, 0, 150, 130, 1, 0, 0, 0, 150, 132, 1, 0, 0, 0, 150, 134, 1, 0,
    0, 0, 150, 136, 1, 0, 0, 0, 150, 138, 1, 0, 0, 0, 150, 140, 1, 0, 0, 0, 150, 142, 1, 0, 0, 0, 150, 144, 1, 0, 0, 0,
    150, 147, 1, 0, 0, 0, 150, 149, 1, 0, 0, 0, 151, 32, 1, 0, 0, 0, 152, 153, 7, 5, 0, 0, 153, 34, 1, 0, 0, 0, 154,
    156, 7, 6, 0, 0, 155, 154, 1, 0, 0, 0, 156, 157, 1, 0, 0, 0, 157, 155, 1, 0, 0, 0, 157, 158, 1, 0, 0, 0, 158, 176,
    1, 0, 0, 0, 159, 160, 5, 48, 0, 0, 160, 162, 7, 7, 0, 0, 161, 163, 7, 8, 0, 0, 162, 161, 1, 0, 0, 0, 163, 164, 1, 0,
    0, 0, 164, 162, 1, 0, 0, 0, 164, 165, 1, 0, 0, 0, 165, 176, 1, 0, 0, 0, 166, 168, 5, 48, 0, 0, 167, 169, 7, 9, 0, 0,
    168, 167, 1, 0, 0, 0, 168, 169, 1, 0, 0, 0, 169, 171, 1, 0, 0, 0, 170, 172, 7, 10, 0, 0, 171, 170, 1, 0, 0, 0, 172,
    173, 1, 0, 0, 0, 173, 171, 1, 0, 0, 0, 173, 174, 1, 0, 0, 0, 174, 176, 1, 0, 0, 0, 175, 155, 1, 0, 0, 0, 175, 159,
    1, 0, 0, 0, 175, 166, 1, 0, 0, 0, 176, 36, 1, 0, 0, 0, 177, 179, 7, 11, 0, 0, 178, 177, 1, 0, 0, 0, 179, 180, 1, 0,
    0, 0, 180, 178, 1, 0, 0, 0, 180, 181, 1, 0, 0, 0, 181, 182, 1, 0, 0, 0, 182, 183, 6, 18, 0, 0, 183, 38, 1, 0, 0, 0,
    11, 0, 93, 99, 112, 150, 157, 164, 168, 173, 175, 180, 1, 6, 0, 0,
  ];

  private static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!SpecLexer.__ATN) {
      SpecLexer.__ATN = new ATNDeserializer().deserialize(SpecLexer._serializedATN);
    }

    return SpecLexer.__ATN;
  }

  static DecisionsToDFA = SpecLexer._ATN.decisionToState.map((ds: DecisionState, index: number) => new DFA(ds, index));
}
