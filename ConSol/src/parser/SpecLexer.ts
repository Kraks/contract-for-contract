// @ts-nocheck
// Generated from Spec.g4 by ANTLR 4.12.0
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class SpecLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly IDENT = 11;
	public static readonly TCONN = 12;
	public static readonly OP = 13;
	public static readonly QUOTE = 14;
	public static readonly INT = 15;
	public static readonly WS = 16;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: string[] = [ null, "'{'", "'|'", "'}'", 
                                                   "'->'", "'/\\'", "'('", 
                                                   "')'", "','", "':'", 
                                                   "'returns'" ];
	public static readonly symbolicNames: string[] = [ null, null, null, null, 
                                                    null, null, null, null, 
                                                    null, null, null, "IDENT", 
                                                    "TCONN", "OP", "QUOTE", 
                                                    "INT", "WS" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "IDENT", "TCONN", "OP", "QUOTE", "INT", "WS",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, SpecLexer._ATN, SpecLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "Spec.g4"; }

	public get literalNames(): (string | null)[] { return SpecLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return SpecLexer.symbolicNames; }
	public get ruleNames(): string[] { return SpecLexer.ruleNames; }

	public get serializedATN(): number[] { return SpecLexer._serializedATN; }

	public get channelNames(): string[] { return SpecLexer.channelNames; }

	public get modeNames(): string[] { return SpecLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,16,150,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,1,0,1,0,
	1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,
	1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,5,10,64,8,10,10,10,12,10,67,9,
	10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,79,8,11,1,12,
	1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
	12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
	1,12,1,12,1,12,1,12,1,12,1,12,3,12,117,8,12,1,13,1,13,1,14,4,14,122,8,14,
	11,14,12,14,123,1,14,1,14,1,14,4,14,129,8,14,11,14,12,14,130,1,14,1,14,
	3,14,135,8,14,1,14,4,14,138,8,14,11,14,12,14,139,3,14,142,8,14,1,15,4,15,
	145,8,15,11,15,12,15,146,1,15,1,15,0,0,16,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
	15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,1,0,12,3,0,65,90,95,
	95,97,122,4,0,48,57,65,90,95,95,97,122,10,0,33,33,37,38,42,43,45,45,47,
	47,58,58,63,63,94,94,124,124,126,126,2,0,60,60,62,62,2,0,40,41,46,46,2,
	0,34,34,39,39,1,0,48,57,2,0,88,88,120,120,3,0,48,57,65,70,97,102,2,0,79,
	79,111,111,1,0,48,55,3,0,9,10,13,13,32,32,178,0,1,1,0,0,0,0,3,1,0,0,0,0,
	5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
	0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
	1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,1,33,1,0,0,0,3,35,1,0,0,0,5,37,1,0,0,
	0,7,39,1,0,0,0,9,42,1,0,0,0,11,45,1,0,0,0,13,47,1,0,0,0,15,49,1,0,0,0,17,
	51,1,0,0,0,19,53,1,0,0,0,21,61,1,0,0,0,23,78,1,0,0,0,25,116,1,0,0,0,27,
	118,1,0,0,0,29,141,1,0,0,0,31,144,1,0,0,0,33,34,5,123,0,0,34,2,1,0,0,0,
	35,36,5,124,0,0,36,4,1,0,0,0,37,38,5,125,0,0,38,6,1,0,0,0,39,40,5,45,0,
	0,40,41,5,62,0,0,41,8,1,0,0,0,42,43,5,47,0,0,43,44,5,92,0,0,44,10,1,0,0,
	0,45,46,5,40,0,0,46,12,1,0,0,0,47,48,5,41,0,0,48,14,1,0,0,0,49,50,5,44,
	0,0,50,16,1,0,0,0,51,52,5,58,0,0,52,18,1,0,0,0,53,54,5,114,0,0,54,55,5,
	101,0,0,55,56,5,116,0,0,56,57,5,117,0,0,57,58,5,114,0,0,58,59,5,110,0,0,
	59,60,5,115,0,0,60,20,1,0,0,0,61,65,7,0,0,0,62,64,7,1,0,0,63,62,1,0,0,0,
	64,67,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,22,1,0,0,0,67,65,1,0,0,0,68,
	69,5,61,0,0,69,79,5,62,0,0,70,71,5,61,0,0,71,72,5,47,0,0,72,79,5,62,0,0,
	73,74,5,126,0,0,74,79,5,62,0,0,75,76,5,126,0,0,76,77,5,47,0,0,77,79,5,62,
	0,0,78,68,1,0,0,0,78,70,1,0,0,0,78,73,1,0,0,0,78,75,1,0,0,0,79,24,1,0,0,
	0,80,117,7,2,0,0,81,82,5,61,0,0,82,117,5,61,0,0,83,84,5,33,0,0,84,117,5,
	61,0,0,85,117,7,3,0,0,86,87,5,60,0,0,87,117,5,61,0,0,88,89,5,62,0,0,89,
	117,5,61,0,0,90,91,5,38,0,0,91,117,5,38,0,0,92,93,5,124,0,0,93,117,5,124,
	0,0,94,95,5,43,0,0,95,117,5,43,0,0,96,97,5,45,0,0,97,117,5,45,0,0,98,99,
	5,45,0,0,99,117,5,61,0,0,100,101,5,43,0,0,101,117,5,61,0,0,102,103,5,42,
	0,0,103,117,5,61,0,0,104,105,5,47,0,0,105,117,5,61,0,0,106,107,5,37,0,0,
	107,117,5,61,0,0,108,109,5,62,0,0,109,117,5,62,0,0,110,111,5,62,0,0,111,
	112,5,62,0,0,112,117,5,62,0,0,113,114,5,60,0,0,114,117,5,60,0,0,115,117,
	7,4,0,0,116,80,1,0,0,0,116,81,1,0,0,0,116,83,1,0,0,0,116,85,1,0,0,0,116,
	86,1,0,0,0,116,88,1,0,0,0,116,90,1,0,0,0,116,92,1,0,0,0,116,94,1,0,0,0,
	116,96,1,0,0,0,116,98,1,0,0,0,116,100,1,0,0,0,116,102,1,0,0,0,116,104,1,
	0,0,0,116,106,1,0,0,0,116,108,1,0,0,0,116,110,1,0,0,0,116,113,1,0,0,0,116,
	115,1,0,0,0,117,26,1,0,0,0,118,119,7,5,0,0,119,28,1,0,0,0,120,122,7,6,0,
	0,121,120,1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,142,
	1,0,0,0,125,126,5,48,0,0,126,128,7,7,0,0,127,129,7,8,0,0,128,127,1,0,0,
	0,129,130,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,142,1,0,0,0,132,134,
	5,48,0,0,133,135,7,9,0,0,134,133,1,0,0,0,134,135,1,0,0,0,135,137,1,0,0,
	0,136,138,7,10,0,0,137,136,1,0,0,0,138,139,1,0,0,0,139,137,1,0,0,0,139,
	140,1,0,0,0,140,142,1,0,0,0,141,121,1,0,0,0,141,125,1,0,0,0,141,132,1,0,
	0,0,142,30,1,0,0,0,143,145,7,11,0,0,144,143,1,0,0,0,145,146,1,0,0,0,146,
	144,1,0,0,0,146,147,1,0,0,0,147,148,1,0,0,0,148,149,6,15,0,0,149,32,1,0,
	0,0,10,0,65,78,116,123,130,134,139,141,146,1,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!SpecLexer.__ATN) {
			SpecLexer.__ATN = new ATNDeserializer().deserialize(SpecLexer._serializedATN);
		}

		return SpecLexer.__ATN;
	}


	static DecisionsToDFA = SpecLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}