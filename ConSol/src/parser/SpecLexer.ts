// @ts-nocheck
// Generated from Spec.g4 by ANTLR 4.12.0
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class SpecLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly RETURNS = 7;
	public static readonly REQUIRES = 8;
	public static readonly ENSURES = 9;
	public static readonly WHERE = 10;
	public static readonly LCURPAR = 11;
	public static readonly RCURPAR = 12;
	public static readonly LBRACKET = 13;
	public static readonly RBRACKET = 14;
	public static readonly KEYWORDS = 15;
	public static readonly IDENT = 16;
	public static readonly TCONN = 17;
	public static readonly OP = 18;
	public static readonly QUOTE = 19;
	public static readonly INT = 20;
	public static readonly WS = 21;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: string[] = [ null, "'when'", "'('", 
                                                   "')'", "'.'", "','", 
                                                   "':'", "'returns'", "'requires'", 
                                                   "'ensures'", "'where'", 
                                                   "'{'", "'}'", "'['", 
                                                   "']'" ];
	public static readonly symbolicNames: string[] = [ null, null, null, null, 
                                                    null, null, null, "RETURNS", 
                                                    "REQUIRES", "ENSURES", 
                                                    "WHERE", "LCURPAR", 
                                                    "RCURPAR", "LBRACKET", 
                                                    "RBRACKET", "KEYWORDS", 
                                                    "IDENT", "TCONN", "OP", 
                                                    "QUOTE", "INT", "WS" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "RETURNS", "REQUIRES", 
		"ENSURES", "WHERE", "LCURPAR", "RCURPAR", "LBRACKET", "RBRACKET", "KEYWORDS", 
		"IDENT", "TCONN", "OP", "QUOTE", "INT", "WS",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, SpecLexer._ATN, SpecLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "Spec.g4"; }

	public get literalNames(): (string | null)[] { return SpecLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return SpecLexer.symbolicNames; }
	public get ruleNames(): string[] { return SpecLexer.ruleNames; }

	public get serializedATN(): number[] { return SpecLexer._serializedATN; }

	public get channelNames(): string[] { return SpecLexer.channelNames; }

	public get modeNames(): string[] { return SpecLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,21,192,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
	1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,
	1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
	1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,
	3,14,102,8,14,1,15,1,15,5,15,106,8,15,10,15,12,15,109,9,15,1,16,1,16,1,
	16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,121,8,16,1,17,1,17,1,17,1,17,
	1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
	17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
	1,17,1,17,1,17,3,17,159,8,17,1,18,1,18,1,19,4,19,164,8,19,11,19,12,19,165,
	1,19,1,19,1,19,4,19,171,8,19,11,19,12,19,172,1,19,1,19,3,19,177,8,19,1,
	19,4,19,180,8,19,11,19,12,19,181,3,19,184,8,19,1,20,4,20,187,8,20,11,20,
	12,20,188,1,20,1,20,0,0,21,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
	21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,1,0,12,
	3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,10,0,33,33,37,38,42,
	43,45,45,47,47,58,58,63,63,94,94,124,124,126,126,2,0,60,60,62,62,2,0,40,
	41,46,46,2,0,34,34,39,39,1,0,48,57,2,0,88,88,120,120,3,0,48,57,65,70,97,
	102,2,0,79,79,111,111,1,0,48,55,3,0,9,10,13,13,32,32,223,0,1,1,0,0,0,0,
	3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
	0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
	0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
	0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,1,43,1,0,0,0,3,48,1,0,0,0,5,50,1,
	0,0,0,7,52,1,0,0,0,9,54,1,0,0,0,11,56,1,0,0,0,13,58,1,0,0,0,15,66,1,0,0,
	0,17,75,1,0,0,0,19,83,1,0,0,0,21,89,1,0,0,0,23,91,1,0,0,0,25,93,1,0,0,0,
	27,95,1,0,0,0,29,101,1,0,0,0,31,103,1,0,0,0,33,120,1,0,0,0,35,158,1,0,0,
	0,37,160,1,0,0,0,39,183,1,0,0,0,41,186,1,0,0,0,43,44,5,119,0,0,44,45,5,
	104,0,0,45,46,5,101,0,0,46,47,5,110,0,0,47,2,1,0,0,0,48,49,5,40,0,0,49,
	4,1,0,0,0,50,51,5,41,0,0,51,6,1,0,0,0,52,53,5,46,0,0,53,8,1,0,0,0,54,55,
	5,44,0,0,55,10,1,0,0,0,56,57,5,58,0,0,57,12,1,0,0,0,58,59,5,114,0,0,59,
	60,5,101,0,0,60,61,5,116,0,0,61,62,5,117,0,0,62,63,5,114,0,0,63,64,5,110,
	0,0,64,65,5,115,0,0,65,14,1,0,0,0,66,67,5,114,0,0,67,68,5,101,0,0,68,69,
	5,113,0,0,69,70,5,117,0,0,70,71,5,105,0,0,71,72,5,114,0,0,72,73,5,101,0,
	0,73,74,5,115,0,0,74,16,1,0,0,0,75,76,5,101,0,0,76,77,5,110,0,0,77,78,5,
	115,0,0,78,79,5,117,0,0,79,80,5,114,0,0,80,81,5,101,0,0,81,82,5,115,0,0,
	82,18,1,0,0,0,83,84,5,119,0,0,84,85,5,104,0,0,85,86,5,101,0,0,86,87,5,114,
	0,0,87,88,5,101,0,0,88,20,1,0,0,0,89,90,5,123,0,0,90,22,1,0,0,0,91,92,5,
	125,0,0,92,24,1,0,0,0,93,94,5,91,0,0,94,26,1,0,0,0,95,96,5,93,0,0,96,28,
	1,0,0,0,97,102,3,13,6,0,98,102,3,15,7,0,99,102,3,17,8,0,100,102,3,19,9,
	0,101,97,1,0,0,0,101,98,1,0,0,0,101,99,1,0,0,0,101,100,1,0,0,0,102,30,1,
	0,0,0,103,107,7,0,0,0,104,106,7,1,0,0,105,104,1,0,0,0,106,109,1,0,0,0,107,
	105,1,0,0,0,107,108,1,0,0,0,108,32,1,0,0,0,109,107,1,0,0,0,110,111,5,61,
	0,0,111,121,5,62,0,0,112,113,5,61,0,0,113,114,5,47,0,0,114,121,5,62,0,0,
	115,116,5,126,0,0,116,121,5,62,0,0,117,118,5,126,0,0,118,119,5,47,0,0,119,
	121,5,62,0,0,120,110,1,0,0,0,120,112,1,0,0,0,120,115,1,0,0,0,120,117,1,
	0,0,0,121,34,1,0,0,0,122,159,7,2,0,0,123,124,5,61,0,0,124,159,5,61,0,0,
	125,126,5,33,0,0,126,159,5,61,0,0,127,159,7,3,0,0,128,129,5,60,0,0,129,
	159,5,61,0,0,130,131,5,62,0,0,131,159,5,61,0,0,132,133,5,38,0,0,133,159,
	5,38,0,0,134,135,5,124,0,0,135,159,5,124,0,0,136,137,5,43,0,0,137,159,5,
	43,0,0,138,139,5,45,0,0,139,159,5,45,0,0,140,141,5,45,0,0,141,159,5,61,
	0,0,142,143,5,43,0,0,143,159,5,61,0,0,144,145,5,42,0,0,145,159,5,61,0,0,
	146,147,5,47,0,0,147,159,5,61,0,0,148,149,5,37,0,0,149,159,5,61,0,0,150,
	151,5,62,0,0,151,159,5,62,0,0,152,153,5,62,0,0,153,154,5,62,0,0,154,159,
	5,62,0,0,155,156,5,60,0,0,156,159,5,60,0,0,157,159,7,4,0,0,158,122,1,0,
	0,0,158,123,1,0,0,0,158,125,1,0,0,0,158,127,1,0,0,0,158,128,1,0,0,0,158,
	130,1,0,0,0,158,132,1,0,0,0,158,134,1,0,0,0,158,136,1,0,0,0,158,138,1,0,
	0,0,158,140,1,0,0,0,158,142,1,0,0,0,158,144,1,0,0,0,158,146,1,0,0,0,158,
	148,1,0,0,0,158,150,1,0,0,0,158,152,1,0,0,0,158,155,1,0,0,0,158,157,1,0,
	0,0,159,36,1,0,0,0,160,161,7,5,0,0,161,38,1,0,0,0,162,164,7,6,0,0,163,162,
	1,0,0,0,164,165,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,184,1,0,0,0,
	167,168,5,48,0,0,168,170,7,7,0,0,169,171,7,8,0,0,170,169,1,0,0,0,171,172,
	1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,184,1,0,0,0,174,176,5,48,0,
	0,175,177,7,9,0,0,176,175,1,0,0,0,176,177,1,0,0,0,177,179,1,0,0,0,178,180,
	7,10,0,0,179,178,1,0,0,0,180,181,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,
	0,182,184,1,0,0,0,183,163,1,0,0,0,183,167,1,0,0,0,183,174,1,0,0,0,184,40,
	1,0,0,0,185,187,7,11,0,0,186,185,1,0,0,0,187,188,1,0,0,0,188,186,1,0,0,
	0,188,189,1,0,0,0,189,190,1,0,0,0,190,191,6,20,0,0,191,42,1,0,0,0,11,0,
	101,107,120,158,165,172,176,181,183,188,1,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!SpecLexer.__ATN) {
			SpecLexer.__ATN = new ATNDeserializer().deserialize(SpecLexer._serializedATN);
		}

		return SpecLexer.__ATN;
	}


	static DecisionsToDFA = SpecLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}