// @ts-nocheck
// Generated from Spec.g4 by ANTLR 4.12.0
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
  ATN,
  ATNDeserializer,
  CharStream,
  DecisionState,
  DFA,
  Lexer,
  LexerATNSimulator,
  RuleContext,
  PredictionContextCache,
  Token,
} from 'antlr4';
export default class SpecLexer extends Lexer {
  public static readonly T__0 = 1;
  public static readonly T__1 = 2;
  public static readonly T__2 = 3;
  public static readonly T__3 = 4;
  public static readonly T__4 = 5;
  public static readonly T__5 = 6;
  public static readonly T__6 = 7;
  public static readonly T__7 = 8;
  public static readonly T__8 = 9;
  public static readonly T__9 = 10;
  public static readonly T__10 = 11;
  public static readonly IDENT = 12;
  public static readonly TCONN = 13;
  public static readonly OP = 14;
  public static readonly QUOTE = 15;
  public static readonly INT = 16;
  public static readonly WS = 17;
  public static readonly EOF = Token.EOF;

  public static readonly channelNames: string[] = [
    'DEFAULT_TOKEN_CHANNEL',
    'HIDDEN',
  ];
  public static readonly literalNames: string[] = [
    null,
    "'{'",
    "'requires'",
    "'}'",
    "'where'",
    "'ensures'",
    "'when'",
    "'('",
    "')'",
    "'returns'",
    "','",
    "':'",
  ];
  public static readonly symbolicNames: string[] = [
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    'IDENT',
    'TCONN',
    'OP',
    'QUOTE',
    'INT',
    'WS',
  ];
  public static readonly modeNames: string[] = ['DEFAULT_MODE'];

  public static readonly ruleNames: string[] = [
    'T__0',
    'T__1',
    'T__2',
    'T__3',
    'T__4',
    'T__5',
    'T__6',
    'T__7',
    'T__8',
    'T__9',
    'T__10',
    'IDENT',
    'TCONN',
    'OP',
    'QUOTE',
    'INT',
    'WS',
  ];

  constructor(input: CharStream) {
    super(input);
    this._interp = new LexerATNSimulator(
      this,
      SpecLexer._ATN,
      SpecLexer.DecisionsToDFA,
      new PredictionContextCache(),
    );
  }

  public get grammarFileName(): string {
    return 'Spec.g4';
  }

  public get literalNames(): (string | null)[] {
    return SpecLexer.literalNames;
  }
  public get symbolicNames(): (string | null)[] {
    return SpecLexer.symbolicNames;
  }
  public get ruleNames(): string[] {
    return SpecLexer.ruleNames;
  }

  public get serializedATN(): number[] {
    return SpecLexer._serializedATN;
  }

  public get channelNames(): string[] {
    return SpecLexer.channelNames;
  }

  public get modeNames(): string[] {
    return SpecLexer.modeNames;
  }

  public static readonly _serializedATN: number[] = [
    4, 0, 17, 172, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
    7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7,
    10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2,
    16, 7, 16, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1,
    4, 1, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7, 1, 7,
    1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1,
    11, 1, 11, 5, 11, 86, 8, 11, 10, 11, 12, 11, 89, 9, 11, 1, 12, 1, 12, 1, 12,
    1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 101, 8, 12, 1, 13,
    1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13,
    1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13,
    1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13,
    1, 13, 1, 13, 3, 13, 139, 8, 13, 1, 14, 1, 14, 1, 15, 4, 15, 144, 8, 15, 11,
    15, 12, 15, 145, 1, 15, 1, 15, 1, 15, 4, 15, 151, 8, 15, 11, 15, 12, 15,
    152, 1, 15, 1, 15, 3, 15, 157, 8, 15, 1, 15, 4, 15, 160, 8, 15, 11, 15, 12,
    15, 161, 3, 15, 164, 8, 15, 1, 16, 4, 16, 167, 8, 16, 11, 16, 12, 16, 168,
    1, 16, 1, 16, 0, 0, 17, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8,
    17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 1, 0,
    12, 3, 0, 65, 90, 95, 95, 97, 122, 4, 0, 48, 57, 65, 90, 95, 95, 97, 122,
    10, 0, 33, 33, 37, 38, 42, 43, 45, 45, 47, 47, 58, 58, 63, 63, 94, 94, 124,
    124, 126, 126, 2, 0, 60, 60, 62, 62, 2, 0, 40, 41, 46, 46, 2, 0, 34, 34, 39,
    39, 1, 0, 48, 57, 2, 0, 88, 88, 120, 120, 3, 0, 48, 57, 65, 70, 97, 102, 2,
    0, 79, 79, 111, 111, 1, 0, 48, 55, 3, 0, 9, 10, 13, 13, 32, 32, 200, 0, 1,
    1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1,
    0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1,
    0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1,
    0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1,
    0, 0, 0, 1, 35, 1, 0, 0, 0, 3, 37, 1, 0, 0, 0, 5, 46, 1, 0, 0, 0, 7, 48, 1,
    0, 0, 0, 9, 54, 1, 0, 0, 0, 11, 62, 1, 0, 0, 0, 13, 67, 1, 0, 0, 0, 15, 69,
    1, 0, 0, 0, 17, 71, 1, 0, 0, 0, 19, 79, 1, 0, 0, 0, 21, 81, 1, 0, 0, 0, 23,
    83, 1, 0, 0, 0, 25, 100, 1, 0, 0, 0, 27, 138, 1, 0, 0, 0, 29, 140, 1, 0, 0,
    0, 31, 163, 1, 0, 0, 0, 33, 166, 1, 0, 0, 0, 35, 36, 5, 123, 0, 0, 36, 2, 1,
    0, 0, 0, 37, 38, 5, 114, 0, 0, 38, 39, 5, 101, 0, 0, 39, 40, 5, 113, 0, 0,
    40, 41, 5, 117, 0, 0, 41, 42, 5, 105, 0, 0, 42, 43, 5, 114, 0, 0, 43, 44, 5,
    101, 0, 0, 44, 45, 5, 115, 0, 0, 45, 4, 1, 0, 0, 0, 46, 47, 5, 125, 0, 0,
    47, 6, 1, 0, 0, 0, 48, 49, 5, 119, 0, 0, 49, 50, 5, 104, 0, 0, 50, 51, 5,
    101, 0, 0, 51, 52, 5, 114, 0, 0, 52, 53, 5, 101, 0, 0, 53, 8, 1, 0, 0, 0,
    54, 55, 5, 101, 0, 0, 55, 56, 5, 110, 0, 0, 56, 57, 5, 115, 0, 0, 57, 58, 5,
    117, 0, 0, 58, 59, 5, 114, 0, 0, 59, 60, 5, 101, 0, 0, 60, 61, 5, 115, 0, 0,
    61, 10, 1, 0, 0, 0, 62, 63, 5, 119, 0, 0, 63, 64, 5, 104, 0, 0, 64, 65, 5,
    101, 0, 0, 65, 66, 5, 110, 0, 0, 66, 12, 1, 0, 0, 0, 67, 68, 5, 40, 0, 0,
    68, 14, 1, 0, 0, 0, 69, 70, 5, 41, 0, 0, 70, 16, 1, 0, 0, 0, 71, 72, 5, 114,
    0, 0, 72, 73, 5, 101, 0, 0, 73, 74, 5, 116, 0, 0, 74, 75, 5, 117, 0, 0, 75,
    76, 5, 114, 0, 0, 76, 77, 5, 110, 0, 0, 77, 78, 5, 115, 0, 0, 78, 18, 1, 0,
    0, 0, 79, 80, 5, 44, 0, 0, 80, 20, 1, 0, 0, 0, 81, 82, 5, 58, 0, 0, 82, 22,
    1, 0, 0, 0, 83, 87, 7, 0, 0, 0, 84, 86, 7, 1, 0, 0, 85, 84, 1, 0, 0, 0, 86,
    89, 1, 0, 0, 0, 87, 85, 1, 0, 0, 0, 87, 88, 1, 0, 0, 0, 88, 24, 1, 0, 0, 0,
    89, 87, 1, 0, 0, 0, 90, 91, 5, 61, 0, 0, 91, 101, 5, 62, 0, 0, 92, 93, 5,
    61, 0, 0, 93, 94, 5, 47, 0, 0, 94, 101, 5, 62, 0, 0, 95, 96, 5, 126, 0, 0,
    96, 101, 5, 62, 0, 0, 97, 98, 5, 126, 0, 0, 98, 99, 5, 47, 0, 0, 99, 101, 5,
    62, 0, 0, 100, 90, 1, 0, 0, 0, 100, 92, 1, 0, 0, 0, 100, 95, 1, 0, 0, 0,
    100, 97, 1, 0, 0, 0, 101, 26, 1, 0, 0, 0, 102, 139, 7, 2, 0, 0, 103, 104, 5,
    61, 0, 0, 104, 139, 5, 61, 0, 0, 105, 106, 5, 33, 0, 0, 106, 139, 5, 61, 0,
    0, 107, 139, 7, 3, 0, 0, 108, 109, 5, 60, 0, 0, 109, 139, 5, 61, 0, 0, 110,
    111, 5, 62, 0, 0, 111, 139, 5, 61, 0, 0, 112, 113, 5, 38, 0, 0, 113, 139, 5,
    38, 0, 0, 114, 115, 5, 124, 0, 0, 115, 139, 5, 124, 0, 0, 116, 117, 5, 43,
    0, 0, 117, 139, 5, 43, 0, 0, 118, 119, 5, 45, 0, 0, 119, 139, 5, 45, 0, 0,
    120, 121, 5, 45, 0, 0, 121, 139, 5, 61, 0, 0, 122, 123, 5, 43, 0, 0, 123,
    139, 5, 61, 0, 0, 124, 125, 5, 42, 0, 0, 125, 139, 5, 61, 0, 0, 126, 127, 5,
    47, 0, 0, 127, 139, 5, 61, 0, 0, 128, 129, 5, 37, 0, 0, 129, 139, 5, 61, 0,
    0, 130, 131, 5, 62, 0, 0, 131, 139, 5, 62, 0, 0, 132, 133, 5, 62, 0, 0, 133,
    134, 5, 62, 0, 0, 134, 139, 5, 62, 0, 0, 135, 136, 5, 60, 0, 0, 136, 139, 5,
    60, 0, 0, 137, 139, 7, 4, 0, 0, 138, 102, 1, 0, 0, 0, 138, 103, 1, 0, 0, 0,
    138, 105, 1, 0, 0, 0, 138, 107, 1, 0, 0, 0, 138, 108, 1, 0, 0, 0, 138, 110,
    1, 0, 0, 0, 138, 112, 1, 0, 0, 0, 138, 114, 1, 0, 0, 0, 138, 116, 1, 0, 0,
    0, 138, 118, 1, 0, 0, 0, 138, 120, 1, 0, 0, 0, 138, 122, 1, 0, 0, 0, 138,
    124, 1, 0, 0, 0, 138, 126, 1, 0, 0, 0, 138, 128, 1, 0, 0, 0, 138, 130, 1, 0,
    0, 0, 138, 132, 1, 0, 0, 0, 138, 135, 1, 0, 0, 0, 138, 137, 1, 0, 0, 0, 139,
    28, 1, 0, 0, 0, 140, 141, 7, 5, 0, 0, 141, 30, 1, 0, 0, 0, 142, 144, 7, 6,
    0, 0, 143, 142, 1, 0, 0, 0, 144, 145, 1, 0, 0, 0, 145, 143, 1, 0, 0, 0, 145,
    146, 1, 0, 0, 0, 146, 164, 1, 0, 0, 0, 147, 148, 5, 48, 0, 0, 148, 150, 7,
    7, 0, 0, 149, 151, 7, 8, 0, 0, 150, 149, 1, 0, 0, 0, 151, 152, 1, 0, 0, 0,
    152, 150, 1, 0, 0, 0, 152, 153, 1, 0, 0, 0, 153, 164, 1, 0, 0, 0, 154, 156,
    5, 48, 0, 0, 155, 157, 7, 9, 0, 0, 156, 155, 1, 0, 0, 0, 156, 157, 1, 0, 0,
    0, 157, 159, 1, 0, 0, 0, 158, 160, 7, 10, 0, 0, 159, 158, 1, 0, 0, 0, 160,
    161, 1, 0, 0, 0, 161, 159, 1, 0, 0, 0, 161, 162, 1, 0, 0, 0, 162, 164, 1, 0,
    0, 0, 163, 143, 1, 0, 0, 0, 163, 147, 1, 0, 0, 0, 163, 154, 1, 0, 0, 0, 164,
    32, 1, 0, 0, 0, 165, 167, 7, 11, 0, 0, 166, 165, 1, 0, 0, 0, 167, 168, 1, 0,
    0, 0, 168, 166, 1, 0, 0, 0, 168, 169, 1, 0, 0, 0, 169, 170, 1, 0, 0, 0, 170,
    171, 6, 16, 0, 0, 171, 34, 1, 0, 0, 0, 10, 0, 87, 100, 138, 145, 152, 156,
    161, 163, 168, 1, 6, 0, 0,
  ];

  private static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!SpecLexer.__ATN) {
      SpecLexer.__ATN = new ATNDeserializer().deserialize(
        SpecLexer._serializedATN,
      );
    }

    return SpecLexer.__ATN;
  }

  static DecisionsToDFA = SpecLexer._ATN.decisionToState.map(
    (ds: DecisionState, index: number) => new DFA(ds, index),
  );
}
