{"abi":[{"type":"constructor","inputs":[{"name":"_owner","type":"address","internalType":"address"},{"name":"_rewardsDistribution","type":"address","internalType":"address"},{"name":"_stakingToken","type":"address","internalType":"address"},{"name":"_rewardsToken","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"balanceOf","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"earned","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"exit","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"finishFarming","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getReward","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getRewardForDuration","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"lastTimeRewardApplicable","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"lastUpdateTime","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"maxEverTotalRewards","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"notifyRewardAmount","inputs":[{"name":"_reward","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"paused","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"periodFinish","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"renounceOwnership","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"rescueToken","inputs":[{"name":"_token","type":"address","internalType":"contract ERC20"},{"name":"_recipient","type":"address","internalType":"address"},{"name":"_amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"rewardPerToken","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"rewardPerTokenStored","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"rewardRate","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"rewards","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"rewardsDistribution","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"rewardsDuration","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"rewardsToken","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IERC20"}],"stateMutability":"view"},{"type":"function","name":"setPaused","inputs":[{"name":"_paused","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setRewardsDistribution","inputs":[{"name":"_rewardsDistribution","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setRewardsDuration","inputs":[{"name":"_rewardsDuration","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"stake","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"stakingToken","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IERC20"}],"stateMutability":"view"},{"type":"function","name":"stopped","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"timeData","inputs":[],"outputs":[{"name":"periodFinish","type":"uint32","internalType":"uint32"},{"name":"rewardsDuration","type":"uint32","internalType":"uint32"},{"name":"lastUpdateTime","type":"uint32","internalType":"uint32"},{"name":"totalRewardsSupply","type":"uint96","internalType":"uint96"}],"stateMutability":"view"},{"type":"function","name":"totalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"transferOwnership","inputs":[{"name":"newOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"userRewardPerTokenPaid","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"version","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"pure"},{"type":"function","name":"withdraw","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"FarmingFinished","inputs":[],"anonymous":false},{"type":"event","name":"OwnershipTransferred","inputs":[{"name":"previousOwner","type":"address","indexed":true,"internalType":"address"},{"name":"newOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"PauseChanged","inputs":[{"name":"isPaused","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"RewardAdded","inputs":[{"name":"reward","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"RewardPaid","inputs":[{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"reward","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"RewardsDurationUpdated","inputs":[{"name":"newDuration","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Staked","inputs":[{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Withdrawn","inputs":[{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x60e060405260006004553480156200001657600080fd5b50604051620035bd380380620035bd833981810160405260808110156200003c57600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291905050508360006200007e6200042f60201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506200012d816200043760201b60201c565b506001600281905550600073ffffffffffffffffffffffffffffffffffffffff166200015e6200063c60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161415620001e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4f776e6572206d7573742062652073657400000000000000000000000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16630579697e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200023057600080fd5b505afa15801562000245573d6000803e3d6000fd5b505050506040513d60208110156200025c57600080fd5b8101908080519060200190929190505050620002c4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180620035756022913960400191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062278d00600a60000160046101000a81548163ffffffff021916908363ffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff166313e4172c6040518163ffffffff1660e01b815260040160206040518083038186803b158015620003e157600080fd5b505afa158015620003f6573d6000803e3d6000fd5b505050506040513d60208110156200040d57600080fd5b8101908080519060200190929190505050608081815250505050505062000665565b600033905090565b620004476200042f60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff166200046d6200063c60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620004f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200057f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180620035976026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60805160a05160601c60c05160601c612eba620006bb600039806116665280611b595280611bae528061235b5280612bb8525080611a805280611ced528061270a52508061091c52806113045250612eba6000f3fe608060405234801561001057600080fd5b50600436106102055760003560e01c806372f702f31161011a578063c8f33c91116100ad578063df136d651161007c578063df136d6514610725578063e5711e8b14610743578063e9fad8ee146107b1578063ebe2b12b146107bb578063f2fde38b146107d957610205565b8063c8f33c9114610687578063cc1a378f146106a5578063cd3daf9d146106d3578063d1af0c7d146106f157610205565b80638b876347116100e95780638b8763471461057a5780638da5cb5b146105d2578063a0e4395914610606578063a694fc3a1461065957610205565b806372f702f3146104ea57806375f12b211461051e5780637b0a47ee1461053e57806380faa57d1461055c57610205565b80632e1a7d4d1161019d5780633fc6df6e1161016c5780633fc6df6e1461041657806354fd4d501461044a5780635c975abb1461046857806370a0823114610488578063715018a6146104e057610205565b80632e1a7d4d14610392578063386a9525146103c05780633c6b16ab146103de5780633d18b9121461040c57610205565b806318160ddd116101d957806318160ddd1461030857806319762143146103265780631c1f78eb1461036a578063207e11aa1461038857610205565b80628cc2621461020a5780630700037d146102625780630e00f75a146102ba57806316c38b3c146102d8575b600080fd5b61024c6004803603602081101561022057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061081d565b6040518082815260200191505060405180910390f35b6102a46004803603602081101561027857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610902565b6040518082815260200191505060405180910390f35b6102c261091a565b6040518082815260200191505060405180910390f35b610306600480360360208110156102ee57600080fd5b8101908080351515906020019092919050505061093e565b005b610310610a73565b6040518082815260200191505060405180910390f35b6103686004803603602081101561033c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a7d565b005b610372610b70565b6040518082815260200191505060405180910390f35b610390610b97565b005b6103be600480360360208110156103a857600080fd5b8101908080359060200190929190505050610ead565b005b6103c8610ebb565b6040518082815260200191505060405180910390f35b61040a600480360360208110156103f457600080fd5b8101908080359060200190929190505050610ede565b005b61041461145f565b005b61041e61146c565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610452611492565b6040518082815260200191505060405180910390f35b61047061149b565b60405180821515815260200191505060405180910390f35b6104ca6004803603602081101561049e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114ae565b6040518082815260200191505060405180910390f35b6104e86114f7565b005b6104f2611664565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610526611688565b60405180821515815260200191505060405180910390f35b61054661169b565b6040518082815260200191505060405180910390f35b6105646116a1565b6040518082815260200191505060405180910390f35b6105bc6004803603602081101561059057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116cd565b6040518082815260200191505060405180910390f35b6105da6116e5565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61060e61170e565b604051808563ffffffff1681526020018463ffffffff1681526020018363ffffffff168152602001826bffffffffffffffffffffffff16815260200194505050505060405180910390f35b6106856004803603602081101561066f57600080fd5b8101908080359060200190929190505050611774565b005b61068f611783565b6040518082815260200191505060405180910390f35b6106d1600480360360208110156106bb57600080fd5b81019080803590602001909291905050506117a6565b005b6106db611a20565b6040518082815260200191505060405180910390f35b6106f9611a7e565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61072d611aa2565b6040518082815260200191505060405180910390f35b6107af6004803603606081101561075957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611aa8565b005b6107b9611e60565b005b6107c3611eb2565b6040518082815260200191505060405180910390f35b61081b600480360360208110156107ef57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ed5565b005b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054670de0b6b3a7640000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108b0611a20565b03600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205402816108f957fe5b04019050919050565b60076020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6109466120c7565b73ffffffffffffffffffffffffffffffffffffffff166109646116e5565b73ffffffffffffffffffffffffffffffffffffffff16146109ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600360009054906101000a900460ff1615158115151415610a0d57610a70565b80600360006101000a81548160ff0219169083151502179055507f8fb6c181ee25a520cf3dd6565006ef91229fcfe5a989566c2a3b8c115570cec5600360009054906101000a900460ff1660405180821515815260200191505060405180910390a15b50565b6000600854905090565b610a856120c7565b73ffffffffffffffffffffffffffffffffffffffff16610aa36116e5565b73ffffffffffffffffffffffffffffffffffffffff1614610b2c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600a60000160049054906101000a900463ffffffff1663ffffffff1660045402905090565b600b60009054906101000a900460ff1615610c1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6661726d696e672069732073746f70706564000000000000000000000000000081525060200191505060405180910390fd5b610c226120c7565b73ffffffffffffffffffffffffffffffffffffffff16610c406116e5565b73ffffffffffffffffffffffffffffffffffffffff1614610cc9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b610cd1612d70565b600a6040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815250509050806000015163ffffffff164210610df2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180612e58602d913960400191505060405180910390fd5b6001600b60006101000a81548160ff021916908315150217905550600060085414610e5a57600042826000015163ffffffff1603905080826020015163ffffffff1603600a60000160046101000a81548163ffffffff021916908363ffffffff160217905550505b42600a60000160006101000a81548163ffffffff021916908363ffffffff1602179055507fb31605747019cb5809dbdb8c268c9c5bb666d39291f8750fa0dd4ac517b1570460405160405180910390a150565b610eb88133336120cf565b50565b6000600a60000160049054906101000a900463ffffffff1663ffffffff16905090565b600b60009054906101000a900460ff1615610f61576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6661726d696e672069732073746f70706564000000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611024576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f43616c6c6572206973206e6f7420526577617264734469737472696275746f7281525060200191505060405180910390fd5b60008061102f611a20565b9050806005819055506110406116a1565b600a60000160086101000a81548163ffffffff021916908363ffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611128576110a08261081d565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b611130612d70565b600a6040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff168152505090506000816000015163ffffffff16421061121d57816020015163ffffffff16858161121557fe5b049050611252565b600042836000015163ffffffff16039050600060045482029050836020015163ffffffff168188018161124c57fe5b04925050505b60008114156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f696e76616c69642072657761726452617465000000000000000000000000000081525060200191505060405180910390fd5b80600481905550600085600a600001600c9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff160190507f0000000000000000000000000000000000000000000000000000000000000000811115611398576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f72657761726473206f766572666c6f770000000000000000000000000000000081525060200191505060405180910390fd5b80600a600001600c6101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555042600a60000160086101000a81548163ffffffff021916908363ffffffff160217905550826020015163ffffffff164201600a60000160006101000a81548163ffffffff021916908363ffffffff1602179055507fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d866040518082815260200191505060405180910390a1505050505050565b61146933336124f4565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001905090565b600360009054906101000a900460ff1681565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6114ff6120c7565b73ffffffffffffffffffffffffffffffffffffffff1661151d6116e5565b73ffffffffffffffffffffffffffffffffffffffff16146115a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000081565b600b60009054906101000a900460ff1681565b60045481565b60006116c842600a60000160009054906101000a900463ffffffff1663ffffffff16612810565b905090565b60066020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600a8060000160009054906101000a900463ffffffff16908060000160049054906101000a900463ffffffff16908060000160089054906101000a900463ffffffff169080600001600c9054906101000a90046bffffffffffffffffffffffff16905084565b61178033826000612829565b50565b6000600a60000160089054906101000a900463ffffffff1663ffffffff16905090565b600b60009054906101000a900460ff1615611829576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6661726d696e672069732073746f70706564000000000000000000000000000081525060200191505060405180910390fd5b6118316120c7565b73ffffffffffffffffffffffffffffffffffffffff1661184f6116e5565b73ffffffffffffffffffffffffffffffffffffffff16146118d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600081141561194f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f656d707479205f726577617264734475726174696f6e0000000000000000000081525060200191505060405180910390fd5b600a60000160009054906101000a900463ffffffff1663ffffffff1642116119c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603d815260200180612db9603d913960400191505060405180910390fd5b80600a60000160046101000a81548163ffffffff021916908363ffffffff1602179055507ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d3816040518082815260200191505060405180910390a150565b6000806008541415611a36576005549050611a7b565b600854670de0b6b3a7640000600454600a60000160089054906101000a900463ffffffff1663ffffffff16611a696116a1565b03020281611a7357fe5b046005540190505b90565b7f000000000000000000000000000000000000000000000000000000000000000081565b60055481565b611ab06120c7565b73ffffffffffffffffffffffffffffffffffffffff16611ace6116e5565b73ffffffffffffffffffffffffffffffffffffffff1614611b57576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611ceb57807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611c3357600080fd5b505afa158015611c47573d6000803e3d6000fd5b505050506040513d6020811015611c5d57600080fd5b8101908080519060200190929190505050036008541115611ce6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f616d6f756e7420697320746f6f2062696720746f20726573637565000000000081525060200191505060405180910390fd5b611dae565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611dad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f72657761726420746f6b656e2063616e206e6f7420626520726573637565640081525060200191505060405180910390fd5b5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611e1f57600080fd5b505af1158015611e33573d6000803e3d6000fd5b505050506040513d6020811015611e4957600080fd5b810190808051906020019092919050505050505050565b611ea8600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ead565b611eb061145f565b565b6000600a60000160009054906101000a900463ffffffff1663ffffffff16905090565b611edd6120c7565b73ffffffffffffffffffffffffffffffffffffffff16611efb6116e5565b73ffffffffffffffffffffffffffffffffffffffff1614611f84576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561200a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180612df66026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600280541415612147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60028081905550816000612159611a20565b90508060058190555061216a6116a1565b600a60000160086101000a81548163ffffffff021916908363ffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612252576121ca8261081d565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60008514156122c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f43616e6e6f74207769746864726177203000000000000000000000000000000081525060200191505060405180910390fd5b846008540360088190555084600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156123ea57600080fd5b505af11580156123fe573d6000803e3d6000fd5b505050506040513d602081101561241457600080fd5b8101908080519060200190929190505050612497576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f746f6b656e207472616e73666572206661696c6564000000000000000000000081525060200191505060405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5866040518082815260200191505060405180910390a250506001600281905550505050565b600060028054141561256e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60028081905550826000612580611a20565b9050806005819055506125916116a1565b600a60000160086101000a81548163ffffffff021916908363ffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612679576125f18261081d565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925060008314612800576000600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1985856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561279957600080fd5b505af11580156127ad573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486846040518082815260200191505060405180910390a25b5050600160028190555092915050565b600081831061281f5781612821565b825b905092915050565b6002805414156128a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60028081905550600360009054906101000a900460ff161561290e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603c815260200180612e1c603c913960400191505060405180910390fd5b826000612919611a20565b90508060058190555061292a6116a1565b600a60000160086101000a81548163ffffffff021916908363ffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612a125761298a8261081d565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6000600a60000160009054906101000a900463ffffffff1663ffffffff161415612aa4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f5374616b6520706572696f64206e6f742073746172746564207965740000000081525060200191505060405180910390fd5b6000841415612b1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f43616e6e6f74207374616b65203000000000000000000000000000000000000081525060200191505060405180910390fd5b836008540160088190555083600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508215612bb657612d13565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd8630876040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015612c6557600080fd5b505af1158015612c79573d6000803e3d6000fd5b505050506040513d6020811015612c8f57600080fd5b8101908080519060200190929190505050612d12576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f746f6b656e207472616e73666572206661696c6564000000000000000000000081525060200191505060405180910390fd5b5b8473ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d856040518082815260200191505060405180910390a250506001600281905550505050565b6040518060800160405280600063ffffffff168152602001600063ffffffff168152602001600063ffffffff16815260200160006bffffffffffffffffffffffff168152509056fe50726576696f757320706572696f64206d75737420626520636f6d706c657465206265666f7265206368616e67696e6720746865206475726174696f6e4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735468697320616374696f6e2063616e6e6f7420626520706572666f726d6564207768696c652074686520636f6e74726163742069732070617573656463616e27742073746f70206966206e6f742073746172746564206f7220616c72656164792066696e6973686564a264697066735822122057c848b4d26a0a6f9e5571d51011dc4f9b666f3ee3c5e0d605749c24c476125e64736f6c6343000705003372657761726473546f6b656e206d757374206265204f6e44656d616e64546f6b656e4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","sourceMap":"540:9057:16:-:0;;;1045:1;1017:29;;2296:551;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2444:6;884:17:0;904:12;:10;;;:12;;:::i;:::-;884:32;;935:9;926:6;;:18;;;;;;;;;;;;;;;;;;992:9;959:43;;988:1;959:43;;;;;;;;;;;;850:159;188:25:13;206:6;188:17;;;:25;;:::i;:::-;150:70;1645:1:8;1760:7;:22;;;;464:1:14;445:21;;:7;:5;;;:7;;:::i;:::-;:21;;;;437:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2484:13:16::1;2470:44;;;:46;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;2462:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2588:13;2566:36;;;;;;;;;;::::0;::::1;2634:13;2612:36;;;;;;;;;;::::0;::::1;2680:20;2658:19;;:42;;;;;;;;;;;;;;;;;;2738:7;2711:8;:24;;;:34;;;;;;;;;;;;;;;;;;2802:13;2788:50;;;:52;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;2766:74;;;;::::0;::::1;2296:551:::0;;;;540:9057;;598:104:7;651:15;685:10;678:17;;598:104;:::o;2011:240:0:-;1308:12;:10;;;:12;;:::i;:::-;1297:23;;:7;:5;;;:7;;:::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2119:1:::1;2099:22;;:8;:22;;;;2091:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2208:8;2179:38;;2200:6;::::0;::::1;;;;;;;;2179:38;;;;;;;;;;;;2236:8;2227:6;::::0;:17:::1;;;;;;;;;;;;;;;;;;2011:240:::0;:::o;1085:85::-;1131:7;1157:6;;;;;;;;;;;1150:13;;1085:85;:::o;540:9057:16:-;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608060405234801561001057600080fd5b50600436106102055760003560e01c806372f702f31161011a578063c8f33c91116100ad578063df136d651161007c578063df136d6514610725578063e5711e8b14610743578063e9fad8ee146107b1578063ebe2b12b146107bb578063f2fde38b146107d957610205565b8063c8f33c9114610687578063cc1a378f146106a5578063cd3daf9d146106d3578063d1af0c7d146106f157610205565b80638b876347116100e95780638b8763471461057a5780638da5cb5b146105d2578063a0e4395914610606578063a694fc3a1461065957610205565b806372f702f3146104ea57806375f12b211461051e5780637b0a47ee1461053e57806380faa57d1461055c57610205565b80632e1a7d4d1161019d5780633fc6df6e1161016c5780633fc6df6e1461041657806354fd4d501461044a5780635c975abb1461046857806370a0823114610488578063715018a6146104e057610205565b80632e1a7d4d14610392578063386a9525146103c05780633c6b16ab146103de5780633d18b9121461040c57610205565b806318160ddd116101d957806318160ddd1461030857806319762143146103265780631c1f78eb1461036a578063207e11aa1461038857610205565b80628cc2621461020a5780630700037d146102625780630e00f75a146102ba57806316c38b3c146102d8575b600080fd5b61024c6004803603602081101561022057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061081d565b6040518082815260200191505060405180910390f35b6102a46004803603602081101561027857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610902565b6040518082815260200191505060405180910390f35b6102c261091a565b6040518082815260200191505060405180910390f35b610306600480360360208110156102ee57600080fd5b8101908080351515906020019092919050505061093e565b005b610310610a73565b6040518082815260200191505060405180910390f35b6103686004803603602081101561033c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a7d565b005b610372610b70565b6040518082815260200191505060405180910390f35b610390610b97565b005b6103be600480360360208110156103a857600080fd5b8101908080359060200190929190505050610ead565b005b6103c8610ebb565b6040518082815260200191505060405180910390f35b61040a600480360360208110156103f457600080fd5b8101908080359060200190929190505050610ede565b005b61041461145f565b005b61041e61146c565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610452611492565b6040518082815260200191505060405180910390f35b61047061149b565b60405180821515815260200191505060405180910390f35b6104ca6004803603602081101561049e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114ae565b6040518082815260200191505060405180910390f35b6104e86114f7565b005b6104f2611664565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610526611688565b60405180821515815260200191505060405180910390f35b61054661169b565b6040518082815260200191505060405180910390f35b6105646116a1565b6040518082815260200191505060405180910390f35b6105bc6004803603602081101561059057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116cd565b6040518082815260200191505060405180910390f35b6105da6116e5565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61060e61170e565b604051808563ffffffff1681526020018463ffffffff1681526020018363ffffffff168152602001826bffffffffffffffffffffffff16815260200194505050505060405180910390f35b6106856004803603602081101561066f57600080fd5b8101908080359060200190929190505050611774565b005b61068f611783565b6040518082815260200191505060405180910390f35b6106d1600480360360208110156106bb57600080fd5b81019080803590602001909291905050506117a6565b005b6106db611a20565b6040518082815260200191505060405180910390f35b6106f9611a7e565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61072d611aa2565b6040518082815260200191505060405180910390f35b6107af6004803603606081101561075957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611aa8565b005b6107b9611e60565b005b6107c3611eb2565b6040518082815260200191505060405180910390f35b61081b600480360360208110156107ef57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ed5565b005b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054670de0b6b3a7640000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108b0611a20565b03600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205402816108f957fe5b04019050919050565b60076020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6109466120c7565b73ffffffffffffffffffffffffffffffffffffffff166109646116e5565b73ffffffffffffffffffffffffffffffffffffffff16146109ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600360009054906101000a900460ff1615158115151415610a0d57610a70565b80600360006101000a81548160ff0219169083151502179055507f8fb6c181ee25a520cf3dd6565006ef91229fcfe5a989566c2a3b8c115570cec5600360009054906101000a900460ff1660405180821515815260200191505060405180910390a15b50565b6000600854905090565b610a856120c7565b73ffffffffffffffffffffffffffffffffffffffff16610aa36116e5565b73ffffffffffffffffffffffffffffffffffffffff1614610b2c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600a60000160049054906101000a900463ffffffff1663ffffffff1660045402905090565b600b60009054906101000a900460ff1615610c1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6661726d696e672069732073746f70706564000000000000000000000000000081525060200191505060405180910390fd5b610c226120c7565b73ffffffffffffffffffffffffffffffffffffffff16610c406116e5565b73ffffffffffffffffffffffffffffffffffffffff1614610cc9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b610cd1612d70565b600a6040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815250509050806000015163ffffffff164210610df2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180612e58602d913960400191505060405180910390fd5b6001600b60006101000a81548160ff021916908315150217905550600060085414610e5a57600042826000015163ffffffff1603905080826020015163ffffffff1603600a60000160046101000a81548163ffffffff021916908363ffffffff160217905550505b42600a60000160006101000a81548163ffffffff021916908363ffffffff1602179055507fb31605747019cb5809dbdb8c268c9c5bb666d39291f8750fa0dd4ac517b1570460405160405180910390a150565b610eb88133336120cf565b50565b6000600a60000160049054906101000a900463ffffffff1663ffffffff16905090565b600b60009054906101000a900460ff1615610f61576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6661726d696e672069732073746f70706564000000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611024576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f43616c6c6572206973206e6f7420526577617264734469737472696275746f7281525060200191505060405180910390fd5b60008061102f611a20565b9050806005819055506110406116a1565b600a60000160086101000a81548163ffffffff021916908363ffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611128576110a08261081d565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b611130612d70565b600a6040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff168152505090506000816000015163ffffffff16421061121d57816020015163ffffffff16858161121557fe5b049050611252565b600042836000015163ffffffff16039050600060045482029050836020015163ffffffff168188018161124c57fe5b04925050505b60008114156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f696e76616c69642072657761726452617465000000000000000000000000000081525060200191505060405180910390fd5b80600481905550600085600a600001600c9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff160190507f0000000000000000000000000000000000000000000000000000000000000000811115611398576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f72657761726473206f766572666c6f770000000000000000000000000000000081525060200191505060405180910390fd5b80600a600001600c6101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555042600a60000160086101000a81548163ffffffff021916908363ffffffff160217905550826020015163ffffffff164201600a60000160006101000a81548163ffffffff021916908363ffffffff1602179055507fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d866040518082815260200191505060405180910390a1505050505050565b61146933336124f4565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001905090565b600360009054906101000a900460ff1681565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6114ff6120c7565b73ffffffffffffffffffffffffffffffffffffffff1661151d6116e5565b73ffffffffffffffffffffffffffffffffffffffff16146115a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000081565b600b60009054906101000a900460ff1681565b60045481565b60006116c842600a60000160009054906101000a900463ffffffff1663ffffffff16612810565b905090565b60066020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600a8060000160009054906101000a900463ffffffff16908060000160049054906101000a900463ffffffff16908060000160089054906101000a900463ffffffff169080600001600c9054906101000a90046bffffffffffffffffffffffff16905084565b61178033826000612829565b50565b6000600a60000160089054906101000a900463ffffffff1663ffffffff16905090565b600b60009054906101000a900460ff1615611829576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6661726d696e672069732073746f70706564000000000000000000000000000081525060200191505060405180910390fd5b6118316120c7565b73ffffffffffffffffffffffffffffffffffffffff1661184f6116e5565b73ffffffffffffffffffffffffffffffffffffffff16146118d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600081141561194f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f656d707479205f726577617264734475726174696f6e0000000000000000000081525060200191505060405180910390fd5b600a60000160009054906101000a900463ffffffff1663ffffffff1642116119c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603d815260200180612db9603d913960400191505060405180910390fd5b80600a60000160046101000a81548163ffffffff021916908363ffffffff1602179055507ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d3816040518082815260200191505060405180910390a150565b6000806008541415611a36576005549050611a7b565b600854670de0b6b3a7640000600454600a60000160089054906101000a900463ffffffff1663ffffffff16611a696116a1565b03020281611a7357fe5b046005540190505b90565b7f000000000000000000000000000000000000000000000000000000000000000081565b60055481565b611ab06120c7565b73ffffffffffffffffffffffffffffffffffffffff16611ace6116e5565b73ffffffffffffffffffffffffffffffffffffffff1614611b57576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611ceb57807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611c3357600080fd5b505afa158015611c47573d6000803e3d6000fd5b505050506040513d6020811015611c5d57600080fd5b8101908080519060200190929190505050036008541115611ce6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f616d6f756e7420697320746f6f2062696720746f20726573637565000000000081525060200191505060405180910390fd5b611dae565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611dad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f72657761726420746f6b656e2063616e206e6f7420626520726573637565640081525060200191505060405180910390fd5b5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611e1f57600080fd5b505af1158015611e33573d6000803e3d6000fd5b505050506040513d6020811015611e4957600080fd5b810190808051906020019092919050505050505050565b611ea8600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ead565b611eb061145f565b565b6000600a60000160009054906101000a900463ffffffff1663ffffffff16905090565b611edd6120c7565b73ffffffffffffffffffffffffffffffffffffffff16611efb6116e5565b73ffffffffffffffffffffffffffffffffffffffff1614611f84576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561200a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180612df66026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600280541415612147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60028081905550816000612159611a20565b90508060058190555061216a6116a1565b600a60000160086101000a81548163ffffffff021916908363ffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612252576121ca8261081d565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60008514156122c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f43616e6e6f74207769746864726177203000000000000000000000000000000081525060200191505060405180910390fd5b846008540360088190555084600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156123ea57600080fd5b505af11580156123fe573d6000803e3d6000fd5b505050506040513d602081101561241457600080fd5b8101908080519060200190929190505050612497576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f746f6b656e207472616e73666572206661696c6564000000000000000000000081525060200191505060405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5866040518082815260200191505060405180910390a250506001600281905550505050565b600060028054141561256e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60028081905550826000612580611a20565b9050806005819055506125916116a1565b600a60000160086101000a81548163ffffffff021916908363ffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612679576125f18261081d565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925060008314612800576000600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1985856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561279957600080fd5b505af11580156127ad573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486846040518082815260200191505060405180910390a25b5050600160028190555092915050565b600081831061281f5781612821565b825b905092915050565b6002805414156128a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60028081905550600360009054906101000a900460ff161561290e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603c815260200180612e1c603c913960400191505060405180910390fd5b826000612919611a20565b90508060058190555061292a6116a1565b600a60000160086101000a81548163ffffffff021916908363ffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612a125761298a8261081d565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6000600a60000160009054906101000a900463ffffffff1663ffffffff161415612aa4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f5374616b6520706572696f64206e6f742073746172746564207965740000000081525060200191505060405180910390fd5b6000841415612b1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f43616e6e6f74207374616b65203000000000000000000000000000000000000081525060200191505060405180910390fd5b836008540160088190555083600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508215612bb657612d13565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd8630876040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015612c6557600080fd5b505af1158015612c79573d6000803e3d6000fd5b505050506040513d6020811015612c8f57600080fd5b8101908080519060200190929190505050612d12576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f746f6b656e207472616e73666572206661696c6564000000000000000000000081525060200191505060405180910390fd5b5b8473ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d856040518082815260200191505060405180910390a250506001600281905550505050565b6040518060800160405280600063ffffffff168152602001600063ffffffff168152602001600063ffffffff16815260200160006bffffffffffffffffffffffff168152509056fe50726576696f757320706572696f64206d75737420626520636f6d706c657465206265666f7265206368616e67696e6720746865206475726174696f6e4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735468697320616374696f6e2063616e6e6f7420626520706572666f726d6564207768696c652074686520636f6e74726163742069732070617573656463616e27742073746f70206966206e6f742073746172746564206f7220616c72656164792066696e6973686564a264697066735822122057c848b4d26a0a6f9e5571d51011dc4f9b666f3ee3c5e0d605749c24c476125e64736f6c63430007050033","sourceMap":"540:9057:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7437:205;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1161:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;881:44;;;:::i;:::-;;;;;;;;;;;;;;;;;;;655:355:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6864:98:16;;;:::i;:::-;;;;;;;;;;;;;;;;;;;479:140:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6387:134:16;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4696:509;;;:::i;:::-;;6617:108;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6038:107;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2907:1162;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6731:88;;;:::i;:::-;;224:34:15;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;6527:84:16;;;:::i;:::-;;;;;;;;;;;;;;;;;;;136:18:14;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;6262:119:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1717:145:0;;;:::i;:::-;;974:36:16;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1323:19;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1017:29;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6968:147;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1098:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1085:85:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1296:21:16;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5372:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6151:105;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4075:432;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7121:310;;;:::i;:::-;;;;;;;;;;;;;;;;;;;932:36;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1052:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5477:448;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5263:103;;;:::i;:::-;;5931:101;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2011:240:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7437:205:16;7508:7;7619;:16;7627:7;7619:16;;;;;;;;;;;;;;;;7611:4;7576:22;:31;7599:7;7576:31;;;;;;;;;;;;;;;;7557:16;:14;:16::i;:::-;:50;7535:9;:18;7545:7;7535:18;;;;;;;;;;;;;;;;:73;:80;;;;;;7534:101;7527:108;;7437:205;;;:::o;1161:42::-;;;;;;;;;;;;;;;;;:::o;881:44::-;;;:::o;655:355:14:-;1308:12:0;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;806:6:14::1;;;;;;;;;;;795:17;;:7;:17;;;791:54;;;828:7;;791:54;897:7;888:6;;:16;;;;;;;;;;;;;;;;;;983:20;996:6;;;;;;;;;;;983:20;;;;;;;;;;;;;;;;;;;;1367:1:0;655:355:14::0;:::o;6864:98:16:-;6917:7;6943:12;;6936:19;;6864:98;:::o;479:140:15:-;1308:12:0;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;592:20:15::1;570:19;;:42;;;;;;;;;;;;;;;;;;479:140:::0;:::o;6387:134:16:-;6451:7;6490:8;:24;;;;;;;;;;;;6477:37;;:10;;:37;6470:44;;6387:134;:::o;4696:509::-;1772:7;;;;;;;;;;;1771:8;1763:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1308:12:0::1;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;4769:14:16::2;;:::i;:::-;4786:8;4769:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;4830:1;:14;;;4812:32;;:15;:32;4804:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4915:4;4905:7;;:14;;;;;;;;;;;;;;;;;;4950:1;4934:12;;:17;4930:178;;4967:17;5004:15;4987:1;:14;;;:32;;;4967:52;;5087:9;5067:1;:17;;;:29;;;5033:8;:24;;;:64;;;;;;;;;;;;;;;;;;4930:178;;5149:15;5118:8;:21;;;:47;;;;;;;;;;;;;;;;;;5181:17;;;;;;;;;;1367:1:0;4696:509:16:o:0;6617:108::-;6677:41;6687:6;6695:10;6707;6677:9;:41::i;:::-;6617:108;:::o;6038:107::-;6088:7;6114:8;:24;;;;;;;;;;;;6107:31;;;;6038:107;:::o;2907:1162::-;1772:7;;;;;;;;;;;1771:8;1763:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;332:19:15::1;;;;;;;;;;;318:33;;:10;:33;;;310:78;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;3048:1:16::2;1883:31:::0;1917:16:::2;:14;:16::i;:::-;1883:50;;1966:23;1943:20;:46;;;;2032:26;:24;:26::i;:::-;1999:8;:23;;;:60;;;;;;;;;;;;;;;;;;2093:1;2074:21;;:7;:21;;;2070:157;;2130:15;2137:7;2130:6;:15::i;:::-;2111:7;:16;2119:7;2111:16;;;;;;;;;;;;;;;:34;;;;2193:23;2159:22;:31;2182:7;2159:31;;;;;;;;;;;;;;;:57;;;;2070:157;3062:14:::3;;:::i;:::-;3079:8;3062:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::3;;;3097:21;3152:1;:14;;;3133:33;;:15;:33;3129:315;;3208:1;:17;;;3198:27;;:7;:27;;;;;;3182:43;;3129:315;;;3256:17;3293:15;3276:1;:14;;;:32;;;3256:52;;3322:16;3353:10;;3341:9;:22;3322:41;;3416:1;:17;;;3393:40;;3404:8;3394:7;:18;3393:40;;;;;;3377:56;;3129:315;;;3479:1;3462:13;:18;;3454:49;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;3527:13;3514:10;:26;;;;3677;3736:7;3706:8;:27;;;;;;;;;;;;:37;;;3677:66;;3783:19;3761:18;:41;;3753:70;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;3871:18;3834:8;:27;;;:56;;;;;;;;;;;;;;;;;;3933:15;3900:8;:23;;;:49;;;;;;;;;;;;;;;;;;4008:1;:17;;;3990:35;;:15;:35;3959:8;:21;;;:67;;;;;;;;;;;;;;;;;;4042:20;4054:7;4042:20;;;;;;;;;;;;;;;;;;2237:1;;;398::15::2;;2907:1162:16::0;:::o;6731:88::-;6778:34;6789:10;6801;6778;:34::i;:::-;;6731:88::o;224:34:15:-;;;;;;;;;;;;;:::o;6527:84:16:-;6577:7;6603:1;6596:8;;6527:84;:::o;136:18:14:-;;;;;;;;;;;;;:::o;6262:119:16:-;6330:7;6356:9;:18;6366:7;6356:18;;;;;;;;;;;;;;;;6349:25;;6262:119;;;:::o;1717:145:0:-;1308:12;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1823:1:::1;1786:40;;1807:6;::::0;::::1;;;;;;;;1786:40;;;;;;;;;;;;1853:1;1836:6:::0;::::1;:19;;;;;;;;;;;;;;;;;;1717:145::o:0;974:36:16:-;;;:::o;1323:19::-;;;;;;;;;;;;;:::o;1017:29::-;;;;:::o;6968:147::-;7034:7;7060:48;7069:15;7086:8;:21;;;;;;;;;;;;7060:48;;:8;:48::i;:::-;7053:55;;6968:147;:::o;1098:57::-;;;;;;;;;;;;;;;;;:::o;1085:85:0:-;1131:7;1157:6;;;;;;;;;;;1150:13;;1085:85;:::o;1296:21:16:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5372:99::-;5431:33;5438:10;5450:6;5458:5;5431:6;:33::i;:::-;5372:99;:::o;6151:105::-;6200:7;6226:8;:23;;;;;;;;;;;;6219:30;;;;6151:105;:::o;4075:432::-;1772:7;;;;;;;;;;;1771:8;1763:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1308:12:0::1;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;4197:1:16::2;4177:16;:21;;4169:56;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;4275:8;:21;;;;;;;;;;;;4257:39;;:15;:39;4236:147;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4428:16;4394:8;:24;;;:51;;;;;;;;;;;;;;;;;;4460:40;4483:16;4460:40;;;;;;;;;;;;;;;;;;4075:432:::0;:::o;7121:310::-;7177:7;7216:1;7200:12;;:17;7196:75;;;7240:20;;7233:27;;;;7196:75;7402:12;;7395:4;7382:10;;7355:8;:23;;;;;;;;;;;;7326:52;;:26;:24;:26::i;:::-;:52;7325:67;:74;:89;;;;;;7288:20;;:136;7281:143;;7121:310;;:::o;932:36::-;;;:::o;1052:35::-;;;;:::o;5477:448::-;1308:12:0;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5611:12:16::1;5584:40;;5592:6;5584:40;;;5580:292;;;5704:7;5664:12;:22;;;5695:4;5664:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;:47;5648:12;;:63;;5640:103;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;5580:292;;;5791:12;5764:40;;5772:6;5764:40;;;5760:112;;;5820:41;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;5760:112;5580:292;5882:6;:15;;;5898:10;5910:7;5882:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;5477:448:::0;;;:::o;5263:103::-;5307:31;5316:9;:21;5326:10;5316:21;;;;;;;;;;;;;;;;5307:8;:31::i;:::-;5348:11;:9;:11::i;:::-;5263:103::o;5931:101::-;5978:7;6004:8;:21;;;;;;;;;;;;5997:28;;;;5931:101;:::o;2011:240:0:-;1308:12;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2119:1:::1;2099:22;;:8;:22;;;;2091:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2208:8;2179:38;;2200:6;::::0;::::1;;;;;;;;2179:38;;;;;;;;;;;;2236:8;2227:6;::::0;:17:::1;;;;;;;;;;;;;;;;;;2011:240:::0;:::o;598:104:7:-;651:15;685:10;678:17;;598:104;:::o;8549:561:16:-;1688:1:8;2277:7;;:19;;2269:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1688:1;2407:7;:18;;;;8652:4:16::1;1883:31;1917:16;:14;:16::i;:::-;1883:50;;1966:23;1943:20;:46;;;;2032:26;:24;:26::i;:::-;1999:8;:23;;;:60;;;;;;;;;;;;;;;;;;2093:1;2074:21;;:7;:21;;;2070:157;;2130:15;2137:7;2130:6;:15::i;:::-;2111:7;:16;2119:7;2111:16;;;;;;;;;;;;;;;:34;;;;2193:23;2159:22;:31;2182:7;2159:31;;;;;;;;;;;;;;;:57;;;;2070:157;8686:1:::2;8676:6;:11;;8668:41;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;8847:6;8832:12;;:21;8817:12;:36;;;;8899:6;8881:9;:15;8891:4;8881:15;;;;;;;;;;;;;;;;:24;8863:9;:15;8873:4;8863:15;;;;;;;;;;;;;;;:42;;;;8998:12;:21;;;9020:9;9031:6;8998:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;8990:74;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;9090:4;9080:23;;;9096:6;9080:23;;;;;;;;;;;;;;;;;;2436:1:8::1;;1645::::0;2580:7;:22;;;;8549:561:16;;;:::o;9199:396::-;9350:14;1688:1:8;2277:7;;:19;;2269:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1688:1;2407:7;:18;;;;9327:4:16::1;1883:31;1917:16;:14;:16::i;:::-;1883:50;;1966:23;1943:20;:46;;;;2032:26;:24;:26::i;:::-;1999:8;:23;;;:60;;;;;;;;;;;;;;;;;;2093:1;2074:21;;:7;:21;;;2070:157;;2130:15;2137:7;2130:6;:15::i;:::-;2111:7;:16;2119:7;2111:16;;;;;;;;;;;;;;;:34;;;;2193:23;2159:22;:31;2182:7;2159:31;;;;;;;;;;;;;;;:57;;;;2070:157;9389:7:::2;:13;9397:4;9389:13;;;;;;;;;;;;;;;;9380:22;;9427:1;9417:6;:11;9413:176;;9460:1;9444:7;:13;9452:4;9444:13;;;;;;;;;;;;;;;:17;;;;9497:12;9475:41;;;9517:9;9528:6;9475:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;9565:4;9554:24;;;9571:6;9554:24;;;;;;;;;;;;;;;;;;9413:176;2436:1:8::1;;1645::::0;2580:7;:22;;;;9199:396:16;;;;:::o;399:104:1:-;457:7;487:1;483;:5;:13;;495:1;483:13;;;491:1;483:13;476:20;;399:104;;;;:::o;7648:728:16:-;1688:1:8;2277:7;;:19;;2269:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1688:1;2407:7;:18;;;;239:6:14::1;;;;;;;;;;;238:7;230:80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7787:4:16::2;1883:31;1917:16;:14;:16::i;:::-;1883:50;;1966:23;1943:20;:46;;;;2032:26;:24;:26::i;:::-;1999:8;:23;;;:60;;;;;;;;;;;;;;;;;;2093:1;2074:21;;:7;:21;;;2070:157;;2130:15;2137:7;2130:6;:15::i;:::-;2111:7;:16;2119:7;2111:16;;;;;;;;;;;;;;;:34;;;;2193:23;2159:22;:31;2182:7;2159:31;;;;;;;;;;;;;;;:57;;;;2070:157;7840:1:::3;7815:8;:21;;;;;;;;;;;;:26;;;;7807:67;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;7902:1;7892:6;:11;;7884:38;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;7963:6;7948:12;;:21;7933:12;:36;;;;8015:6;7997:9;:15;8007:4;7997:15;;;;;;;;;;;;;;;;:24;7979:9;:15;7989:4;7979:15;;;;;;;;;;;;;;;:42;;;;8036:9;8032:302;;;;;;8243:12;:25;;;8269:4;8283;8290:6;8243:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;;;;;;8235:88;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;8032:302;8356:4;8349:20;;;8362:6;8349:20;;;;;;;;;;;;;;;;;;320:1:14::2;;1645::8::0;2580:7;:22;;;;7648:728:16;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o","linkReferences":{},"immutableReferences":{"2132":[{"start":2332,"length":32},{"start":4868,"length":32}],"2134":[{"start":6784,"length":32},{"start":7405,"length":32},{"start":9994,"length":32}],"2136":[{"start":5734,"length":32},{"start":7001,"length":32},{"start":7086,"length":32},{"start":9051,"length":32},{"start":11192,"length":32}]}},"methodIdentifiers":{"balanceOf(address)":"70a08231","earned(address)":"008cc262","exit()":"e9fad8ee","finishFarming()":"207e11aa","getReward()":"3d18b912","getRewardForDuration()":"1c1f78eb","lastTimeRewardApplicable()":"80faa57d","lastUpdateTime()":"c8f33c91","maxEverTotalRewards()":"0e00f75a","notifyRewardAmount(uint256)":"3c6b16ab","owner()":"8da5cb5b","paused()":"5c975abb","periodFinish()":"ebe2b12b","renounceOwnership()":"715018a6","rescueToken(address,address,uint256)":"e5711e8b","rewardPerToken()":"cd3daf9d","rewardPerTokenStored()":"df136d65","rewardRate()":"7b0a47ee","rewards(address)":"0700037d","rewardsDistribution()":"3fc6df6e","rewardsDuration()":"386a9525","rewardsToken()":"d1af0c7d","setPaused(bool)":"16c38b3c","setRewardsDistribution(address)":"19762143","setRewardsDuration(uint256)":"cc1a378f","stake(uint256)":"a694fc3a","stakingToken()":"72f702f3","stopped()":"75f12b21","timeData()":"a0e43959","totalSupply()":"18160ddd","transferOwnership(address)":"f2fde38b","userRewardPerTokenPaid(address)":"8b876347","version()":"54fd4d50","withdraw(uint256)":"2e1a7d4d"},"rawMetadata":"{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FarmingFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEverTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"}],\"name\":\"setRewardsDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeData\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"periodFinish\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardsDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdateTime\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"totalRewardsSupply\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setPaused(bool)\":{\"details\":\"Only the contract owner may call this.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setPaused(bool)\":{\"notice\":\"Change the paused state of the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/staking/StakingRewards.sol\":\"StakingRewards\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/=src/@openzeppelin/\",\":contracts/interfaces/=src/interfaces/\",\":contracts/staking/=src/staking/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"src/@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"src/@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"src/@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"src/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"src/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"src/@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"src/@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"src/@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"src/interfaces/IBurnableToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\ninterface IBurnableToken {\\n    function burn(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x33bbcc3566e704136d99c527476a0bdbf7b1961a6d793b0d75fc022d0c0e596a\",\"license\":\"MIT\"},\"src/interfaces/IStakingRewards.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n\\ninterface IStakingRewards {\\n    // Mutative\\n    function stake(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function getReward() external;\\n\\n    function exit() external;\\n    // Views\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getRewardForDuration() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x66350f7143ec0fb1faeeaad4c432bd082e6c1759867632f3c0579407c01688ca\",\"license\":\"MIT\"},\"src/interfaces/MintableToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"../interfaces/Owned.sol\\\";\\nimport \\\"../interfaces/IBurnableToken.sol\\\";\\n\\n/// @author  umb.network\\nabstract contract MintableToken is Owned, ERC20, IBurnableToken {\\n    uint256 public immutable maxAllowedTotalSupply;\\n    uint256 public everMinted;\\n\\n    modifier assertMaxSupply(uint256 _amountToMint) {\\n        _assertMaxSupply(_amountToMint);\\n        _;\\n    }\\n\\n    // ========== CONSTRUCTOR ========== //\\n\\n    constructor (uint256 _maxAllowedTotalSupply) {\\n        require(_maxAllowedTotalSupply != 0, \\\"_maxAllowedTotalSupply is empty\\\");\\n\\n        maxAllowedTotalSupply = _maxAllowedTotalSupply;\\n    }\\n\\n    // ========== MUTATIVE FUNCTIONS ========== //\\n\\n    function burn(uint256 _amount) override external {\\n        _burn(msg.sender, _amount);\\n    }\\n\\n    // ========== RESTRICTED FUNCTIONS ========== //\\n\\n    function mint(address _holder, uint256 _amount)\\n        virtual\\n        external\\n        onlyOwner()\\n        assertMaxSupply(_amount)\\n    {\\n        require(_amount != 0, \\\"zero amount\\\");\\n\\n        _mint(_holder, _amount);\\n    }\\n\\n    function _assertMaxSupply(uint256 _amountToMint) internal {\\n        uint256 everMintedTotal = everMinted + _amountToMint;\\n        everMinted = everMintedTotal;\\n        require(everMintedTotal <= maxAllowedTotalSupply, \\\"total supply limit exceeded\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x0e9c51ac7314b39f2fd89ec6c193d5dc3c64024a2315126c6398dc882e8ff4b0\",\"license\":\"MIT\"},\"src/interfaces/OnDemandToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"./MintableToken.sol\\\";\\n\\nabstract contract OnDemandToken is MintableToken {\\n    bool constant public ON_DEMAND_TOKEN = true;\\n\\n    mapping (address => bool) public minters;\\n\\n    event SetupMinter(address minter, bool active);\\n\\n    modifier onlyOwnerOrMinter() {\\n        address msgSender = _msgSender();\\n        require(owner() == msgSender || minters[msgSender], \\\"access denied\\\");\\n\\n        _;\\n    }\\n\\n    function setupMinter(address _minter, bool _active) external onlyOwner() {\\n        minters[_minter] = _active;\\n        emit SetupMinter(_minter, _active);\\n    }\\n\\n    function setupMinters(address[] calldata _minters, bool[] calldata _actives) external onlyOwner() {\\n        for (uint256 i; i < _minters.length; i++) {\\n            minters[_minters[i]] = _actives[i];\\n            emit SetupMinter(_minters[i], _actives[i]);\\n        }\\n    }\\n\\n    function mint(address _holder, uint256 _amount)\\n        external\\n        virtual\\n        override\\n        onlyOwnerOrMinter()\\n        assertMaxSupply(_amount)\\n    {\\n        require(_amount != 0, \\\"zero amount\\\");\\n\\n        _mint(_holder, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x483b7d064bed28f812ec9cf8887c053da6bc2b565f9c5b6bc4f8d1fddac1095b\",\"license\":\"MIT\"},\"src/interfaces/Owned.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Owned is Ownable {\\n    constructor(address _owner) {\\n        transferOwnership(_owner);\\n    }\\n}\\n\",\"keccak256\":\"0x8e08f3f5b90317a3d417bad3782998c67e20e3d0a91bd30d4a8435c26d93ce76\",\"license\":\"MIT\"},\"src/interfaces/Pausable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n// Inheritance\\nimport \\\"./Owned.sol\\\";\\n\\n\\nabstract contract Pausable is Owned {\\n    bool public paused;\\n\\n    event PauseChanged(bool isPaused);\\n\\n    modifier notPaused {\\n        require(!paused, \\\"This action cannot be performed while the contract is paused\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        // This contract is abstract, and thus cannot be instantiated directly\\n        require(owner() != address(0), \\\"Owner must be set\\\");\\n        // Paused will be false\\n    }\\n\\n    /**\\n     * @notice Change the paused state of the contract\\n     * @dev Only the contract owner may call this.\\n     */\\n    function setPaused(bool _paused) external onlyOwner {\\n        // Ensure we're actually changing the state before we do anything\\n        if (_paused == paused) {\\n            return;\\n        }\\n\\n        // Set our paused state.\\n        paused = _paused;\\n\\n        // Let everyone know that our pause state has changed.\\n        emit PauseChanged(paused);\\n    }\\n}\\n\",\"keccak256\":\"0x08cac63de164d66c347bcaf3d935935d1545bfb963bba924a4bcbb5daaa721ec\",\"license\":\"MIT\"},\"src/interfaces/RewardsDistributionRecipient.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n// Inheritance\\nimport \\\"./Owned.sol\\\";\\n\\n\\n// https://docs.synthetix.io/contracts/RewardsDistributionRecipient\\nabstract contract RewardsDistributionRecipient is Owned {\\n    address public rewardsDistribution;\\n\\n    modifier onlyRewardsDistribution() {\\n        require(msg.sender == rewardsDistribution, \\\"Caller is not RewardsDistributor\\\");\\n        _;\\n    }\\n\\n    function notifyRewardAmount(uint256 reward) virtual external;\\n\\n    function setRewardsDistribution(address _rewardsDistribution) external onlyOwner {\\n        rewardsDistribution = _rewardsDistribution;\\n    }\\n}\\n\",\"keccak256\":\"0x0c3aae206cb3498514f9a1e5d401c62dcae37288f32fe171afff9dfb9e2f4ae8\",\"license\":\"MIT\"},\"src/staking/StakingRewards.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n// Inheritance\\nimport \\\"../interfaces/IStakingRewards.sol\\\";\\nimport \\\"../interfaces/Pausable.sol\\\";\\nimport \\\"../interfaces/RewardsDistributionRecipient.sol\\\";\\nimport \\\"../interfaces/OnDemandToken.sol\\\";\\nimport \\\"../interfaces/MintableToken.sol\\\";\\n\\n// based on synthetix\\ncontract StakingRewards is IStakingRewards, RewardsDistributionRecipient, ReentrancyGuard, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    struct Times {\\n        uint32 periodFinish;\\n        uint32 rewardsDuration;\\n        uint32 lastUpdateTime;\\n        uint96 totalRewardsSupply;\\n    }\\n\\n    // ========== STATE VARIABLES ========== //\\n\\n    uint256 public immutable maxEverTotalRewards;\\n\\n    IERC20 public immutable rewardsToken;\\n    IERC20 public immutable stakingToken;\\n\\n    uint256 public rewardRate = 0;\\n    uint256 public rewardPerTokenStored;\\n    \\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    Times public timeData;\\n    bool public stopped;\\n\\n    // ========== EVENTS ========== //\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event FarmingFinished();\\n\\n    // ========== MODIFIERS ========== //\\n\\n    modifier whenActive() {\\n        require(!stopped, \\\"farming is stopped\\\");\\n        _;\\n    }\\n\\n    modifier updateReward(address account) virtual {\\n        uint256 newRewardPerTokenStored = rewardPerToken();\\n        rewardPerTokenStored = newRewardPerTokenStored;\\n        timeData.lastUpdateTime = uint32(lastTimeRewardApplicable());\\n\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = newRewardPerTokenStored;\\n        }\\n\\n        _;\\n    }\\n\\n    // ========== CONSTRUCTOR ========== //\\n\\n    constructor(\\n        address _owner,\\n        address _rewardsDistribution,\\n        address _stakingToken,\\n        address _rewardsToken\\n    ) Owned(_owner) {\\n        require(OnDemandToken(_rewardsToken).ON_DEMAND_TOKEN(), \\\"rewardsToken must be OnDemandToken\\\");\\n\\n        stakingToken = IERC20(_stakingToken);\\n        rewardsToken = IERC20(_rewardsToken);\\n        rewardsDistribution = _rewardsDistribution;\\n\\n        timeData.rewardsDuration = 2592000; // 30 days\\n        maxEverTotalRewards = MintableToken(_rewardsToken).maxAllowedTotalSupply();\\n    }\\n\\n    // ========== RESTRICTED FUNCTIONS ========== //\\n\\n    function notifyRewardAmount(\\n        uint256 _reward\\n    ) override virtual external whenActive onlyRewardsDistribution updateReward(address(0)) {\\n        Times memory t = timeData;\\n        uint256 newRewardRate;\\n\\n        if (block.timestamp >= t.periodFinish) {\\n            newRewardRate = _reward / t.rewardsDuration;\\n        } else {\\n            uint256 remaining = t.periodFinish - block.timestamp;\\n            uint256 leftover = remaining * rewardRate;\\n            newRewardRate = (_reward + leftover) / t.rewardsDuration;\\n        }\\n\\n        require(newRewardRate != 0, \\\"invalid rewardRate\\\");\\n\\n        rewardRate = newRewardRate;\\n\\n        // always increasing by _reward even if notification is in a middle of period\\n        // because leftover is included\\n        uint256 totalRewardsSupply = timeData.totalRewardsSupply + _reward;\\n        require(totalRewardsSupply <= maxEverTotalRewards, \\\"rewards overflow\\\");\\n\\n        timeData.totalRewardsSupply = uint96(totalRewardsSupply);\\n        timeData.lastUpdateTime = uint32(block.timestamp);\\n        timeData.periodFinish = uint32(block.timestamp + t.rewardsDuration);\\n\\n        emit RewardAdded(_reward);\\n    }\\n\\n    function setRewardsDuration(uint256 _rewardsDuration) external whenActive onlyOwner {\\n        require(_rewardsDuration != 0, \\\"empty _rewardsDuration\\\");\\n\\n        require(\\n            block.timestamp > timeData.periodFinish,\\n            \\\"Previous period must be complete before changing the duration\\\"\\n        );\\n\\n        timeData.rewardsDuration = uint32(_rewardsDuration);\\n        emit RewardsDurationUpdated(_rewardsDuration);\\n    }\\n\\n    // when farming was started with 1y and 12tokens\\n    // and we want to finish after 4 months, we need to end up with situation\\n    // like we were starting with 4mo and 4 tokens.\\n    function finishFarming() virtual external whenActive onlyOwner {\\n        Times memory t = timeData;\\n        require(block.timestamp < t.periodFinish, \\\"can't stop if not started or already finished\\\");\\n\\n        stopped = true;\\n\\n        if (_totalSupply != 0) {\\n            uint256 remaining = t.periodFinish - block.timestamp;\\n            timeData.rewardsDuration = uint32(t.rewardsDuration - remaining);\\n        }\\n\\n        timeData.periodFinish = uint32(block.timestamp);\\n\\n        emit FarmingFinished();\\n    }\\n\\n    // ========== MUTATIVE FUNCTIONS ========== //\\n\\n    function exit() override external {\\n        withdraw(_balances[msg.sender]);\\n        getReward();\\n    }\\n\\n    function stake(uint256 amount) override external {\\n        _stake(msg.sender, amount, false);\\n    }\\n\\n    function rescueToken(ERC20 _token, address _recipient, uint256 _amount) external onlyOwner() {\\n        if (address(_token) == address(stakingToken)) {\\n            require(_totalSupply <= stakingToken.balanceOf(address(this)) - _amount, \\\"amount is too big to rescue\\\");\\n        } else if (address(_token) == address(rewardsToken)) {\\n            revert(\\\"reward token can not be rescued\\\");\\n        }\\n\\n        _token.transfer(_recipient, _amount);\\n    }\\n\\n    function periodFinish() external view returns (uint256) {\\n        return timeData.periodFinish;\\n    }\\n\\n    function rewardsDuration() external view returns (uint256) {\\n        return timeData.rewardsDuration;\\n    }\\n\\n    function lastUpdateTime() external view returns (uint256) {\\n        return timeData.lastUpdateTime;\\n    }\\n\\n    function balanceOf(address account) override external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function getRewardForDuration() override external view returns (uint256) {\\n        return rewardRate * timeData.rewardsDuration;\\n    }\\n\\n    function version() external pure virtual returns (uint256) {\\n        return 1;\\n    }\\n\\n    function withdraw(uint256 amount) override public {\\n        _withdraw(amount, msg.sender, msg.sender);\\n    }\\n\\n    function getReward() override public {\\n        _getReward(msg.sender, msg.sender);\\n    }\\n\\n    // ========== VIEWS ========== //\\n\\n    function totalSupply() override public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function lastTimeRewardApplicable() override public view returns (uint256) {\\n        return Math.min(block.timestamp, timeData.periodFinish);\\n    }\\n\\n    function rewardPerToken() override public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        return rewardPerTokenStored + (\\n            (lastTimeRewardApplicable() - timeData.lastUpdateTime) * rewardRate * 1e18 / _totalSupply\\n        );\\n    }\\n\\n    function earned(address account) override virtual public view returns (uint256) {\\n        return (_balances[account] * (rewardPerToken() - userRewardPerTokenPaid[account]) / 1e18) + rewards[account];\\n    }\\n\\n    function _stake(address user, uint256 amount, bool migration)\\n        internal\\n        nonReentrant\\n        notPaused\\n        updateReward(user)\\n    {\\n        require(timeData.periodFinish != 0, \\\"Stake period not started yet\\\");\\n        require(amount != 0, \\\"Cannot stake 0\\\");\\n\\n        _totalSupply = _totalSupply + amount;\\n        _balances[user] = _balances[user] + amount;\\n\\n        if (migration) {\\n            // other contract will send tokens to us, this will save ~13K gas\\n        } else {\\n            // not using safe transfer, because we working with trusted tokens\\n            require(stakingToken.transferFrom(user, address(this), amount), \\\"token transfer failed\\\");\\n        }\\n\\n        emit Staked(user, amount);\\n    }\\n\\n    /// @param amount tokens to withdraw\\n    /// @param user address\\n    /// @param recipient address, where to send tokens, if we migrating token address can be zero\\n    function _withdraw(uint256 amount, address user, address recipient) internal nonReentrant updateReward(user) {\\n        require(amount != 0, \\\"Cannot withdraw 0\\\");\\n\\n        // not using safe math, because there is no way to overflow if stake tokens not overflow\\n        _totalSupply = _totalSupply - amount;\\n        _balances[user] = _balances[user] - amount;\\n        // not using safe transfer, because we working with trusted tokens\\n        require(stakingToken.transfer(recipient, amount), \\\"token transfer failed\\\");\\n\\n        emit Withdrawn(user, amount);\\n    }\\n\\n    /// @param user address\\n    /// @param recipient address, where to send reward\\n    function _getReward(address user, address recipient)\\n        internal\\n        virtual\\n        nonReentrant\\n        updateReward(user)\\n        returns (uint256 reward)\\n    {\\n        reward = rewards[user];\\n\\n        if (reward != 0) {\\n            rewards[user] = 0;\\n            OnDemandToken(address(rewardsToken)).mint(recipient, reward);\\n            emit RewardPaid(user, reward);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb79d2f6189126ca3c0f7b12b036c0a48ebd23d4869795c404e976b842afc642\",\"license\":\"MIT\"}},\"version\":1}","metadata":{"compiler":{"version":"0.7.5+commit.eb77ed08"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_rewardsDistribution","type":"address"},{"internalType":"address","name":"_stakingToken","type":"address"},{"internalType":"address","name":"_rewardsToken","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"type":"event","name":"FarmingFinished","anonymous":false},{"inputs":[{"internalType":"address","name":"previousOwner","type":"address","indexed":true},{"internalType":"address","name":"newOwner","type":"address","indexed":true}],"type":"event","name":"OwnershipTransferred","anonymous":false},{"inputs":[{"internalType":"bool","name":"isPaused","type":"bool","indexed":false}],"type":"event","name":"PauseChanged","anonymous":false},{"inputs":[{"internalType":"uint256","name":"reward","type":"uint256","indexed":false}],"type":"event","name":"RewardAdded","anonymous":false},{"inputs":[{"internalType":"address","name":"user","type":"address","indexed":true},{"internalType":"uint256","name":"reward","type":"uint256","indexed":false}],"type":"event","name":"RewardPaid","anonymous":false},{"inputs":[{"internalType":"uint256","name":"newDuration","type":"uint256","indexed":false}],"type":"event","name":"RewardsDurationUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"user","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"Staked","anonymous":false},{"inputs":[{"internalType":"address","name":"user","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"Withdrawn","anonymous":false},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"earned","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"exit"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"finishFarming"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"getReward"},{"inputs":[],"stateMutability":"view","type":"function","name":"getRewardForDuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"lastTimeRewardApplicable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"lastUpdateTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"maxEverTotalRewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_reward","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"notifyRewardAmount"},{"inputs":[],"stateMutability":"view","type":"function","name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"periodFinish","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"renounceOwnership"},{"inputs":[{"internalType":"contract ERC20","name":"_token","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"rescueToken"},{"inputs":[],"stateMutability":"view","type":"function","name":"rewardPerToken","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"rewardPerTokenStored","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"rewardRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function","name":"rewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"rewardsDistribution","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"rewardsDuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"rewardsToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}]},{"inputs":[{"internalType":"bool","name":"_paused","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setPaused"},{"inputs":[{"internalType":"address","name":"_rewardsDistribution","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setRewardsDistribution"},{"inputs":[{"internalType":"uint256","name":"_rewardsDuration","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setRewardsDuration"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"stake"},{"inputs":[],"stateMutability":"view","type":"function","name":"stakingToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"stopped","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"timeData","outputs":[{"internalType":"uint32","name":"periodFinish","type":"uint32"},{"internalType":"uint32","name":"rewardsDuration","type":"uint32"},{"internalType":"uint32","name":"lastUpdateTime","type":"uint32"},{"internalType":"uint96","name":"totalRewardsSupply","type":"uint96"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"transferOwnership"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function","name":"userRewardPerTokenPaid","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"pure","type":"function","name":"version","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"withdraw"}],"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setPaused(bool)":{"details":"Only the contract owner may call this."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{"setPaused(bool)":{"notice":"Change the paused state of the contract"}},"version":1}},"settings":{"remappings":["@openzeppelin/=src/@openzeppelin/","contracts/interfaces/=src/interfaces/","contracts/staking/=src/staking/","forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"src/staking/StakingRewards.sol":"StakingRewards"},"evmVersion":"istanbul","libraries":{}},"sources":{"src/@openzeppelin/contracts/access/Ownable.sol":{"keccak256":"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d","urls":[],"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n","license":"MIT"},"src/@openzeppelin/contracts/math/Math.sol":{"keccak256":"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c","urls":[],"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n","license":"MIT"},"src/@openzeppelin/contracts/math/SafeMath.sol":{"keccak256":"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52","urls":[],"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n","license":"MIT"},"src/@openzeppelin/contracts/token/ERC20/ERC20.sol":{"keccak256":"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3","urls":[],"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n","license":"MIT"},"src/@openzeppelin/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5","urls":[],"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n","license":"MIT"},"src/@openzeppelin/contracts/token/ERC20/SafeERC20.sol":{"keccak256":"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc","urls":[],"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n","license":"MIT"},"src/@openzeppelin/contracts/utils/Address.sol":{"keccak256":"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea","urls":[],"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n","license":"MIT"},"src/@openzeppelin/contracts/utils/Context.sol":{"keccak256":"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0","urls":[],"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n","license":"MIT"},"src/@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"keccak256":"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61","urls":[],"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n","license":"MIT"},"src/interfaces/IBurnableToken.sol":{"keccak256":"0x33bbcc3566e704136d99c527476a0bdbf7b1961a6d793b0d75fc022d0c0e596a","urls":[],"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\ninterface IBurnableToken {\n    function burn(uint256 _amount) external;\n}\n","license":"MIT"},"src/interfaces/IStakingRewards.sol":{"keccak256":"0x66350f7143ec0fb1faeeaad4c432bd082e6c1759867632f3c0579407c01688ca","urls":[],"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\n\ninterface IStakingRewards {\n    // Mutative\n    function stake(uint256 amount) external;\n\n    function withdraw(uint256 amount) external;\n\n    function getReward() external;\n\n    function exit() external;\n    // Views\n    function lastTimeRewardApplicable() external view returns (uint256);\n\n    function rewardPerToken() external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function getRewardForDuration() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n}\n","license":"MIT"},"src/interfaces/MintableToken.sol":{"keccak256":"0x0e9c51ac7314b39f2fd89ec6c193d5dc3c64024a2315126c6398dc882e8ff4b0","urls":[],"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport \"../interfaces/Owned.sol\";\nimport \"../interfaces/IBurnableToken.sol\";\n\n/// @author  umb.network\nabstract contract MintableToken is Owned, ERC20, IBurnableToken {\n    uint256 public immutable maxAllowedTotalSupply;\n    uint256 public everMinted;\n\n    modifier assertMaxSupply(uint256 _amountToMint) {\n        _assertMaxSupply(_amountToMint);\n        _;\n    }\n\n    // ========== CONSTRUCTOR ========== //\n\n    constructor (uint256 _maxAllowedTotalSupply) {\n        require(_maxAllowedTotalSupply != 0, \"_maxAllowedTotalSupply is empty\");\n\n        maxAllowedTotalSupply = _maxAllowedTotalSupply;\n    }\n\n    // ========== MUTATIVE FUNCTIONS ========== //\n\n    function burn(uint256 _amount) override external {\n        _burn(msg.sender, _amount);\n    }\n\n    // ========== RESTRICTED FUNCTIONS ========== //\n\n    function mint(address _holder, uint256 _amount)\n        virtual\n        external\n        onlyOwner()\n        assertMaxSupply(_amount)\n    {\n        require(_amount != 0, \"zero amount\");\n\n        _mint(_holder, _amount);\n    }\n\n    function _assertMaxSupply(uint256 _amountToMint) internal {\n        uint256 everMintedTotal = everMinted + _amountToMint;\n        everMinted = everMintedTotal;\n        require(everMintedTotal <= maxAllowedTotalSupply, \"total supply limit exceeded\");\n    }\n}\n","license":"MIT"},"src/interfaces/OnDemandToken.sol":{"keccak256":"0x483b7d064bed28f812ec9cf8887c053da6bc2b565f9c5b6bc4f8d1fddac1095b","urls":[],"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./MintableToken.sol\";\n\nabstract contract OnDemandToken is MintableToken {\n    bool constant public ON_DEMAND_TOKEN = true;\n\n    mapping (address => bool) public minters;\n\n    event SetupMinter(address minter, bool active);\n\n    modifier onlyOwnerOrMinter() {\n        address msgSender = _msgSender();\n        require(owner() == msgSender || minters[msgSender], \"access denied\");\n\n        _;\n    }\n\n    function setupMinter(address _minter, bool _active) external onlyOwner() {\n        minters[_minter] = _active;\n        emit SetupMinter(_minter, _active);\n    }\n\n    function setupMinters(address[] calldata _minters, bool[] calldata _actives) external onlyOwner() {\n        for (uint256 i; i < _minters.length; i++) {\n            minters[_minters[i]] = _actives[i];\n            emit SetupMinter(_minters[i], _actives[i]);\n        }\n    }\n\n    function mint(address _holder, uint256 _amount)\n        external\n        virtual\n        override\n        onlyOwnerOrMinter()\n        assertMaxSupply(_amount)\n    {\n        require(_amount != 0, \"zero amount\");\n\n        _mint(_holder, _amount);\n    }\n}\n","license":"MIT"},"src/interfaces/Owned.sol":{"keccak256":"0x8e08f3f5b90317a3d417bad3782998c67e20e3d0a91bd30d4a8435c26d93ce76","urls":[],"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nabstract contract Owned is Ownable {\n    constructor(address _owner) {\n        transferOwnership(_owner);\n    }\n}\n","license":"MIT"},"src/interfaces/Pausable.sol":{"keccak256":"0x08cac63de164d66c347bcaf3d935935d1545bfb963bba924a4bcbb5daaa721ec","urls":[],"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\n// Inheritance\nimport \"./Owned.sol\";\n\n\nabstract contract Pausable is Owned {\n    bool public paused;\n\n    event PauseChanged(bool isPaused);\n\n    modifier notPaused {\n        require(!paused, \"This action cannot be performed while the contract is paused\");\n        _;\n    }\n\n    constructor() {\n        // This contract is abstract, and thus cannot be instantiated directly\n        require(owner() != address(0), \"Owner must be set\");\n        // Paused will be false\n    }\n\n    /**\n     * @notice Change the paused state of the contract\n     * @dev Only the contract owner may call this.\n     */\n    function setPaused(bool _paused) external onlyOwner {\n        // Ensure we're actually changing the state before we do anything\n        if (_paused == paused) {\n            return;\n        }\n\n        // Set our paused state.\n        paused = _paused;\n\n        // Let everyone know that our pause state has changed.\n        emit PauseChanged(paused);\n    }\n}\n","license":"MIT"},"src/interfaces/RewardsDistributionRecipient.sol":{"keccak256":"0x0c3aae206cb3498514f9a1e5d401c62dcae37288f32fe171afff9dfb9e2f4ae8","urls":[],"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\n// Inheritance\nimport \"./Owned.sol\";\n\n\n// https://docs.synthetix.io/contracts/RewardsDistributionRecipient\nabstract contract RewardsDistributionRecipient is Owned {\n    address public rewardsDistribution;\n\n    modifier onlyRewardsDistribution() {\n        require(msg.sender == rewardsDistribution, \"Caller is not RewardsDistributor\");\n        _;\n    }\n\n    function notifyRewardAmount(uint256 reward) virtual external;\n\n    function setRewardsDistribution(address _rewardsDistribution) external onlyOwner {\n        rewardsDistribution = _rewardsDistribution;\n    }\n}\n","license":"MIT"},"src/staking/StakingRewards.sol":{"keccak256":"0xdb79d2f6189126ca3c0f7b12b036c0a48ebd23d4869795c404e976b842afc642","urls":[],"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n// Inheritance\nimport \"../interfaces/IStakingRewards.sol\";\nimport \"../interfaces/Pausable.sol\";\nimport \"../interfaces/RewardsDistributionRecipient.sol\";\nimport \"../interfaces/OnDemandToken.sol\";\nimport \"../interfaces/MintableToken.sol\";\n\n// based on synthetix\ncontract StakingRewards is IStakingRewards, RewardsDistributionRecipient, ReentrancyGuard, Pausable {\n    using SafeERC20 for IERC20;\n\n    struct Times {\n        uint32 periodFinish;\n        uint32 rewardsDuration;\n        uint32 lastUpdateTime;\n        uint96 totalRewardsSupply;\n    }\n\n    // ========== STATE VARIABLES ========== //\n\n    uint256 public immutable maxEverTotalRewards;\n\n    IERC20 public immutable rewardsToken;\n    IERC20 public immutable stakingToken;\n\n    uint256 public rewardRate = 0;\n    uint256 public rewardPerTokenStored;\n    \n    mapping(address => uint256) public userRewardPerTokenPaid;\n    mapping(address => uint256) public rewards;\n\n    uint256 private _totalSupply;\n    mapping(address => uint256) private _balances;\n\n    Times public timeData;\n    bool public stopped;\n\n    // ========== EVENTS ========== //\n\n    event RewardAdded(uint256 reward);\n    event Staked(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n    event RewardPaid(address indexed user, uint256 reward);\n    event RewardsDurationUpdated(uint256 newDuration);\n    event FarmingFinished();\n\n    // ========== MODIFIERS ========== //\n\n    modifier whenActive() {\n        require(!stopped, \"farming is stopped\");\n        _;\n    }\n\n    modifier updateReward(address account) virtual {\n        uint256 newRewardPerTokenStored = rewardPerToken();\n        rewardPerTokenStored = newRewardPerTokenStored;\n        timeData.lastUpdateTime = uint32(lastTimeRewardApplicable());\n\n        if (account != address(0)) {\n            rewards[account] = earned(account);\n            userRewardPerTokenPaid[account] = newRewardPerTokenStored;\n        }\n\n        _;\n    }\n\n    // ========== CONSTRUCTOR ========== //\n\n    constructor(\n        address _owner,\n        address _rewardsDistribution,\n        address _stakingToken,\n        address _rewardsToken\n    ) Owned(_owner) {\n        require(OnDemandToken(_rewardsToken).ON_DEMAND_TOKEN(), \"rewardsToken must be OnDemandToken\");\n\n        stakingToken = IERC20(_stakingToken);\n        rewardsToken = IERC20(_rewardsToken);\n        rewardsDistribution = _rewardsDistribution;\n\n        timeData.rewardsDuration = 2592000; // 30 days\n        maxEverTotalRewards = MintableToken(_rewardsToken).maxAllowedTotalSupply();\n    }\n\n    // ========== RESTRICTED FUNCTIONS ========== //\n\n    function notifyRewardAmount(\n        uint256 _reward\n    ) override virtual external whenActive onlyRewardsDistribution updateReward(address(0)) {\n        Times memory t = timeData;\n        uint256 newRewardRate;\n\n        if (block.timestamp >= t.periodFinish) {\n            newRewardRate = _reward / t.rewardsDuration;\n        } else {\n            uint256 remaining = t.periodFinish - block.timestamp;\n            uint256 leftover = remaining * rewardRate;\n            newRewardRate = (_reward + leftover) / t.rewardsDuration;\n        }\n\n        require(newRewardRate != 0, \"invalid rewardRate\");\n\n        rewardRate = newRewardRate;\n\n        // always increasing by _reward even if notification is in a middle of period\n        // because leftover is included\n        uint256 totalRewardsSupply = timeData.totalRewardsSupply + _reward;\n        require(totalRewardsSupply <= maxEverTotalRewards, \"rewards overflow\");\n\n        timeData.totalRewardsSupply = uint96(totalRewardsSupply);\n        timeData.lastUpdateTime = uint32(block.timestamp);\n        timeData.periodFinish = uint32(block.timestamp + t.rewardsDuration);\n\n        emit RewardAdded(_reward);\n    }\n\n    function setRewardsDuration(uint256 _rewardsDuration) external whenActive onlyOwner {\n        require(_rewardsDuration != 0, \"empty _rewardsDuration\");\n\n        require(\n            block.timestamp > timeData.periodFinish,\n            \"Previous period must be complete before changing the duration\"\n        );\n\n        timeData.rewardsDuration = uint32(_rewardsDuration);\n        emit RewardsDurationUpdated(_rewardsDuration);\n    }\n\n    // when farming was started with 1y and 12tokens\n    // and we want to finish after 4 months, we need to end up with situation\n    // like we were starting with 4mo and 4 tokens.\n    function finishFarming() virtual external whenActive onlyOwner {\n        Times memory t = timeData;\n        require(block.timestamp < t.periodFinish, \"can't stop if not started or already finished\");\n\n        stopped = true;\n\n        if (_totalSupply != 0) {\n            uint256 remaining = t.periodFinish - block.timestamp;\n            timeData.rewardsDuration = uint32(t.rewardsDuration - remaining);\n        }\n\n        timeData.periodFinish = uint32(block.timestamp);\n\n        emit FarmingFinished();\n    }\n\n    // ========== MUTATIVE FUNCTIONS ========== //\n\n    function exit() override external {\n        withdraw(_balances[msg.sender]);\n        getReward();\n    }\n\n    function stake(uint256 amount) override external {\n        _stake(msg.sender, amount, false);\n    }\n\n    function rescueToken(ERC20 _token, address _recipient, uint256 _amount) external onlyOwner() {\n        if (address(_token) == address(stakingToken)) {\n            require(_totalSupply <= stakingToken.balanceOf(address(this)) - _amount, \"amount is too big to rescue\");\n        } else if (address(_token) == address(rewardsToken)) {\n            revert(\"reward token can not be rescued\");\n        }\n\n        _token.transfer(_recipient, _amount);\n    }\n\n    function periodFinish() external view returns (uint256) {\n        return timeData.periodFinish;\n    }\n\n    function rewardsDuration() external view returns (uint256) {\n        return timeData.rewardsDuration;\n    }\n\n    function lastUpdateTime() external view returns (uint256) {\n        return timeData.lastUpdateTime;\n    }\n\n    function balanceOf(address account) override external view returns (uint256) {\n        return _balances[account];\n    }\n\n    function getRewardForDuration() override external view returns (uint256) {\n        return rewardRate * timeData.rewardsDuration;\n    }\n\n    function version() external pure virtual returns (uint256) {\n        return 1;\n    }\n\n    function withdraw(uint256 amount) override public {\n        _withdraw(amount, msg.sender, msg.sender);\n    }\n\n    function getReward() override public {\n        _getReward(msg.sender, msg.sender);\n    }\n\n    // ========== VIEWS ========== //\n\n    function totalSupply() override public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function lastTimeRewardApplicable() override public view returns (uint256) {\n        return Math.min(block.timestamp, timeData.periodFinish);\n    }\n\n    function rewardPerToken() override public view returns (uint256) {\n        if (_totalSupply == 0) {\n            return rewardPerTokenStored;\n        }\n\n        return rewardPerTokenStored + (\n            (lastTimeRewardApplicable() - timeData.lastUpdateTime) * rewardRate * 1e18 / _totalSupply\n        );\n    }\n\n    function earned(address account) override virtual public view returns (uint256) {\n        return (_balances[account] * (rewardPerToken() - userRewardPerTokenPaid[account]) / 1e18) + rewards[account];\n    }\n\n    function _stake(address user, uint256 amount, bool migration)\n        internal\n        nonReentrant\n        notPaused\n        updateReward(user)\n    {\n        require(timeData.periodFinish != 0, \"Stake period not started yet\");\n        require(amount != 0, \"Cannot stake 0\");\n\n        _totalSupply = _totalSupply + amount;\n        _balances[user] = _balances[user] + amount;\n\n        if (migration) {\n            // other contract will send tokens to us, this will save ~13K gas\n        } else {\n            // not using safe transfer, because we working with trusted tokens\n            require(stakingToken.transferFrom(user, address(this), amount), \"token transfer failed\");\n        }\n\n        emit Staked(user, amount);\n    }\n\n    /// @param amount tokens to withdraw\n    /// @param user address\n    /// @param recipient address, where to send tokens, if we migrating token address can be zero\n    function _withdraw(uint256 amount, address user, address recipient) internal nonReentrant updateReward(user) {\n        require(amount != 0, \"Cannot withdraw 0\");\n\n        // not using safe math, because there is no way to overflow if stake tokens not overflow\n        _totalSupply = _totalSupply - amount;\n        _balances[user] = _balances[user] - amount;\n        // not using safe transfer, because we working with trusted tokens\n        require(stakingToken.transfer(recipient, amount), \"token transfer failed\");\n\n        emit Withdrawn(user, amount);\n    }\n\n    /// @param user address\n    /// @param recipient address, where to send reward\n    function _getReward(address user, address recipient)\n        internal\n        virtual\n        nonReentrant\n        updateReward(user)\n        returns (uint256 reward)\n    {\n        reward = rewards[user];\n\n        if (reward != 0) {\n            rewards[user] = 0;\n            OnDemandToken(address(rewardsToken)).mint(recipient, reward);\n            emit RewardPaid(user, reward);\n        }\n    }\n}\n","license":"MIT"}},"version":1},"storageLayout":{"storage":[{"astId":7,"contract":"src/staking/StakingRewards.sol:StakingRewards","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":2069,"contract":"src/staking/StakingRewards.sol:StakingRewards","label":"rewardsDistribution","offset":0,"slot":"1","type":"t_address"},{"astId":1661,"contract":"src/staking/StakingRewards.sol:StakingRewards","label":"_status","offset":0,"slot":"2","type":"t_uint256"},{"astId":2009,"contract":"src/staking/StakingRewards.sol:StakingRewards","label":"paused","offset":0,"slot":"3","type":"t_bool"},{"astId":2139,"contract":"src/staking/StakingRewards.sol:StakingRewards","label":"rewardRate","offset":0,"slot":"4","type":"t_uint256"},{"astId":2141,"contract":"src/staking/StakingRewards.sol:StakingRewards","label":"rewardPerTokenStored","offset":0,"slot":"5","type":"t_uint256"},{"astId":2145,"contract":"src/staking/StakingRewards.sol:StakingRewards","label":"userRewardPerTokenPaid","offset":0,"slot":"6","type":"t_mapping(t_address,t_uint256)"},{"astId":2149,"contract":"src/staking/StakingRewards.sol:StakingRewards","label":"rewards","offset":0,"slot":"7","type":"t_mapping(t_address,t_uint256)"},{"astId":2151,"contract":"src/staking/StakingRewards.sol:StakingRewards","label":"_totalSupply","offset":0,"slot":"8","type":"t_uint256"},{"astId":2155,"contract":"src/staking/StakingRewards.sol:StakingRewards","label":"_balances","offset":0,"slot":"9","type":"t_mapping(t_address,t_uint256)"},{"astId":2157,"contract":"src/staking/StakingRewards.sol:StakingRewards","label":"timeData","offset":0,"slot":"10","type":"t_struct(Times)2130_storage"},{"astId":2159,"contract":"src/staking/StakingRewards.sol:StakingRewards","label":"stopped","offset":0,"slot":"11","type":"t_bool"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(Times)2130_storage":{"encoding":"inplace","label":"struct StakingRewards.Times","numberOfBytes":"32","members":[{"astId":2123,"contract":"src/staking/StakingRewards.sol:StakingRewards","label":"periodFinish","offset":0,"slot":"0","type":"t_uint32"},{"astId":2125,"contract":"src/staking/StakingRewards.sol:StakingRewards","label":"rewardsDuration","offset":4,"slot":"0","type":"t_uint32"},{"astId":2127,"contract":"src/staking/StakingRewards.sol:StakingRewards","label":"lastUpdateTime","offset":8,"slot":"0","type":"t_uint32"},{"astId":2129,"contract":"src/staking/StakingRewards.sol:StakingRewards","label":"totalRewardsSupply","offset":12,"slot":"0","type":"t_uint96"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"},"t_uint96":{"encoding":"inplace","label":"uint96","numberOfBytes":"12"}}},"id":16}