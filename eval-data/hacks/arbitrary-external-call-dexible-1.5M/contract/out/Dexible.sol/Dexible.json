{"abi":[{"type":"receive","stateMutability":"payable"},{"type":"function","name":"addRelays","inputs":[{"name":"relays","type":"address[]","internalType":"address[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"adminMultiSig","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"arbitrumGasOracle","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"communityVault","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"configure","inputs":[{"name":"config","type":"tuple","internalType":"struct DexibleStorage.DexibleConfig","components":[{"name":"revshareSplitRatio","type":"uint8","internalType":"uint8"},{"name":"stdBpsRate","type":"uint16","internalType":"uint16"},{"name":"minBpsRate","type":"uint16","internalType":"uint16"},{"name":"adminMultiSig","type":"address","internalType":"address"},{"name":"communityVault","type":"address","internalType":"address"},{"name":"treasury","type":"address","internalType":"address"},{"name":"dxblToken","type":"address","internalType":"address"},{"name":"arbGasOracle","type":"address","internalType":"address"},{"name":"stdGasAdjustment","type":"address","internalType":"address"},{"name":"minFeeUSD","type":"uint112","internalType":"uint112"},{"name":"initialRelays","type":"address[]","internalType":"address[]"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"dxblToken","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"fill","inputs":[{"name":"request","type":"tuple","internalType":"struct SwapTypes.SwapRequest","components":[{"name":"executionRequest","type":"tuple","internalType":"struct ExecutionTypes.ExecutionRequest","components":[{"name":"requester","type":"address","internalType":"address"},{"name":"fee","type":"tuple","internalType":"struct ExecutionTypes.FeeDetails","components":[{"name":"feeToken","type":"address","internalType":"contract IERC20"},{"name":"affiliate","type":"address","internalType":"address"},{"name":"affiliatePortion","type":"uint256","internalType":"uint256"}]}]},{"name":"tokenIn","type":"tuple","internalType":"struct TokenTypes.TokenAmount","components":[{"name":"amount","type":"uint112","internalType":"uint112"},{"name":"token","type":"address","internalType":"contract IERC20"}]},{"name":"tokenOut","type":"tuple","internalType":"struct TokenTypes.TokenAmount","components":[{"name":"amount","type":"uint112","internalType":"uint112"},{"name":"token","type":"address","internalType":"contract IERC20"}]},{"name":"routes","type":"tuple[]","internalType":"struct SwapTypes.RouterRequest[]","components":[{"name":"router","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"},{"name":"routeAmount","type":"tuple","internalType":"struct TokenTypes.TokenAmount","components":[{"name":"amount","type":"uint112","internalType":"uint112"},{"name":"token","type":"address","internalType":"contract IERC20"}]},{"name":"routerData","type":"bytes","internalType":"bytes"}]}]},{"name":"meta","type":"tuple","internalType":"struct SwapHandler.SwapMeta","components":[{"name":"feeIsInput","type":"bool","internalType":"bool"},{"name":"isSelfSwap","type":"bool","internalType":"bool"},{"name":"preSwapVault","type":"address","internalType":"address"},{"name":"startGas","type":"uint256","internalType":"uint256"},{"name":"toProtocol","type":"uint256","internalType":"uint256"},{"name":"toRevshare","type":"uint256","internalType":"uint256"},{"name":"outToTrader","type":"uint256","internalType":"uint256"},{"name":"outAmount","type":"uint256","internalType":"uint256"},{"name":"bpsAmount","type":"uint256","internalType":"uint256"},{"name":"gasAmount","type":"uint256","internalType":"uint256"},{"name":"nativeGasAmount","type":"uint256","internalType":"uint256"},{"name":"preDXBLBalance","type":"uint256","internalType":"uint256"},{"name":"inputAmountDue","type":"uint256","internalType":"uint256"}]}],"outputs":[{"name":"","type":"tuple","internalType":"struct SwapHandler.SwapMeta","components":[{"name":"feeIsInput","type":"bool","internalType":"bool"},{"name":"isSelfSwap","type":"bool","internalType":"bool"},{"name":"preSwapVault","type":"address","internalType":"address"},{"name":"startGas","type":"uint256","internalType":"uint256"},{"name":"toProtocol","type":"uint256","internalType":"uint256"},{"name":"toRevshare","type":"uint256","internalType":"uint256"},{"name":"outToTrader","type":"uint256","internalType":"uint256"},{"name":"outAmount","type":"uint256","internalType":"uint256"},{"name":"bpsAmount","type":"uint256","internalType":"uint256"},{"name":"gasAmount","type":"uint256","internalType":"uint256"},{"name":"nativeGasAmount","type":"uint256","internalType":"uint256"},{"name":"preDXBLBalance","type":"uint256","internalType":"uint256"},{"name":"inputAmountDue","type":"uint256","internalType":"uint256"}]}],"stateMutability":"nonpayable"},{"type":"function","name":"initialize","inputs":[{"name":"config","type":"tuple","internalType":"struct DexibleStorage.DexibleConfig","components":[{"name":"revshareSplitRatio","type":"uint8","internalType":"uint8"},{"name":"stdBpsRate","type":"uint16","internalType":"uint16"},{"name":"minBpsRate","type":"uint16","internalType":"uint16"},{"name":"adminMultiSig","type":"address","internalType":"address"},{"name":"communityVault","type":"address","internalType":"address"},{"name":"treasury","type":"address","internalType":"address"},{"name":"dxblToken","type":"address","internalType":"address"},{"name":"arbGasOracle","type":"address","internalType":"address"},{"name":"stdGasAdjustment","type":"address","internalType":"address"},{"name":"minFeeUSD","type":"uint112","internalType":"uint112"},{"name":"initialRelays","type":"address[]","internalType":"address[]"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"minBpsRate","inputs":[],"outputs":[{"name":"","type":"uint16","internalType":"uint16"}],"stateMutability":"view"},{"type":"function","name":"minFeeUSD","inputs":[],"outputs":[{"name":"","type":"uint112","internalType":"uint112"}],"stateMutability":"view"},{"type":"function","name":"pause","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"removeRelay","inputs":[{"name":"relay","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"resume","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"revshareSplitRatio","inputs":[],"outputs":[{"name":"","type":"uint8","internalType":"uint8"}],"stateMutability":"view"},{"type":"function","name":"selfSwap","inputs":[{"name":"request","type":"tuple","internalType":"struct SwapTypes.SelfSwap","components":[{"name":"feeToken","type":"address","internalType":"contract IERC20"},{"name":"tokenIn","type":"tuple","internalType":"struct TokenTypes.TokenAmount","components":[{"name":"amount","type":"uint112","internalType":"uint112"},{"name":"token","type":"address","internalType":"contract IERC20"}]},{"name":"tokenOut","type":"tuple","internalType":"struct TokenTypes.TokenAmount","components":[{"name":"amount","type":"uint112","internalType":"uint112"},{"name":"token","type":"address","internalType":"contract IERC20"}]},{"name":"routes","type":"tuple[]","internalType":"struct SwapTypes.RouterRequest[]","components":[{"name":"router","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"},{"name":"routeAmount","type":"tuple","internalType":"struct TokenTypes.TokenAmount","components":[{"name":"amount","type":"uint112","internalType":"uint112"},{"name":"token","type":"address","internalType":"contract IERC20"}]},{"name":"routerData","type":"bytes","internalType":"bytes"}]}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setArbitrumGasOracle","inputs":[{"name":"oracle","type":"address","internalType":"contract IArbitrumGasOracle"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setCommunityVault","inputs":[{"name":"vault","type":"address","internalType":"contract ICommunityVault"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setMinBpsRate","inputs":[{"name":"bps","type":"uint16","internalType":"uint16"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setMinFeeUSD","inputs":[{"name":"minFee","type":"uint112","internalType":"uint112"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setRevshareSplitRatio","inputs":[{"name":"bps","type":"uint8","internalType":"uint8"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setStdBpsRate","inputs":[{"name":"bps","type":"uint16","internalType":"uint16"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setStdGasAdjustmentContract","inputs":[{"name":"con","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setTreasury","inputs":[{"name":"t","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"stdBpsRate","inputs":[],"outputs":[{"name":"","type":"uint16","internalType":"uint16"}],"stateMutability":"view"},{"type":"function","name":"stdGasAdjustmentContract","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"swap","inputs":[{"name":"request","type":"tuple","internalType":"struct SwapTypes.SwapRequest","components":[{"name":"executionRequest","type":"tuple","internalType":"struct ExecutionTypes.ExecutionRequest","components":[{"name":"requester","type":"address","internalType":"address"},{"name":"fee","type":"tuple","internalType":"struct ExecutionTypes.FeeDetails","components":[{"name":"feeToken","type":"address","internalType":"contract IERC20"},{"name":"affiliate","type":"address","internalType":"address"},{"name":"affiliatePortion","type":"uint256","internalType":"uint256"}]}]},{"name":"tokenIn","type":"tuple","internalType":"struct TokenTypes.TokenAmount","components":[{"name":"amount","type":"uint112","internalType":"uint112"},{"name":"token","type":"address","internalType":"contract IERC20"}]},{"name":"tokenOut","type":"tuple","internalType":"struct TokenTypes.TokenAmount","components":[{"name":"amount","type":"uint112","internalType":"uint112"},{"name":"token","type":"address","internalType":"contract IERC20"}]},{"name":"routes","type":"tuple[]","internalType":"struct SwapTypes.RouterRequest[]","components":[{"name":"router","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"},{"name":"routeAmount","type":"tuple","internalType":"struct TokenTypes.TokenAmount","components":[{"name":"amount","type":"uint112","internalType":"uint112"},{"name":"token","type":"address","internalType":"contract IERC20"}]},{"name":"routerData","type":"bytes","internalType":"bytes"}]}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"treasury","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"withdraw","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"AffiliatePaid","inputs":[{"name":"affiliate","type":"address","indexed":true,"internalType":"address"},{"name":"token","type":"address","indexed":false,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ArbGasOracleChanged","inputs":[{"name":"newVault","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ChangedBpsRates","inputs":[{"name":"stdRate","type":"uint32","indexed":false,"internalType":"uint32"},{"name":"minRate","type":"uint32","indexed":false,"internalType":"uint32"}],"anonymous":false},{"type":"event","name":"ChangedRevshareSplit","inputs":[{"name":"split","type":"uint8","indexed":false,"internalType":"uint8"}],"anonymous":false},{"type":"event","name":"ChangedRevshareVault","inputs":[{"name":"old","type":"address","indexed":true,"internalType":"address"},{"name":"newRevshare","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ConfigChanged","inputs":[{"name":"config","type":"tuple","indexed":false,"internalType":"struct DexibleStorage.DexibleConfig","components":[{"name":"revshareSplitRatio","type":"uint8","internalType":"uint8"},{"name":"stdBpsRate","type":"uint16","internalType":"uint16"},{"name":"minBpsRate","type":"uint16","internalType":"uint16"},{"name":"adminMultiSig","type":"address","internalType":"address"},{"name":"communityVault","type":"address","internalType":"address"},{"name":"treasury","type":"address","internalType":"address"},{"name":"dxblToken","type":"address","internalType":"address"},{"name":"arbGasOracle","type":"address","internalType":"address"},{"name":"stdGasAdjustment","type":"address","internalType":"address"},{"name":"minFeeUSD","type":"uint112","internalType":"uint112"},{"name":"initialRelays","type":"address[]","internalType":"address[]"}]}],"anonymous":false},{"type":"event","name":"InsufficientGasFunds","inputs":[{"name":"relay","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"MinBpsChanged","inputs":[{"name":"newRate","type":"uint16","indexed":false,"internalType":"uint16"}],"anonymous":false},{"type":"event","name":"MinFeeChanged","inputs":[{"name":"newMin","type":"uint112","indexed":false,"internalType":"uint112"}],"anonymous":false},{"type":"event","name":"PaidGasFunds","inputs":[{"name":"relay","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Paused","inputs":[],"anonymous":false},{"type":"event","name":"ReceivedFunds","inputs":[{"name":"from","type":"address","indexed":false,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"RelayAdded","inputs":[{"name":"relay","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"RelayRemoved","inputs":[{"name":"relay","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Resumed","inputs":[],"anonymous":false},{"type":"event","name":"SplitRatioChanged","inputs":[{"name":"newRate","type":"uint8","indexed":false,"internalType":"uint8"}],"anonymous":false},{"type":"event","name":"StdBpsChanged","inputs":[{"name":"newRate","type":"uint16","indexed":false,"internalType":"uint16"}],"anonymous":false},{"type":"event","name":"StdGasAdjustmentChanged","inputs":[{"name":"newContract","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"SwapFailed","inputs":[{"name":"trader","type":"address","indexed":true,"internalType":"address"},{"name":"feeToken","type":"address","indexed":false,"internalType":"address"},{"name":"gasFeePaid","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"SwapSuccess","inputs":[{"name":"trader","type":"address","indexed":true,"internalType":"address"},{"name":"affiliate","type":"address","indexed":true,"internalType":"address"},{"name":"inputAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"outputAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"feeToken","type":"address","indexed":false,"internalType":"address"},{"name":"gasFee","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"affiliateFee","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"dexibleFee","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"TreasuryChanged","inputs":[{"name":"newTreasury","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"VaultChanged","inputs":[{"name":"newVault","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"WithdrewETH","inputs":[{"name":"admin","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x608060405234801561001057600080fd5b5061482b806100206000396000f3fe60806040526004361061017b5760003560e01c806376a13636116100cc578063cd151e9a1161007a578063cd151e9a14610454578063d8544cf314610474578063dd81eb9814610494578063e287aec7146104a9578063ec71a08c146104be578063f0f44260146104de578063f3390c3a146104fe57600080fd5b806376a1363614610395578063805ecef8146103aa5780638456cb59146103ca5780638c47ea8e146103df578063b024d616146103ff578063bb4712341461041f578063c3d718a41461043457600080fd5b806345c6a8741161012957806345c6a874146102b55780634e0bb8cc146102d757806352ac86161461030457806353e978681461032b5780635d745b8f14610340578063602dd0261461036057806361d027b31461038057600080fd5b8063046f7da2146101c05780631725d82f146101d757806324b40c92146101f75780632e1a7d4d146102175780633564209b14610237578063370fb45b1461026d57806340d925b11461029557600080fd5b366101bb577f5741979df5f3e491501da74d3b0a83dd2496ab1f34929865b3e190a8ad75859a33346040516101b192919061352e565b60405180910390a1005b600080fd5b3480156101cc57600080fd5b506101d561051e565b005b3480156101e357600080fd5b506101d56101f2366004613566565b61059e565b34801561020357600080fd5b506101d5610212366004613595565b610626565b34801561022357600080fd5b506101d56102323660046135b0565b6106ae565b34801561024357600080fd5b506102576102523660046136f0565b610776565b604051610264919061388a565b60405180910390f35b34801561027957600080fd5b50610282610bb9565b60405161ffff9091168152602001610264565b3480156102a157600080fd5b506101d56102b0366004613899565b610bd4565b3480156102c157600080fd5b506102ca610ce8565b604051610264919061390d565b3480156102e357600080fd5b506102ec610d04565b6040516001600160701b039091168152602001610264565b34801561031057600080fd5b50610319610d24565b60405160ff9091168152602001610264565b34801561033757600080fd5b506102ca610d3c565b34801561034c57600080fd5b506101d561035b366004613595565b610d58565b34801561036c57600080fd5b506101d561037b366004613921565b610ddd565b34801561038c57600080fd5b506102ca610fdb565b3480156103a157600080fd5b506102ca610ff7565b3480156103b657600080fd5b506101d56103c5366004613955565b611013565b3480156103d657600080fd5b506101d56110f1565b3480156103eb57600080fd5b506101d56103fa366004613989565b611168565b34801561040b57600080fd5b506101d561041a3660046139a4565b6111f9565b34801561042b57600080fd5b5061028261182e565b34801561044057600080fd5b506101d561044f3660046139df565b611848565b34801561046057600080fd5b506101d561046f366004613955565b611a14565b34801561048057600080fd5b506101d561048f366004613955565b611aa6565b3480156104a057600080fd5b506102ca611b6f565b3480156104b557600080fd5b506102ca611b8b565b3480156104ca57600080fd5b506101d56104d93660046139a4565b611ba7565b3480156104ea57600080fd5b506101d56104f9366004613955565b611bb3565b34801561050a57600080fd5b506101d5610519366004613955565b611c40565b610526611ccd565b600301546001600160a01b0316331461055a5760405162461bcd60e51b815260040161055190613a19565b60405180910390fd5b6000610564611ccd565b805460ff19169115159190911790556040517f62451d457bc659158be6e6247f56ec1df424a5c7597f71c20c2bc44e0965c8f990600090a1565b6105a6611ccd565b600301546001600160a01b031633146105d15760405162461bcd60e51b815260040161055190613a19565b806105da611ccd565b805461ff00191661010060ff9384160217905560405190821681527fc08e3d70cd07fcbefc6065b4c1de14af045aef558d499e3d132d6b9aa13fdc4c906020015b60405180910390a150565b61062e611ccd565b600301546001600160a01b031633146106595760405162461bcd60e51b815260040161055190613a19565b80610662611ccd565b805465ffff000000001916600160201b61ffff9384160217905560405190821681527f0cc243ac5a88993148aefaa9f320f7d51555727982cb97b5502e4de3a296ff509060200161061b565b6106b6611ccd565b600301546001600160a01b031633146106e15760405162461bcd60e51b815260040161055190613a19565b6040513390819083156108fc029084906000818181858888f1935050505061073d5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610551565b60405182815233907faa21a47bc8f0df1a253be34a945b1d0a8f458e4da029c0ab59c1fee1e488c0669060200160405180910390a25050565b6107ee604051806101a0016040528060001515815260200160001515815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b33301461083d5760405162461bcd60e51b815260206004820152601d60248201527f4f6e6c7920616c6c6f77656420617320696e7465726e616c2063616c6c0000006044820152606401610551565b6108478383611cf1565b610858610100840160e08501613955565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610883919061390d565b602060405180830381865afa1580156108a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c49190613a3f565b60e083015260005b6108da610100850185613a58565b9050811015610a2c57366108f2610100860186613a58565b8381811061090257610902613aa8565b90506020028101906109149190613abe565b90506109626109296040830160208401613955565b6109396060840160408501613989565b6001600160701b03166109526080850160608601613955565b6001600160a01b03169190611fab565b60006109716020830183613955565b6001600160a01b03166109876080840184613ade565b604051610995929190613b24565b6000604051808303816000865af19150503d80600081146109d2576040519150601f19603f3d011682016040523d82523d6000602084013e6109d7565b606091505b5050905080610a195760405162461bcd60e51b815260206004820152600e60248201526d04661696c656420746f20737761760941b6044820152606401610551565b505080610a2590613b4a565b90506108cc565b506000610a40610100850160e08601613955565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610a6b919061390d565b602060405180830381865afa158015610a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aac9190613a3f565b9050808360e001511015610ad35760e0830151610ac99082613b63565b60e0840152610adb565b600060e08401525b604080518082019091526008815267115e1c1958dd195960c21b6020820152610b4290610b0e60e0870160c08801613989565b6001600160701b031660405180604001604052806008815260200167149958d95a5d995960c21b8152508660e001516120e6565b610b5260e0850160c08601613989565b6001600160701b03168360e001511015610bae5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206f75747075742067656e6572617465640000006044820152606401610551565b829150505b92915050565b6000610bc3611ccd565b54600160201b900461ffff16919050565b610bdc611ccd565b600301546001600160a01b03163314610c075760405162461bcd60e51b815260040161055190613a19565b6000610c11611ccd565b905060005b82811015610ce2576001826007016000868685818110610c3857610c38613aa8565b9050602002016020810190610c4d9190613955565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790557f6e5d136f0d49e354d8ec938c011b6f6a8838e033fd8a740421ee9f914bad24c3848483818110610ca857610ca8613aa8565b9050602002016020810190610cbd9190613955565b604051610cca919061390d565b60405180910390a1610cdb81613b4a565b9050610c16565b50505050565b6000610cf2611ccd565b600301546001600160a01b0316919050565b6000610d0e611ccd565b54600160301b90046001600160701b0316919050565b6000610d2e611ccd565b54610100900460ff16919050565b6000610d46611ccd565b600101546001600160a01b0316919050565b610d60611ccd565b600301546001600160a01b03163314610d8b5760405162461bcd60e51b815260040161055190613a19565b80610d94611ccd565b805463ffff000019166201000061ffff9384160217905560405190821681527f3c690423f2b4874693fa467d54b9a22ce2469d86d3ea9a48aabb8479ee5fde9d9060200161061b565b6000610de7611ccd565b33600090815260078201602052604090205490915060ff16610e4b5760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c792072656c617920616c6c6f77656420746f2063616c6c0000000000006044820152606401610551565b610e53611ccd565b5460ff1615610e745760405162461bcd60e51b815260040161055190613b76565b60005a604080516101a081018252600080825260208201819052929350908101610e9c611ccd565b60010160009054906101000a90046001600160a01b03166001600160a01b031681526020018381526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090506000306001600160a01b0316633564209b620138805a610f269190613b63565b87856040518463ffffffff1660e01b8152600401610f45929190613d4a565b6101a06040518083038160008887f193505050508015610f82575060408051601f3d908101601f19168201909252610f7f91810190613e1b565b60015b610fba57610fb26040518060400160405280600b81526020016a14ddd85c0819985a5b195960aa1b81525061212f565b506000610fc1565b9150600190505b610fd4610fcd86614071565b8383612172565b5050505050565b6000610fe5611ccd565b600201546001600160a01b0316919050565b6000611001611ccd565b600501546001600160a01b0316919050565b61101b611ccd565b600301546001600160a01b031633146110465760405162461bcd60e51b815260040161055190613a19565b6001600160a01b0381166110975760405162461bcd60e51b8152602060048201526018602482015277496e76616c696420636f6e7472616374206164647265737360401b6044820152606401610551565b806110a0611ccd565b60060180546001600160a01b0319166001600160a01b03929092169190911790556040517f7c5e06ac32af28fcb1cef744c62ae47a0d95cbdbd806942cf2232ee81e4cff9d9061061b90839061390d565b6110f9611ccd565b600301546001600160a01b031633146111245760405162461bcd60e51b815260040161055190613a19565b600161112e611ccd565b805460ff19169115159190911790556040517f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75290600090a1565b611170611ccd565b600301546001600160a01b0316331461119b5760405162461bcd60e51b815260040161055190613a19565b806111a4611ccd565b8054600160301b600160a01b031916600160301b6001600160701b039384160217905560405190821681527f835b0e394b56439e2901706b3c67fcb1abcd7219c10b4010eb396ab636218ffc9060200161061b565b6000611203611ccd565b60038101549091506001600160a01b0316156112455760038101546001600160a01b031633146112455760405162461bcd60e51b815260040161055190613a19565b600061125760a0840160808501613955565b6001600160a01b0316036112ad5760405162461bcd60e51b815260206004820152601e60248201527f496e76616c696420436f6d6d756e6974795661756c74206164647265737300006044820152606401610551565b60006112bf60c0840160a08501613955565b6001600160a01b0316036113085760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420747265617375727960801b6044820152606401610551565b600061131a60e0840160c08501613955565b6001600160a01b0316036113705760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964204458424c20746f6b656e20616464726573730000000000006044820152606401610551565b600061137f6020840184613566565b60ff16116113cf5760405162461bcd60e51b815260206004820152601c60248201527f496e76616c69642072657673686172652073706c697420726174696f000000006044820152606401610551565b60006113e16040840160208501613595565b61ffff161161143e5760405162461bcd60e51b8152602060048201526024808201527f4d7573742070726f766964652061207374616e646172642062707320666565206044820152637261746560e01b6064820152608401610551565b60006114506060840160408501613595565b61ffff161161149a5760405162461bcd60e51b81526020600482015260166024820152751b5a5b909c1cd4985d19481a5cc81c995c5d5a5c995960521b6044820152606401610551565b6114aa6040830160208401613595565b61ffff166114be6060840160408501613595565b61ffff161061151a5760405162461bcd60e51b815260206004820152602260248201527f4d696e206270732072617465206d757374206265206c657373207468616e20736044820152611d1960f21b6064820152608401610551565b600061152e61012084016101008501613955565b6001600160a01b0316036115845760405162461bcd60e51b815260206004820181905260248201527f496e76616c69642073746447617341646a7573746d656e7420616464726573736044820152606401610551565b6115946080830160608401613955565b6003820180546001600160a01b0319166001600160a01b03929092169190911790556115c36020830183613566565b815460ff919091166101000261ff00199091161781556115e960a0830160808401613955565b6001820180546001600160a01b0319166001600160a01b039290921691909117905561161b60c0830160a08401613955565b6002820180546001600160a01b0319166001600160a01b039290921691909117905561164d60e0830160c08401613955565b6004820180546001600160a01b0319166001600160a01b039290921691909117905561167f6040830160208401613595565b815461ffff91909116620100000263ffff0000199091161781556116a96060830160408401613595565b815461ffff91909116600160201b0265ffff00000000199091161781556116d861014083016101208401613989565b81546001600160701b0391909116600160301b02600160301b600160a01b031990911617815561170f610100830160e08401613955565b6005820180546001600160a01b0319166001600160a01b039290921691909117905561174361012083016101008401613955565b6006820180546001600160a01b0319166001600160a01b039290921691909117905560005b611776610140840184613a58565b90508110156117f2576001600783016000611795610140870187613a58565b858181106117a5576117a5613aa8565b90506020020160208101906117ba9190613955565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790556117eb81613b4a565b9050611768565b507f512abcac106cff38b137525ac01b49274efb0f265cf8e8e76ac46dfbec8e77388260405161182291906141a6565b60405180910390a15050565b6000611838611ccd565b5462010000900461ffff16919050565b611850611ccd565b5460ff16156118715760405162461bcd60e51b815260040161055190613b76565b6040805160c081018252336080820190815282516060810190935260009282919060a0830190806118a56020890189613955565b6001600160a01b0316815260200160006001600160a01b0316815260200160008152508152508152602001836020018036038101906118e491906142e5565b81526020016118fb368590038501606086016142e5565b815260200161190d60a0850185613a58565b61191691614301565b9052604080516101a08101825260008082526001602083015292935090810161193d611ccd565b600101546001600160a01b031681526000602082018190526040808301829052606083018290526080830182905260a0830182905260c0830182905260e08301829052610100830182905261012083018290526101409092015251633564209b60e01b81529091503090633564209b906119bd9085908590600401614409565b6101a0604051808303816000875af11580156119dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a019190613e1b565b9050611a0f82826001612172565b505050565b611a1c611ccd565b600301546001600160a01b03163314611a475760405162461bcd60e51b815260040161055190613a19565b6000611a51611ccd565b6001600160a01b038316600090815260078201602052604090819020805460ff19169055519091507f38dc67ab9b9813fcdcb7c44191cecd71547e9ab9b1939493cdd6a903965d5ffa9061182290849061390d565b611aae611ccd565b600101546001600160a01b03163314611b155760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79207661756c742063616e206578656375746520746869732066756e636044820152633a34b7b760e11b6064820152608401610551565b80611b1e611ccd565b60010180546001600160a01b0319166001600160a01b03929092169190911790556040517fa49691f0dd6477ccef49962612a236d252e3a31c3be8b61fa6abeff3e74a75729061061b90839061390d565b6000611b79611ccd565b600401546001600160a01b0316919050565b6000611b95611ccd565b600601546001600160a01b0316919050565b611bb0816111f9565b50565b611bbb611ccd565b600301546001600160a01b03163314611be65760405162461bcd60e51b815260040161055190613a19565b80611bef611ccd565b60020180546001600160a01b0319166001600160a01b03929092169190911790556040517fc714d22a2f08b695f81e7c707058db484aa5b4d6b4c9fd64beb10fe85832f6089061061b90839061390d565b611c48611ccd565b600301546001600160a01b03163314611c735760405162461bcd60e51b815260040161055190613a19565b80611c7c611ccd565b60050180546001600160a01b0319166001600160a01b03929092169190911790556040517fa6185880f040ba1584f7e109a3be5b1c01a3d3855eb518cc0ff6f12b5ba5e70b9061061b90839061390d565b7f949817a987a8e038ef345d3c9d4fd28e49d8e4e09456e57c05a8b2ce2e62866c90565b6000611d036040840160208501613955565b90506000611d0f611ccd565b6001810154604051630ba408e360e31b81529192506001600160a01b031690635d20471890611d4290859060040161390d565b602060405180830381865afa158015611d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8391906144a3565b611dca5760405162461bcd60e51b8152602060048201526018602482015277119959481d1bdad95b881a5cc81b9bdd08185b1b1bddd95960421b6044820152606401610551565b611dda60c0850160a08601613955565b6001600160a01b0316826001600160a01b03161480611e1a5750611e05610100850160e08601613955565b6001600160a01b0316826001600160a01b0316145b611e765760405162461bcd60e51b815260206004820152602760248201527f46656520746f6b656e206d75737420626520696e707574206f72206f757470756044820152663a103a37b5b2b760c91b6064820152608401610551565b60048101546001600160a01b03166370a08231611e966020870187613955565b6040518263ffffffff1660e01b8152600401611eb2919061390d565b602060405180830381865afa158015611ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef39190613a3f565b610160840152611f096040850160208601613955565b6001600160a01b0316611f2260c0860160a08701613955565b6001600160a01b0316148352610ce2611f3e6020860186613955565b30611f4d610100880188613a58565b6000818110611f5e57611f5e613aa8565b9050602002810190611f709190613abe565b611f81906060810190604001613989565b6001600160701b0316611f9a60c0890160a08a01613955565b6001600160a01b031692919061219f565b8015806120255750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611fff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120239190613a3f565b155b6120905760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610551565b611a0f8363095ea7b360e01b84846040516024016120af92919061352e565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526121c0565b610ce28484848460405160240161210094939291906144c0565b60408051601f198184030181529190526020810180516001600160e01b031663c67ea9d160e01b179052612292565b611bb08160405160240161214391906144fd565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052612292565b80156121875761218283836122b3565b612191565b61219183836122d4565b611a0f826101400151612424565b610ce2846323b872dd60e01b8585856040516024016120af93929190614510565b6000612215826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166124d09092919063ffffffff16565b805190915015611a0f578080602001905181019061223391906144a3565b611a0f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610551565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6122c68282600001518360e001516124e9565b6122d0828261258d565b5050565b60006122de611ccd565b905060008260000151156123cf5760005a84606001510390506123196040518060600160405280602981526020016147cd60299139826125a1565b6123248160006125e6565b6101408501819052600184015486516020015151604051633931f45d60e01b81526001600160a01b039092169350633931f45d926123649260040161352e565b602060405180830381865afa158015612381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a59190613a3f565b845180516002850154602090920151519293506123cf926001600160a01b0390811692168461219f565b83518051602090910151516040516001600160a01b03909216917f6930176329c33f663176f0f242132119497db425bb44d32f9ffef8683d10b0c09161241691859061352e565b60405180910390a250505050565b8060000361242f5750565b804710156124705760405181815233907f4c0d6a438f19dfe41befe161c0bfdfca9f674028133bbaf37749b2d12f8f0dda906020015b60405180910390a250565b604051339082156108fc029083906000818181858888f1935050505015801561249d573d6000803e3d6000fd5b5060405181815233907f91d09af90b128f3fb2907042440a531bca49791232cd8f59e1c629d96247d05790602001612465565b60606124df84846000856127f2565b90505b9392505050565b60006124f3611ccd565b90506000831561251257506020840151516001600160701b0316612515565b50815b600182015485518051602090910151516040516302ac425360e61b81526001600160a01b039093169263ab1094c0926125549290918690600401614510565b600060405180830381600087803b15801561256e57600080fd5b505af1158015612582573d6000803e3d6000fd5b505050505050505050565b61259782826128cf565b6122d08282612ae1565b6122d082826040516024016125b7929190614534565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052612292565b6000806125f1611ccd565b60068101549091506000906001600160a01b0316635197093485612639576040518060400160405280600c81526020016b535741505f4641494c55524560a01b81525061265f565b6040518060400160405280600c81526020016b535741505f5355434345535360a01b8152505b6040518263ffffffff1660e01b815260040161267b91906144fd565b602060405180830381865afa158015612698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126bc9190613a3f565b90506126c88186614556565b94504661a4b019810161275457600583015460405163852b66a560e01b8152366004820152602481018890526001600160a01b039091169063852b66a590604401602060405180830381865afa158015612726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274a9190613a3f565b9350505050610bb3565b600a81036127de576040516324ca470760e11b8152600f602160991b01906349948e0e90612789906000903690600401614569565b602060405180830381865afa1580156127a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ca9190613a3f565b6127d4873a61457d565b61274a9190614556565b6127e8863a61457d565b9695505050505050565b6060824710156128535760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610551565b600080866001600160a01b0316858760405161286f9190614594565b60006040518083038185875af1925050503d80600081146128ac576040519150601f19603f3d011682016040523d82523d6000602084013e6128b1565b606091505b50915091506128c28783838761300c565b925050505b949350505050565b60006128d9611ccd565b60e083015160c0840181905283516101608501519293506128fb928692613085565b61010083015282516020015151600090612914906131bc565b905082610100015181111561292c5761010083018190525b8154610100848101516064926129479260ff9104169061457d565b61295191906145a6565b60a084018190526101008401516129689190613b63565b84516020015160400151106129bf5760405162461bcd60e51b815260206004820152601f60248201527f4d697363616c63756c6174656420616666696c6961746520706f7274696f6e006044820152606401610551565b8351602001516040015160a08401516101008501516129de9190613b63565b6129e89190613b63565b608084018190528451602001516040015160a0850151600092612a0a91614556565b612a149190614556565b8451909150612ad257808460e001511015612ab857612a4b6040518060600160405280602f815260200161476f602f91398261333a565b612a816040518060400160405280601081526020016f01027baba383aba1030b6b7bab73a1d160851b8152508660e0015161333a565b604051602001612a929291906145c8565b60408051601f198184030181529082905262461bcd60e51b8252610551916004016144fd565b808460e00151612ac89190613b63565b60c0850152610fd4565b61018084018190525050505050565b6000612aeb611ccd565b90508160200151612cb85760005a6060840151604085015160018501549290910392506001600160a01b03918216911614801590612b2b575062030d4081115b15612b375762030d3f19015b612b5960405180606001604052806029815260200161474660299139826125a1565b612b648160016125e6565b6101408401819052600183015485516020015151604051633931f45d60e01b81526001600160a01b039092169350633931f45d92612ba49260040161352e565b602060405180830381865afa158015612bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be59190613a3f565b6101208301819052608083018051612bfe908390614556565b9052508151612c9c578161012001518260c0015111612c7d57612c3e6040518060600160405280602f815260200161479e602f913983610120015161333a565b612a81604051806040016040528060198152602001780102a3930b232b91037baba383aba10383937b1b2b2b2399d1603d1b8152508460c0015161333a565b8161012001518260c001818151612c949190613b63565b905250612cb8565b8161012001518261018001818151612cb49190614556565b9052505b82516020015151825115612e645760008361018001518560600151600081518110612ce557612ce5613aa8565b602002602001015160400151600001516001600160701b0316612d089190614556565b6020860151519091506001600160701b0316811115612d8257612d436040518060600160405280603e8152602001614708603e91398261333a565b612a816040518060400160405280600c81526020016b01026b0bc1034b7383aba1d160a51b8152508760200151600001516001600160701b031661333a565b84515160028401546080860151612da9926001600160a01b0386811693919291169061219f565b845151600184015460a0860151612dd0926001600160a01b0386811693919291169061219f565b8451602001516040015115612e5e578451805160209182015191820151604090920151612e08926001600160a01b038616929161219f565b84516020908101519081015160409182015191516001600160a01b03909116917f1fd11cde99de9e2e6d2bc710c225ae2e03d1e8eece69b0c552c7ae2bb3499a7091612e5591869161352e565b60405180910390a25b50612f33565b60028201546080840151612e86916001600160a01b038481169291169061336e565b600182015460a0840151612ea8916001600160a01b038481169291169061336e565b8351602001516040015115612f3357835160209081015190810151604090910151612edd916001600160a01b0384169161336e565b83516020908101519081015160409182015191516001600160a01b03909116917f1fd11cde99de9e2e6d2bc710c225ae2e03d1e8eece69b0c552c7ae2bb3499a7091612f2a91859161352e565b60405180910390a25b83515160c0840151604086015160200151612f59926001600160a01b039091169161336e565b83516020808201519081015191516040808801515160c088015184516101208a0151958401516101008b015194516001600160a01b039889169896909616967f37d5b664bdbba33c8c4138fa893bae32fef34e9a60d60d7cba0cb46eadb7675196612ffe96919291906001600160701b0396909616865260208601949094526001600160a01b039290921660408501526060840152608083015260a082015260c00190565b60405180910390a350505050565b6060831561307b578251600003613074576001600160a01b0385163b6130745760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610551565b50816128c7565b6128c7838361338d565b600080613090611ccd565b60048101546040805160c08101825289516020908101518101516001600160a01b03908116151583528b5151811691830191909152939450929091169163a015b639918101886130e057866130f0565b60208a0151516001600160701b03165b81526020808201899052855461ffff6201000082048116604080860191909152600160201b909204811660609485015281516001600160e01b031960e088901b168152855115156004820152928501516001600160a01b0316602484015290840151604483015291830151606482015260808301518216608482015260a0909201511660a482015260c401602060405180830381865afa158015613198573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e89190613a3f565b6000806131c7611ccd565b8054909150600160301b90046001600160701b03166000036131ec5750600092915050565b600181015460405163ce25cb4d60e01b81526000916001600160a01b03169063ce25cb4d9061321f90879060040161390d565b602060405180830381865afa15801561323c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132609190613a3f565b90506000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c691906145f7565b905060006c0c9f2c9cd04674edea400000008260ff166012036132ea576001613308565b670de0b6b3a76400006132fe84600a6146f8565b61330891906145a6565b85546133249190600160301b90046001600160701b031661457d565b61332e919061457d565b90506127e883826145a6565b606082613346836133b7565b6040516020016133579291906145c8565b604051602081830303815290604052905092915050565b611a0f8363a9059cbb60e01b84846040516024016120af92919061352e565b81511561339d5781518083602001fd5b8060405162461bcd60e51b815260040161055191906144fd565b606060006133c483613449565b60010190506000816001600160401b038111156133e3576133e36135e2565b6040519080825280601f01601f19166020018201604052801561340d576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461341757509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106134885772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106134b4576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106134d257662386f26fc10000830492506010015b6305f5e10083106134ea576305f5e100830492506008015b61271083106134fe57612710830492506004015b60648310613510576064830492506002015b600a8310610bb35760010192915050565b6001600160a01b03169052565b6001600160a01b03929092168252602082015260400190565b60ff81168114611bb057600080fd5b803561356181613547565b919050565b60006020828403121561357857600080fd5b81356124e281613547565b803561ffff8116811461356157600080fd5b6000602082840312156135a757600080fd5b6124e282613583565b6000602082840312156135c257600080fd5b5035919050565b600061012082840312156135dc57600080fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6040516101a081016001600160401b038111828210171561361b5761361b6135e2565b60405290565b604080519081016001600160401b038111828210171561361b5761361b6135e2565b604051608081016001600160401b038111828210171561361b5761361b6135e2565b604051606081016001600160401b038111828210171561361b5761361b6135e2565b604051601f8201601f191681016001600160401b03811182821017156136af576136af6135e2565b604052919050565b8015158114611bb057600080fd5b8035613561816136b7565b6001600160a01b0381168114611bb057600080fd5b8035613561816136d0565b6000808284036101c081121561370557600080fd5b83356001600160401b0381111561371b57600080fd5b613727868287016135c9565b9350506101a080601f198301121561373e57600080fd5b6137466135f8565b9150613754602086016136c5565b8252613762604086016136c5565b6020830152613773606086016136e5565b60408301526080850135606083015260a0850135608083015260c085013560a083015260e085013560c08301526101008086013560e0840152610120808701358285015261014091508187013581850152506101608087013582850152610180915081870135818501525081860135818401525050809150509250929050565b805115158252602081015161380c602084018215159052565b50604081015161381f6040840182613521565b50606081810151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018090810151910152565b6101a08101610bb382846137f3565b600080602083850312156138ac57600080fd5b82356001600160401b03808211156138c357600080fd5b818501915085601f8301126138d757600080fd5b8135818111156138e657600080fd5b8660208260051b85010111156138fb57600080fd5b60209290920196919550909350505050565b6001600160a01b0391909116815260200190565b60006020828403121561393357600080fd5b81356001600160401b0381111561394957600080fd5b6128c7848285016135c9565b60006020828403121561396757600080fd5b81356124e2816136d0565b80356001600160701b038116811461356157600080fd5b60006020828403121561399b57600080fd5b6124e282613972565b6000602082840312156139b657600080fd5b81356001600160401b038111156139cc57600080fd5b820161016081850312156124e257600080fd5b6000602082840312156139f157600080fd5b81356001600160401b03811115613a0757600080fd5b820160c081850312156124e257600080fd5b6020808252600c908201526b155b985d5d1a1bdc9a5e995960a21b604082015260600190565b600060208284031215613a5157600080fd5b5051919050565b6000808335601e19843603018112613a6f57600080fd5b8301803591506001600160401b03821115613a8957600080fd5b6020019150600581901b3603821315613aa157600080fd5b9250929050565b634e487b7160e01b600052603260045260246000fd5b60008235609e19833603018112613ad457600080fd5b9190910192915050565b6000808335601e19843603018112613af557600080fd5b8301803591506001600160401b03821115613b0f57600080fd5b602001915036819003821315613aa157600080fd5b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b600060018201613b5c57613b5c613b34565b5060010190565b81810381811115610bb357610bb3613b34565b6020808252601e908201527f436f6e7472616374206f7065726174696f6e7320617265207061757365640000604082015260600190565b6001600160701b03613bbe82613972565b1682526020810135613bcf816136d0565b6001600160a01b03166020929092019190915250565b6000808335601e19843603018112613bfc57600080fd5b83016020810192503590506001600160401b03811115613c1b57600080fd5b8060051b3603821315613aa157600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006020808501808196508560051b810191508460005b87811015613d3d5782840389528135609e19883603018112613c9157600080fd5b870160a08135613ca0816136d0565b6001600160a01b0390811687528288013590613cbb826136d0565b16868801526040613cd0818801848301613bad565b50608080830135601e19843603018112613ce957600080fd5b9092018781019290356001600160401b03811115613d0657600080fd5b803603841315613d1557600080fd5b8282890152613d278389018286613c2d565b9c89019c97505050928601925050600101613c70565b5091979650505050505050565b60006101c08083528435613d5d816136d0565b6001600160a01b0381811692850192909252602086013591613d7e836136d0565b9182166101e0850152604086013591613d96836136d0565b91909116610200840152506060840135610220830152613dbd610240830160808601613bad565b613dce610280830160c08601613bad565b613ddc610100850185613be5565b6101206102c0850152613df46102e085018284613c56565b925050506124e260208301846137f3565b8051613561816136b7565b8051613561816136d0565b60006101a08284031215613e2e57600080fd5b613e366135f8565b613e3f83613e05565b8152613e4d60208401613e05565b6020820152613e5e60408401613e10565b6040820152606083810151908201526080808401519082015260a0808401519082015260c0808401519082015260e080840151908201526101008084015190820152610120808401519082015261014080840151908201526101608084015190820152610180928301519281019290925250919050565b600060408284031215613ee757600080fd5b613eef613621565b9050613efa82613972565b81526020820135613f0a816136d0565b602082015292915050565b60006001600160401b0380841115613f2f57613f2f6135e2565b8360051b6020613f40818301613687565b86815293509084019080840187831115613f5957600080fd5b855b8381101561404557803585811115613f735760008081fd5b870160a0818b031215613f865760008081fd5b613f8e613643565b8135613f99816136d0565b815281850135613fa8816136d0565b818601526040613fba8c848301613ed5565b90820152608082013587811115613fd15760008081fd5b808301925050601f8b81840112613fe85760008081fd5b823588811115613ffa57613ffa6135e2565b61400b818301601f19168801613687565b91508082528c878286010111156140225760008081fd5b808785018884013760009082018701526060820152835250908201908201613f5b565b50505050509392505050565b600082601f83011261406257600080fd5b6124e283833560208501613f15565b600081360361012081121561408557600080fd5b61408d613643565b608082121561409b57600080fd5b6140a3613621565b84356140ae816136d0565b81526060601f19840112156140c257600080fd5b6140ca613665565b925060208501356140da816136d0565b835260408501356140ea816136d0565b8060208501525060608501356040840152826020820152808252506141123660808601613ed5565b60208201526141243660c08601613ed5565b604082015261010084013591506001600160401b0382111561414557600080fd5b61415136838601614051565b60608201529392505050565b8183526000602080850194508260005b8581101561419b578135614180816136d0565b6001600160a01b03168752958201959082019060010161416d565b509495945050505050565b602081526141c1602082016141ba84613556565b60ff169052565b60006141cf60208401613583565b61ffff81166040840152506141e660408401613583565b61ffff81166060840152506141fd606084016136e5565b61420a6080840182613521565b50614217608084016136e5565b61422460a0840182613521565b5061423160a084016136e5565b61423e60c0840182613521565b5061424b60c084016136e5565b61425860e0840182613521565b5061426560e084016136e5565b61010061427481850183613521565b61427f8186016136e5565b91505061012061429181850183613521565b61429c818601613972565b9150506101406142b6818501836001600160701b03169052565b6142c281860186613be5565b61016086810152925090506142dc6101808501838361415d565b95945050505050565b6000604082840312156142f757600080fd5b6124e28383613ed5565b60006124e2368484613f15565b80516001600160701b031682526020908101516001600160a01b0316910152565b60005b8381101561434a578181015183820152602001614332565b50506000910152565b6000815180845261436b81602086016020860161432f565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015613d3d578284038952815180516001600160a01b03908116865286820151168686015260408082015160a091906143da8289018261430e565b5050606082015191508060808701526143f581870183614353565b9a87019a955050509084019060010161439d565b6101c0808252835180516001600160a01b0390811692840192909252602090810151805183166101e08501528082015190921661020084015260409091015161022083015283015160009061446261024084018261430e565b50604084015161447661028084018261430e565b5060608401516101206102c08401526144936102e084018261437f565b9150506124e260208301846137f3565b6000602082840312156144b557600080fd5b81516124e2816136b7565b6080815260006144d36080830187614353565b85602084015282810360408401526144eb8186614353565b91505082606083015295945050505050565b6020815260006124e26020830184614353565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6040815260006145476040830185614353565b90508260208301529392505050565b80820180821115610bb357610bb3613b34565b6020815260006124df602083018486613c2d565b8082028115828204841417610bb357610bb3613b34565b60008251613ad481846020870161432f565b6000826145c357634e487b7160e01b600052601260045260246000fd5b500490565b600083516145da81846020880161432f565b8351908301906145ee81836020880161432f565b01949350505050565b60006020828403121561460957600080fd5b81516124e281613547565b600181815b8085111561464f57816000190482111561463557614635613b34565b8085161561464257918102915b93841c9390800290614619565b509250929050565b60008261466657506001610bb3565b8161467357506000610bb3565b81600181146146895760028114614693576146af565b6001915050610bb3565b60ff8411156146a4576146a4613b34565b50506001821b610bb3565b5060208310610133831016604e8410600b84101617156146d2575081810a610bb3565b6146dc8383614614565b80600019048211156146f0576146f0613b34565b029392505050565b60006124e260ff84168361465756fe417474656d707420746f207370656e64206d6f726520696e707574207468616e20616e7469636970617465642e20546f74616c2072657175697265643a20457374696d6174656420676173207573656420666f722074726164657220676173207061796d656e74496e73756666696369656e74206f757470757420746f207061792062707320666565732e2052657175697265643a20496e73756666696369656e74206f757470757420746f207061792067617320666565732e2052657175697265643a20457374696d6174656420676173207573656420666f72206661696c656420676173207061796d656e74a2646970667358221220f278d6d6521e1e98ca0b26d1fae1a99b40c66b34d2e44091d65128b091f41d7064736f6c63430008110033","sourceMap":"225:3071:14:-:0;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"","sourceMap":"225:3071:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;674:36;688:10;700:9;674:36;;;;;;;:::i;:::-;;;;;;;;225:3071;;;;;3832:114:18;;;;;;;;;;;;;:::i;:::-;;2557:161;;;;;;;;;;-1:-1:-1;2557:161:18;;;;;:::i;:::-;;:::i;2881:142::-;;;;;;;;;;-1:-1:-1;2881:142:18;;;;;:::i;:::-;;:::i;3088:206:14:-;;;;;;;;;;-1:-1:-1;3088:206:14;;;;;:::i;:::-;;:::i;973:1076:20:-;;;;;;;;;;-1:-1:-1;973:1076:20;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;442:108:19;;;;;;;;;;;;;:::i;:::-;;;7003:6:39;6991:19;;;6973:38;;6961:2;6946:18;442:108:19;6829:188:39;2067:278:18;;;;;;;;;;-1:-1:-1;2067:278:18;;;;;:::i;:::-;;:::i;808:115:19:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;556:107::-;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;8123:32:39;;;8105:51;;8093:2;8078:18;556:107:19;7959:203:39;190:123:19;;;;;;;;;;;;;:::i;:::-;;;8419:4:39;8407:17;;;8389:36;;8377:2;8362:18;190:123:19;8247:184:39;677:125:19;;;;;;;;;;;;;:::i;2733:142:18:-;;;;;;;;;;-1:-1:-1;2733:142:18;;;;;:::i;:::-;;:::i;723:1092:14:-;;;;;;;;;;-1:-1:-1;723:1092:14;;;;;:::i;:::-;;:::i;929:105:19:-;;;;;;;;;;;;;:::i;1165:131::-;;;;;;;;;;;;;:::i;3952:262:18:-;;;;;;;;;;-1:-1:-1;3952:262:18;;;;;:::i;:::-;;:::i;3715:111::-;;;;;;;;;;;;;:::i;3029:150::-;;;;;;;;;;-1:-1:-1;3029:150:18;;;;;:::i;:::-;;:::i;425:1636::-;;;;;;;;;;-1:-1:-1;425:1636:18;;;;;:::i;:::-;;:::i;328:108:19:-;;;;;;;;;;;;;:::i;1821:1261:14:-;;;;;;;;;;-1:-1:-1;1821:1261:14;;;;;:::i;:::-;;:::i;2351:200:18:-;;;;;;;;;;-1:-1:-1;2351:200:18;;;;;:::i;:::-;;:::i;3193:173::-;;;;;;;;;;-1:-1:-1;3193:173:18;;;;;:::i;:::-;;:::i;1040:115:19:-;;;;;;;;;;;;;:::i;1302:139::-;;;;;;;;;;;;;:::i;520:107:14:-;;;;;;;;;;-1:-1:-1;520:107:14;;;;;:::i;:::-;;:::i;3372:135:18:-;;;;;;;;;;-1:-1:-1;3372:135:18;;;;;:::i;:::-;;:::i;3517:192::-;;;;;;;;;;-1:-1:-1;3517:192:18;;;;;:::i;:::-;;:::i;3832:114::-;352:21:17;:19;:21::i;:::-;:35;;;-1:-1:-1;;;;;352:35:17;338:10;:49;330:74;;;;-1:-1:-1;;;330:74:17;;;;;;;:::i;:::-;;;;;;;;;3910:5:18::1;3879:21;:19;:21::i;:::-;:36:::0;;-1:-1:-1;;3879:36:18::1;::::0;::::1;;::::0;;;::::1;::::0;;3930:9:::1;::::0;::::1;::::0;-1:-1:-1;;3930:9:18::1;3832:114::o:0;2557:161::-;352:21:17;:19;:21::i;:::-;:35;;;-1:-1:-1;;;;;352:35:17;338:10;:49;330:74;;;;-1:-1:-1;;;330:74:17;;;;;;;:::i;:::-;2671:3:18::1;2628:21;:19;:21::i;:::-;:46:::0;;-1:-1:-1;;2628:46:18::1;;;::::0;;::::1;;;::::0;;2689:22:::1;::::0;8407:17:39;;;8389:36;;2689:22:18::1;::::0;8377:2:39;8362:18;2689:22:18::1;;;;;;;;2557:161:::0;:::o;2881:142::-;352:21:17;:19;:21::i;:::-;:35;;;-1:-1:-1;;;;;352:35:17;338:10;:49;330:74;;;;-1:-1:-1;;;330:74:17;;;;;;;:::i;:::-;2980:3:18::1;2945:21;:19;:21::i;:::-;:38:::0;;-1:-1:-1;;2945:38:18::1;-1:-1:-1::0;;;2945:38:18::1;::::0;;::::1;;;::::0;;2998:18:::1;::::0;6991:19:39;;;6973:38;;2998:18:18::1;::::0;6961:2:39;6946:18;2998::18::1;6829:188:39::0;3088:206:14;352:21:17;:19;:21::i;:::-;:35;;;-1:-1:-1;;;;;352:35:17;338:10;:49;330:74;;;;-1:-1:-1;;;330:74:17;;;;;;;:::i;:::-;3205:16:14::1;::::0;3176:10:::1;::::0;;;3205:16;::::1;;;::::0;3214:6;;3146:19:::1;3205:16:::0;3146:19;3205:16;3214:6;3176:10;3205:16;::::1;;;;;;3197:44;;;::::0;-1:-1:-1;;;3197:44:14;;11316:2:39;3197:44:14::1;::::0;::::1;11298:21:39::0;11355:2;11335:18;;;11328:30;-1:-1:-1;;;11374:18:39;;;11367:45;11429:18;;3197:44:14::1;11114:339:39::0;3197:44:14::1;3256:31;::::0;11604:25:39;;;3268:10:14::1;::::0;3256:31:::1;::::0;11592:2:39;11577:18;3256:31:14::1;;;;;;;3136:158;3088:206:::0;:::o;973:1076:20:-;1076:15;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1076:15:20;815:10:17;837:4;815:27;807:69;;;;-1:-1:-1;;;807:69:17;;11842:2:39;807:69:17;;;11824:21:39;11881:2;11861:18;;;11854:30;11920:31;11900:18;;;11893:59;11969:18;;807:69:17;11640:353:39;807:69:17;1105:23:20::1;1114:7;1123:4;1105:8;:23::i;:::-;1155:22;::::0;;;;;;::::1;:::i;:::-;-1:-1:-1::0;;;;;1155:32:20::1;;1196:4;1155:47;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1138:14;::::0;::::1;:64:::0;1225:6:::1;1221:345;1236:14;;::::0;::::1;:7:::0;:14:::1;:::i;:::-;:21;;1234:1;:23;1221:345;;;1277:35;1315:14;;::::0;::::1;:7:::0;:14:::1;:::i;:::-;1330:1;1315:17;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1277:55:::0;-1:-1:-1;1346:75:20::1;1387:10;::::0;;;::::1;::::0;::::1;;:::i;:::-;1399:21;::::0;;;:14:::1;::::0;::::1;:21;:::i;:::-;-1:-1:-1::0;;;;;1346:75:20::1;1353:20;::::0;;;;;;::::1;:::i;:::-;-1:-1:-1::0;;;;;1346:40:20::1;::::0;:75;:40:::1;:75::i;:::-;1436:6;1448:9;;::::0;::::1;:2:::0;:9:::1;:::i;:::-;-1:-1:-1::0;;;;;1448:14:20::1;1463:13;;::::0;::::1;:2:::0;:13:::1;:::i;:::-;1448:29;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1435:42;;;1496:1;1492:64;;1517:24;::::0;-1:-1:-1;;;1517:24:20;;14508:2:39;1517:24:20::1;::::0;::::1;14490:21:39::0;14547:2;14527:18;;;14520:30;-1:-1:-1;;;14566:18:39;;;14559:44;14620:18;;1517:24:20::1;14306:338:39::0;1492:64:20::1;1263:303;;1258:3;;;;:::i;:::-;;;1221:345;;;-1:-1:-1::0;1575:8:20::1;1586:22;::::0;;;;;;::::1;:::i;:::-;-1:-1:-1::0;;;;;1586:32:20::1;;1627:4;1586:47;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1575:58;;1663:3;1646:4;:14;;;:20;1643:136;;;1705:14;::::0;::::1;::::0;1699:20:::1;::::0;:3;:20:::1;:::i;:::-;1682:14;::::0;::::1;:37:::0;1643:136:::1;;;1767:1;1750:14;::::0;::::1;:18:::0;1643:136:::1;1797:76;::::0;;;;::::1;::::0;;;::::1;::::0;;-1:-1:-1;;;1797:76:20::1;::::0;::::1;::::0;::::1;::::0;1821:23:::1;::::0;;;:16:::1;::::0;::::1;:23;:::i;:::-;-1:-1:-1::0;;;;;1797:76:20::1;;;;;;;;;;;;;;-1:-1:-1::0;;;1797:76:20::1;;::::0;1858:4:::1;:14;;;1797:11;:76::i;:::-;1964:23;::::0;;;:16:::1;::::0;::::1;:23;:::i;:::-;-1:-1:-1::0;;;;;1946:41:20::1;:4;:14;;;:41;;1938:83;;;::::0;-1:-1:-1;;;1938:83:20;;15256:2:39;1938:83:20::1;::::0;::::1;15238:21:39::0;15295:2;15275:18;;;15268:30;15334:31;15314:18;;;15307:59;15383:18;;1938:83:20::1;15054:353:39::0;1938:83:20::1;2038:4;2031:11;;;886:1:17;973:1076:20::0;;;;:::o;442:108:19:-;487:6;511:21;:19;:21::i;:::-;:32;-1:-1:-1;;;511:32:19;;;;;;-1:-1:-1;442:108:19:o;2067:278:18:-;352:21:17;:19;:21::i;:::-;:35;;;-1:-1:-1;;;;;352:35:17;338:10;:49;330:74;;;;-1:-1:-1;;;330:74:17;;;;;;;:::i;:::-;2142:37:18::1;2182:21;:19;:21::i;:::-;2142:61;;2217:6;2213:126;2226:15:::0;;::::1;2213:126;;;2284:4;2261:2;:9;;:20;2271:6;;2278:1;2271:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;2261:20:18::1;::::0;;::::1;::::0;::::1;::::0;;;;;;-1:-1:-1;2261:20:18;:27;;-1:-1:-1;;2261:27:18::1;::::0;::::1;;::::0;;;::::1;::::0;;2307:21:::1;2318:6:::0;;2325:1;2318:9;;::::1;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;2307:21;;;;;;:::i;:::-;;;;;;;;2242:3;::::0;::::1;:::i;:::-;;;2213:126;;;;2132:213;2067:278:::0;;:::o;808:115:19:-;855:7;881:21;:19;:21::i;:::-;:35;;;-1:-1:-1;;;;;881:35:19;;808:115;-1:-1:-1;808:115:19:o;556:107::-;600:7;625:21;:19;:21::i;:::-;:31;-1:-1:-1;;;625:31:19;;-1:-1:-1;;;;;625:31:19;;;-1:-1:-1;556:107:19:o;190:123::-;243:5;266:21;:19;:21::i;:::-;:40;;;;;;;;-1:-1:-1;190:123:19:o;677:125::-;725:7;758:21;:19;:21::i;:::-;:36;;;-1:-1:-1;;;;;758:36:19;;677:125;-1:-1:-1;677:125:19:o;2733:142:18:-;352:21:17;:19;:21::i;:::-;:35;;;-1:-1:-1;;;;;352:35:17;338:10;:49;330:74;;;;-1:-1:-1;;;330:74:17;;;;;;;:::i;:::-;2832:3:18::1;2797:21;:19;:21::i;:::-;:38:::0;;-1:-1:-1;;2797:38:18::1;::::0;::::1;::::0;;::::1;;;::::0;;2850:18:::1;::::0;6991:19:39;;;6973:38;;2850:18:18::1;::::0;6961:2:39;6946:18;2850::18::1;6829:188:39::0;723:1092:14;622:37:17;662:21;:19;:21::i;:::-;711:10;701:21;;;;:9;;;:21;;;;;;622:61;;-1:-1:-1;701:21:17;;693:60;;;;-1:-1:-1;;;693:60:17;;15614:2:39;693:60:17;;;15596:21:39;15653:2;15633:18;;;15626:30;15692:28;15672:18;;;15665:56;15738:18;;693:60:17;15412:350:39;693:60:17;212:21:::1;:19;:21::i;:::-;:28:::0;::::1;;211:29;203:72;;;;-1:-1:-1::0;;;203:72:17::1;;;;;;;:::i;:::-;911:13:14::2;927:9;972:441;::::0;;::::2;::::0;::::2;::::0;;946:23:::2;972:441:::0;;;::::2;::::0;::::2;::::0;;;911:25;;-1:-1:-1;972:441:14;;;1111:21:::2;:19;:21::i;:::-;:36;;;;;;;;;;-1:-1:-1::0;;;;;1111:36:14::2;-1:-1:-1::0;;;;;972:441:14::2;;;;;1067:8;972:441;;;;1258:1;972:441;;;;1285:1;972:441;;;;1313:1;972:441;;;;1370:1;972:441;;;;1173:1;972:441;;;;1199:1;972:441;;;;1231:1;972:441;;;;1344:1;972:441;;;;1401:1;972:441;;::::0;946:467:::2;;1424:12;1507:4;-1:-1:-1::0;;;;;1507:9:14::2;;1547:6;1535:9;:18;;;;:::i;:::-;1564:7;1573;1507:74;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;1507:74:14::2;::::0;;::::2;;::::0;;::::2;-1:-1:-1::0;;1507:74:14::2;::::0;::::2;::::0;;;::::2;::::0;;::::2;::::0;::::2;:::i;:::-;;;1503:260;;1697:26;;;;;;;;;;;;;;-1:-1:-1::0;;;1697:26:14::2;;::::0;:11:::2;:26::i;:::-;-1:-1:-1::0;1747:5:14::2;1503:260;;;1635:2:::0;-1:-1:-1;1661:4:14::2;::::0;-1:-1:-1;1503:260:14::2;1773:35;;1782:7:::0;1773:35:::2;:::i;:::-;1791:7;1800;1773:8;:35::i;:::-;806:1009;;;612:159:17::0;723:1092:14;:::o;929:105:19:-;972:7;997:21;:19;:21::i;:::-;:30;;;-1:-1:-1;;;;;997:30:19;;929:105;-1:-1:-1;929:105:19:o;1165:131::-;1216:7;1249:21;:19;:21::i;:::-;:39;;;-1:-1:-1;;;;;1249:39:19;;1165:131;-1:-1:-1;1165:131:19:o;3952:262:18:-;352:21:17;:19;:21::i;:::-;:35;;;-1:-1:-1;;;;;352:35:17;338:10;:49;330:74;;;;-1:-1:-1;;;330:74:17;;;;;;;:::i;:::-;-1:-1:-1;;;;;4039:17:18;::::1;4031:54;;;::::0;-1:-1:-1;;;4031:54:18;;26533:2:39;4031:54:18::1;::::0;::::1;26515:21:39::0;26572:2;26552:18;;;26545:30;-1:-1:-1;;;26591:18:39;;;26584:54;26655:18;;4031:54:18::1;26331:348:39::0;4031:54:18::1;4160:3;4095:21;:19;:21::i;:::-;:38;;:69:::0;;-1:-1:-1;;;;;;4095:69:18::1;-1:-1:-1::0;;;;;4095:69:18;;;::::1;::::0;;;::::1;::::0;;4179:28:::1;::::0;::::1;::::0;::::1;::::0;4203:3;;4179:28:::1;:::i;3715:111::-:0;352:21:17;:19;:21::i;:::-;:35;;;-1:-1:-1;;;;;352:35:17;338:10;:49;330:74;;;;-1:-1:-1;;;330:74:17;;;;;;;:::i;:::-;3792:4:18::1;3761:21;:19;:21::i;:::-;:35:::0;;-1:-1:-1;;3761:35:18::1;::::0;::::1;;::::0;;;::::1;::::0;;3811:8:::1;::::0;::::1;::::0;-1:-1:-1;;3811:8:18::1;3715:111::o:0;3029:150::-;352:21:17;:19;:21::i;:::-;:35;;;-1:-1:-1;;;;;352:35:17;338:10;:49;330:74;;;;-1:-1:-1;;;330:74:17;;;;;;;:::i;:::-;3130:6:18::1;3096:21;:19;:21::i;:::-;:40:::0;;-1:-1:-1;;;;;;;;3096:40:18::1;-1:-1:-1::0;;;;;;;;3096:40:18;;::::1;;;::::0;;3151:21:::1;::::0;8123:32:39;;;8105:51;;3151:21:18::1;::::0;8093:2:39;8078:18;3151:21:18::1;7959:203:39::0;425:1636:18;507:37;547:21;:19;:21::i;:::-;581:16;;;;507:61;;-1:-1:-1;;;;;;581:16:18;:30;578:115;;649:16;;;;-1:-1:-1;;;;;649:16:18;635:10;:30;627:55;;;;-1:-1:-1;;;627:55:18;;;;;;;:::i;:::-;744:1;711:21;;;;;;;;:::i;:::-;-1:-1:-1;;;;;711:35:18;;703:78;;;;-1:-1:-1;;;703:78:18;;26886:2:39;703:78:18;;;26868:21:39;26925:2;26905:18;;;26898:30;26964:32;26944:18;;;26937:60;27014:18;;703:78:18;26684:354:39;703:78:18;826:1;799:15;;;;;;;;:::i;:::-;-1:-1:-1;;;;;799:29:18;;791:58;;;;-1:-1:-1;;;791:58:18;;27245:2:39;791:58:18;;;27227:21:39;27284:2;27264:18;;;27257:30;-1:-1:-1;;;27303:18:39;;;27296:46;27359:18;;791:58:18;27043:340:39;791:58:18;895:1;867:16;;;;;;;;:::i;:::-;-1:-1:-1;;;;;867:30:18;;859:69;;;;-1:-1:-1;;;859:69:18;;27590:2:39;859:69:18;;;27572:21:39;27629:2;27609:18;;;27602:30;27668:28;27648:18;;;27641:56;27714:18;;859:69:18;27388:350:39;859:69:18;974:1;946:25;;;;:6;:25;:::i;:::-;:29;;;938:70;;;;-1:-1:-1;;;938:70:18;;27945:2:39;938:70:18;;;27927:21:39;27984:2;27964:18;;;27957:30;28023;28003:18;;;27996:58;28071:18;;938:70:18;27743:352:39;938:70:18;1046:1;1026:17;;;;;;;;:::i;:::-;:21;;;1018:70;;;;-1:-1:-1;;;1018:70:18;;28302:2:39;1018:70:18;;;28284:21:39;28341:2;28321:18;;;28314:30;28380:34;28360:18;;;28353:62;-1:-1:-1;;;28431:18:39;;;28424:34;28475:19;;1018:70:18;28100:400:39;1018:70:18;1126:1;1106:17;;;;;;;;:::i;:::-;:21;;;1098:56;;;;-1:-1:-1;;;1098:56:18;;28707:2:39;1098:56:18;;;28689:21:39;28746:2;28726:18;;;28719:30;-1:-1:-1;;;28765:18:39;;;28758:52;28827:18;;1098:56:18;28505:346:39;1098:56:18;1192:17;;;;;;;;:::i;:::-;1172:37;;:17;;;;;;;;:::i;:::-;:37;;;1164:84;;;;-1:-1:-1;;;1164:84:18;;29058:2:39;1164:84:18;;;29040:21:39;29097:2;29077:18;;;29070:30;29136:34;29116:18;;;29109:62;-1:-1:-1;;;29187:18:39;;;29180:32;29229:19;;1164:84:18;28856:398:39;1164:84:18;1301:1;1266:23;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1266:37:18;;1258:82;;;;-1:-1:-1;;;1258:82:18;;29461:2:39;1258:82:18;;;29443:21:39;;;29480:18;;;29473:30;29539:34;29519:18;;;29512:62;29591:18;;1258:82:18;29259:356:39;1258:82:18;1370:20;;;;;;;;:::i;:::-;1351:16;;;:39;;-1:-1:-1;;;;;;1351:39:18;-1:-1:-1;;;;;1351:39:18;;;;;;;;;;1424:25;;;;;;:::i;:::-;1400:49;;;;;;;;;-1:-1:-1;;1400:49:18;;;;;;1495:21;;;;;;;;:::i;:::-;1459:17;;;:58;;-1:-1:-1;;;;;;1459:58:18;-1:-1:-1;;;;;1459:58:18;;;;;;;;;;1541:15;;;;;;;;:::i;:::-;1527:11;;;:29;;-1:-1:-1;;;;;;1527:29:18;-1:-1:-1;;;;;1527:29:18;;;;;;;;;;1587:16;;;;;;;;:::i;:::-;1566:12;;;:38;;-1:-1:-1;;;;;;1566:38:18;-1:-1:-1;;;;;1566:38:18;;;;;;;;;;1630:17;;;;;;;;:::i;:::-;1614:33;;;;;;;;;-1:-1:-1;;1614:33:18;;;;;;1673:17;;;;;;;;:::i;:::-;1657:33;;;;;;;-1:-1:-1;;;1657:33:18;-1:-1:-1;;1657:33:18;;;;;;1715:16;;;;;;;;:::i;:::-;1700:31;;-1:-1:-1;;;;;1700:31:18;;;;-1:-1:-1;;;1700:31:18;-1:-1:-1;;;;;;;;1700:31:18;;;;;;1794:19;1700:31;1794:19;;;;;;:::i;:::-;1752:20;;;:62;;-1:-1:-1;;;;;;1752:62:18;-1:-1:-1;;;;;1752:62:18;;;;;;;;;;1870:23;;;;1752:62;1870:23;;;:::i;:::-;1824:19;;;:70;;-1:-1:-1;;;;;;1824:70:18;-1:-1:-1;;;;;1824:70:18;;;;;;;;;;-1:-1:-1;1905:114:18;1920:20;;;;:6;:20;:::i;:::-;:27;;1918:1;:29;1905:114;;;2004:4;1967:9;;;:34;1977:20;;;;:6;:20;:::i;:::-;1998:1;1977:23;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1967:34:18;;;;;;;;;;;;-1:-1:-1;1967:34:18;:41;;-1:-1:-1;;1967:41:18;;;;;;;;;;1948:3;;;:::i;:::-;;;1905:114;;;;2033:21;2047:6;2033:21;;;;;;:::i;:::-;;;;;;;;497:1564;425:1636;:::o;328:108:19:-;373:6;397:21;:19;:21::i;:::-;:32;;;;;;;;-1:-1:-1;328:108:19:o;1821:1261:14:-;212:21:17;:19;:21::i;:::-;:28;;;211:29;203:72;;;;-1:-1:-1;;;203:72:17;;;;;;;:::i;:::-;2052:465:14::1;::::0;;2106:286;;;;;2367:10:::1;2052:465;::::0;::::1;2106:286:::0;;;2161:177;;::::1;::::0;::::1;::::0;;;2013:36:::1;::::0;2052:465;;;2106:286;;;;2161:177;2219:16:::1;2106:286;2219:16:::0;::::1;:7:::0;:16:::1;:::i;:::-;-1:-1:-1::0;;;;;2161:177:14::1;;;;;2276:1;-1:-1:-1::0;;;;;2161:177:14::1;;;;;2318:1;2161:177;;::::0;2106:286:::1;;::::0;2052:465:::1;;;;2415:7;:15;;2052:465;;;;;;;;;;:::i;:::-;::::0;;::::1;;;;::::0;;;;;2454:16:::1;::::0;::::1;2052:465;:::i;:::-;::::0;;::::1;;2492:14;;::::0;::::1;:7:::0;:14:::1;:::i;:::-;2052:465;::::0;::::1;:::i;:::-;::::0;;2553:433:::1;::::0;;::::1;::::0;::::1;::::0;;2527:23:::1;2553:433:::0;;;;::::1;::::0;::::1;::::0;2013:504;;-1:-1:-1;2553:433:14;;;2684:21:::1;:19;:21::i;:::-;:36;;::::0;-1:-1:-1;;;;;2684:36:14::1;2553:433:::0;;2684:36:::1;2553:433;::::0;::::1;::::0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2684:36:::1;2553:433:::0;;;;;;;;;;;;;;;;3006:27;-1:-1:-1;;;3006:27:14;;2527:459;;-1:-1:-1;3006:4:14::1;::::0;:9:::1;::::0;:27:::1;::::0;3016:7;;2527:459;;3006:27:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2996:37;;3043:32;3052:7;3061;3070:4;3043:8;:32::i;:::-;1895:1187;;1821:1261:::0;:::o;2351:200:18:-;352:21:17;:19;:21::i;:::-;:35;;;-1:-1:-1;;;;;352:35:17;338:10;:49;330:74;;;;-1:-1:-1;;;330:74:17;;;;;;;:::i;:::-;2416:37:18::1;2456:21;:19;:21::i;:::-;-1:-1:-1::0;;;;;2494:16:18;::::1;;::::0;;;:9:::1;::::0;::::1;:16;::::0;;;;;;2487:23;;-1:-1:-1;;2487:23:18::1;::::0;;2525:19;2416:61;;-1:-1:-1;2525:19:18::1;::::0;::::1;::::0;2504:5;;2525:19:::1;:::i;3193:173::-:0;489:21:17;:19;:21::i;:::-;:36;;;-1:-1:-1;;;;;489:36:17;467:10;:59;459:108;;;;-1:-1:-1;;;459:108:17;;36311:2:39;459:108:17;;;36293:21:39;36350:2;36330:18;;;36323:30;36389:34;36369:18;;;36362:62;-1:-1:-1;;;36440:18:39;;;36433:34;36484:19;;459:108:17;36109:400:39;459:108:17;3311:5:18::1;3272:21;:19;:21::i;:::-;:36;;:44:::0;;-1:-1:-1;;;;;;3272:44:18::1;-1:-1:-1::0;;;;;3272:44:18;;;::::1;::::0;;;::::1;::::0;;3331:28:::1;::::0;::::1;::::0;::::1;::::0;3352:5;;3331:28:::1;:::i;1040:115:19:-:0;1083:7;1116:21;:19;:21::i;:::-;:31;;;-1:-1:-1;;;;;1116:31:19;;1040:115;-1:-1:-1;1040:115:19:o;1302:139::-;1361:7;1395:21;:19;:21::i;:::-;:38;;;-1:-1:-1;;;;;1395:38:19;;1302:139;-1:-1:-1;1302:139:19:o;520:107:14:-;603:17;613:6;603:9;:17::i;:::-;520:107;:::o;3372:135:18:-;352:21:17;:19;:21::i;:::-;:35;;;-1:-1:-1;;;;;352:35:17;338:10;:49;330:74;;;;-1:-1:-1;;;330:74:17;;;;;;;:::i;:::-;3466:1:18::1;3433:21;:19;:21::i;:::-;:30;;:34:::0;;-1:-1:-1;;;;;;3433:34:18::1;-1:-1:-1::0;;;;;3433:34:18;;;::::1;::::0;;;::::1;::::0;;3482:18:::1;::::0;::::1;::::0;::::1;::::0;3498:1;;3482:18:::1;:::i;3517:192::-:0;352:21:17;:19;:21::i;:::-;:35;;;-1:-1:-1;;;;;352:35:17;338:10;:49;330:74;;;;-1:-1:-1;;;330:74:17;;;;;;;:::i;:::-;3645:6:18::1;3603:21;:19;:21::i;:::-;:39;;:48:::0;;-1:-1:-1;;;;;;3603:48:18::1;-1:-1:-1::0;;;;;3603:48:18;;;::::1;::::0;;;::::1;::::0;;3666:36:::1;::::0;::::1;::::0;::::1;::::0;3694:6;;3666:36:::1;:::i;2245:122:15:-:0;2340:19;;2245:122::o;14900:1347:20:-;15040:14;15065:37;;;;:28;;;:37;:::i;:::-;15040:63;;15113:37;15153:21;:19;:21::i;:::-;15205:17;;;;:43;;-1:-1:-1;;;15205:43:20;;15113:61;;-1:-1:-1;;;;;;15205:17:20;;:35;;:43;;15241:6;;15205:43;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;15184:115;;;;-1:-1:-1;;;15184:115:20;;36966:2:39;15184:115:20;;;36948:21:39;37005:2;36985:18;;;36978:30;-1:-1:-1;;;37024:18:39;;;37017:54;37088:18;;15184:115:20;36764:348:39;15184:115:20;15386:21;;;;;;;;:::i;:::-;-1:-1:-1;;;;;15368:40:20;:6;-1:-1:-1;;;;;15368:40:20;;:101;;;-1:-1:-1;15446:22:20;;;;;;;;:::i;:::-;-1:-1:-1;;;;;15428:41:20;:6;-1:-1:-1;;;;;15428:41:20;;15368:101;15360:170;;;;-1:-1:-1;;;15360:170:20;;37319:2:39;15360:170:20;;;37301:21:39;37358:2;37338:18;;;37331:30;37397:34;37377:18;;;37370:62;-1:-1:-1;;;37448:18:39;;;37441:37;37495:19;;15360:170:20;37117:403:39;15360:170:20;15635:12;;;;-1:-1:-1;;;;;15635:12:20;:22;15658:34;;;;:7;:34;:::i;:::-;15635:58;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;15613:19;;;:80;15828:37;;;;:28;;;:37;:::i;:::-;-1:-1:-1;;;;;15786:80:20;15794:21;;;;;;;;:::i;:::-;-1:-1:-1;;;;;15786:80:20;;15768:98;;16046:127;16085:34;;;;:7;:34;:::i;:::-;16129:4;16136:14;;;;:7;:14;:::i;:::-;16151:1;16136:17;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:36;;;;;;:29;;:36;:::i;:::-;-1:-1:-1;;;;;16046:127:20;:21;;;;;;;;:::i;:::-;-1:-1:-1;;;;;16046:38:20;;:127;;:38;:127::i;1475:603:4:-;1830:10;;;1829:62;;-1:-1:-1;1846:39:4;;-1:-1:-1;;;1846:39:4;;1870:4;1846:39;;;37737:34:39;-1:-1:-1;;;;;37807:15:39;;;37787:18;;;37780:43;1846:15:4;;;;;37672:18:39;;1846:39:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:44;1829:62;1808:163;;;;-1:-1:-1;;;1808:163:4;;38036:2:39;1808:163:4;;;38018:21:39;38075:2;38055:18;;;38048:30;38114:34;38094:18;;;38087:62;-1:-1:-1;;;38165:18:39;;;38158:52;38227:19;;1808:163:4;37834:418:39;1808:163:4;1981:90;2001:5;2031:22;;;2055:7;2064:5;2008:62;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2008:62:4;;;;;;;;;;;;;;-1:-1:-1;;;;;2008:62:4;-1:-1:-1;;;;;;2008:62:4;;;;;;;;;;1981:19;:90::i;29948:189:29:-;30039:94;30117:2;30121;30125;30129;30055:77;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;30055:77:29;;;;;;;;;;;;;;-1:-1:-1;;;;;30055:77:29;-1:-1:-1;;;30055:77:29;;;30039:15;:94::i;5072:112::-;5121:59;5176:2;5137:42;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5137:42:29;;;;;;;;;;;;;;-1:-1:-1;;;;;5137:42:29;-1:-1:-1;;;5137:42:29;;;5121:15;:59::i;2055:469:20:-;2171:7;2168:243;;;2258:32;2276:7;2285:4;2258:17;:32::i;:::-;2168:243;;;2368:32;2386:7;2395:4;2368:17;:32::i;:::-;2484:33;2496:4;:20;;;2484:11;:33::i;974:241:4:-;1112:96;1132:5;1162:27;;;1191:4;1197:2;1201:5;1139:68;;;;;;;;;;:::i;3747:706::-;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;-1:-1:-1;;;;;4192:27:4;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:4;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;-1:-1:-1;;;4351:85:4;;39593:2:39;4351:85:4;;;39575:21:39;39632:2;39612:18;;;39605:30;39671:34;39651:18;;;39644:62;-1:-1:-1;;;39722:18:39;;;39715:40;39772:19;;4351:85:4;39391:406:39;176:288:29;264:14;;129:42;373:2;360:16;;240:21;;264:14;360:16;129:42;400:5;389:68;380:77;;335:126;;176:288;:::o;4260:294:20:-;4433:53;4445:7;4454:4;:15;;;4471:4;:14;;;4433:11;:53::i;:::-;4516:31;4533:7;4542:4;4516:16;:31::i;:::-;4260:294;;:::o;2699:1401::-;2813:37;2853:21;:19;:21::i;:::-;2813:61;;2884:18;2919:4;:15;;;2916:1045;;;3072:13;3105:9;3089:4;:13;;;:25;3072:43;;3150:66;;;;;;;;;;;;;;;;;;3207:8;3150:11;:66::i;:::-;3257:39;3280:8;3290:5;3257:22;:39::i;:::-;3234:20;;;:62;;;3341:17;;;;3388:24;;:28;;;:37;3341:108;;-1:-1:-1;;;3341:108:20;;-1:-1:-1;;;;;3341:17:20;;;;-1:-1:-1;3341:38:20;;:108;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3887:24;;:34;;3923:11;;;;3832:28;;;;;:37;3325:124;;-1:-1:-1;3832:118:20;;-1:-1:-1;;;;;3832:54:20;;;;3923:11;3325:124;3832:54;:118::i;:::-;3995:24;;:34;;4039:28;;;;;:37;3984:109;;-1:-1:-1;;;;;3984:109:20;;;;;;;;4079:13;;3984:109;:::i;:::-;;;;;;;;2795:1305;;2699:1401;;:::o;16466:641::-;16522:6;16532:1;16522:11;16519:47;;16466:641;:::o;16519:47::-;16762:6;16738:21;:30;16735:366;;;16873:40;;11604:25:39;;;16894:10:20;;16873:40;;11592:2:39;11577:18;16873:40:20;;;;;;;;520:107:14;:::o;16735:366:20:-;17003:36;;17011:10;;17003:36;;;;;17032:6;;17003:36;;;;17032:6;17011:10;17003:36;;;;;;;;;;;;;;;;;;;;-1:-1:-1;17058:32:20;;11604:25:39;;;17071:10:20;;17058:32;;11592:2:39;11577:18;17058:32:20;11458:177:39;3873:223:5;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4037:21;:52::i;:::-;4030:59;;3873:223;;;;;;:::o;4609:1218:20:-;4720:37;4760:21;:19;:21::i;:::-;4720:61;;4792:10;4819;4816:265;;;-1:-1:-1;4935:15:20;;;;:22;-1:-1:-1;;;;;4927:30:20;4816:265;;;-1:-1:-1;5061:9:20;4816:265;5699:17;;;;5730:24;;:34;;5774:28;;;;;:37;5699:121;;-1:-1:-1;;;5699:121:20;;-1:-1:-1;;;;;5699:17:20;;;;:30;;:121;;5730:34;;5814:5;;5699:121;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4710:1117;;4609:1218;;;:::o;5928:234::-;6067:43;6096:7;6105:4;6067:28;:43::i;:::-;6120:35;6141:7;6150:4;6120:20;:35::i;5936:136:29:-;5997:71;6060:2;6064;6013:54;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;6013:54:29;;;;;;;;;;;;;;-1:-1:-1;;;;;6013:54:29;-1:-1:-1;;;6013:54:29;;;5997:15;:71::i;507:795:16:-;581:4;597:37;637:21;:19;:21::i;:::-;679:19;;;;597:61;;-1:-1:-1;668:8:16;;-1:-1:-1;;;;;679:19:16;:30;710:7;:63;;748:25;;;;;;;;;;;;;-1:-1:-1;;;748:25:16;;;710:63;;;720:25;;;;;;;;;;;;;-1:-1:-1;;;720:25:16;;;710:63;679:95;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;668:106;-1:-1:-1;784:14:16;668:106;784:14;;:::i;:::-;;-1:-1:-1;950:9:16;-1:-1:-1;;981:10:16;;978:110;;1014:20;;;;:63;;-1:-1:-1;;;1014:63:16;;1052:8;1014:63;;;40401:25:39;40442:18;;;40435:34;;;-1:-1:-1;;;;;1014:20:16;;;;:37;;40374:18:39;;1014:63:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1007:70;;;;;;;978:110;387:2;1100:3;:10;1097:104;;1159:31;;-1:-1:-1;;;1159:31:16;;-1:-1:-1;;;;;457:42:16;1159:21;;:31;;1181:8;;;;1159:31;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1134:21;1148:7;1134:11;:21;:::i;:::-;1133:57;;;;:::i;1097:104::-;1274:21;1288:7;1274:11;:21;:::i;:::-;1267:28;507:795;-1:-1:-1;;;;;;507:795:16:o;4960:446:5:-;5125:12;5182:5;5157:21;:30;;5149:81;;;;-1:-1:-1;;;5149:81:5;;41104:2:39;5149:81:5;;;41086:21:39;41143:2;41123:18;;;41116:30;41182:34;41162:18;;;41155:62;-1:-1:-1;;;41233:18:39;;;41226:36;41279:19;;5149:81:5;40902:402:39;5149:81:5;5241:12;5255:23;5282:6;-1:-1:-1;;;;;5282:11:5;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;;;;4960:446;;;;;;;:::o;6259:2660:20:-;6415:37;6455:21;:19;:21::i;:::-;6546:14;;;;6527:16;;;:33;;;6646:15;;6663:19;;;;6415:61;;-1:-1:-1;6623:76:20;;6637:7;;6623:13;:76::i;:::-;6606:14;;;:93;6823:24;;:28;;;:37;6774:11;;6788:74;;:26;:74::i;:::-;6774:88;;6884:4;:14;;;6875:6;:23;6872:157;;;6995:14;;;:23;;;6872:157;7133:21;;;7116:14;;;;7158:3;;7116:38;;7133:21;;;;;7116:38;:::i;:::-;7115:46;;;;:::i;:::-;7097:15;;;:64;;;7610:14;;;;:30;;7097:64;7610:30;:::i;:::-;7562:24;;:28;;;:45;;;:78;7554:122;;;;-1:-1:-1;;;7554:122:20;;42157:2:39;7554:122:20;;;42139:21:39;42196:2;42176:18;;;42169:30;42235:33;42215:18;;;42208:61;42286:18;;7554:122:20;41955:355:39;7554:122:20;7739:24;;:28;;;:45;;;7720:15;;;;7705:14;;;;:30;;7720:15;7705:30;:::i;:::-;7704:80;;;;:::i;:::-;7686:15;;;:98;;;7943:24;;:28;;;:45;;;7907:15;;;;7894:10;;7907:33;;;:::i;:::-;:81;;;;:::i;:::-;8015:15;;7894:94;;-1:-1:-1;8011:902:20;;8325:5;8308:4;:14;;;:22;8305:390;;;8456:75;;;;;;;;;;;;;;;;;;8525:5;8456:17;:75::i;:::-;8561:53;;;;;;;;;;;;;;-1:-1:-1;;;8561:53:20;;;8599:4;:14;;;8561:17;:53::i;:::-;8410:230;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;8410:230:20;;;;;;;;;;-1:-1:-1;;;8350:330:20;;;;;;;:::i;8305:390::-;8744:5;8727:4;:14;;;:22;;;;:::i;:::-;8708:16;;;:41;8011:902;;;8875:19;;;:27;;;6404:2515;;;6259:2660;;:::o;9072:5822::-;9218:37;9258:21;:19;:21::i;:::-;9218:61;;9294:4;:15;;;9290:2537;;9820:13;9853:9;9837:13;;;;9914:17;;;;9892;;;;9837:25;;;;;-1:-1:-1;;;;;;9892:17:20;;;9884:47;;;;;;:69;;;9946:7;9935:8;:18;9884:69;9881:176;;;-1:-1:-1;;9977:19:20;9881:176;10091:66;;;;;;;;;;;;;;;;;;10148:8;10091:11;:66::i;:::-;10198:38;10221:8;10231:4;10198:22;:38::i;:::-;10175:20;;;:61;;;10382:17;;;;10429:24;;:28;;;:37;10382:108;;-1:-1:-1;;;10382:108:20;;-1:-1:-1;;;;;10382:17:20;;;;-1:-1:-1;10382:38:20;;:108;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10365:14;;;:125;;;10633:15;;;:33;;;;10365:125;;10633:33;:::i;:::-;;;-1:-1:-1;10752:15:20;;10748:998;;11103:4;:14;;;11083:4;:16;;;:34;11080:458;;11259:84;;;;;;;;;;;;;;;;;;11328:4;:14;;;11259:17;:84::i;:::-;11377:64;;;;;;;;;;;;;;-1:-1:-1;;;11377:64:20;;;11424:4;:16;;;11377:17;:64::i;11080:458::-;11575:4;:14;;;11555:4;:16;;:34;;;;;;;:::i;:::-;;;-1:-1:-1;10748:998:20;;;11717:4;:14;;;11694:4;:19;;:37;;;;;;;:::i;:::-;;;-1:-1:-1;10748:998:20;11885:24;;:28;;;:37;11935:15;;11932:2384;;;12082:20;12144:4;:19;;;12105:7;:14;;;12120:1;12105:17;;;;;;;;:::i;:::-;;;;;;;:29;;;:36;;;-1:-1:-1;;;;;12105:58:20;;;;;:::i;:::-;12312:15;;;;:22;12082:81;;-1:-1:-1;;;;;;12294:40:20;;;12291:395;;;12431:100;;;;;;;;;;;;;;;;;;12515:15;12431:17;:100::i;:::-;12573:57;;;;;;;;;;;;;;-1:-1:-1;;;12573:57:20;;;12607:7;:15;;;:22;;;-1:-1:-1;;;;;12573:57:20;:17;:57::i;12291:395::-;12769:24;;:34;12805:11;;;;12818:15;;;;12743:91;;-1:-1:-1;;;;;12743:25:20;;;;12769:34;;12805:11;;;12743:25;:91::i;:::-;12916:24;;:34;12960:17;;;;12980:15;;;;12890:106;;-1:-1:-1;;;;;12890:25:20;;;;12916:34;;12960:17;;;12890:25;:106::i;:::-;13013:24;;:28;;;:45;;;:49;13010:470;;13201:24;;:34;;13237:28;;;;;:38;;;;13277:45;;;;;13175:148;;-1:-1:-1;;;;;13175:25:20;;;13201:34;13175:25;:148::i;:::-;13360:24;;:28;;;;;:38;;;;13419:45;;;;;13346:119;;-1:-1:-1;;;;;13346:119:20;;;;;;;;13408:8;;13346:119;:::i;:::-;;;;;;;;13010:470;11952:1538;11932:2384;;;13800:11;;;;13813:15;;;;13778:51;;-1:-1:-1;;;;;13778:21:20;;;;13800:11;;;13778:21;:51::i;:::-;13873:17;;;;13893:15;;;;13843:66;;-1:-1:-1;;;;;13843:21:20;;;;13873:17;;;13843:21;:66::i;:::-;13926:24;;:28;;;:45;;;:49;13923:383;;14063:24;;:28;;;;;:38;;;;14103:45;;;;;14041:108;;-1:-1:-1;;;;;14041:21:20;;;;:108::i;:::-;14186:24;;:28;;;;;:38;;;;14245:45;;;;;14172:119;;-1:-1:-1;;;;;14172:119:20;;;;;;;;14234:8;;14172:119;:::i;:::-;;;;;;;;13923:383;14411:24;;:34;14447:16;;;;14375;;;;:22;;;:89;;-1:-1:-1;;;;;14375:35:20;;;;;:89::i;:::-;14556:24;;:28;;;;;:38;;;;14500:34;;14616:16;;;;;:23;14661:16;;;;14708:37;;14768:14;;;;14804:45;;;;14871:14;;;;14488:398;;-1:-1:-1;;;;;14488:398:20;;;;;;;;;;;;;14768:14;;14804:45;14871:14;-1:-1:-1;;;;;43121:32:39;;;;43103:51;;43185:2;43170:18;;43163:34;;;;-1:-1:-1;;;;;43233:32:39;;;;43228:2;43213:18;;43206:60;43297:2;43282:18;;43275:34;43340:3;43325:19;;43318:35;43253:3;43369:19;;43362:35;43090:3;43075:19;;42816:587;14488:398:20;;;;;;;;9199:5695;;9072:5822;;:::o;7466:628:5:-;7646:12;7674:7;7670:418;;;7701:10;:17;7722:1;7701:22;7697:286;;-1:-1:-1;;;;;1465:19:5;;;7908:60;;;;-1:-1:-1;;;7908:60:5;;43610:2:39;7908:60:5;;;43592:21:39;43649:2;43629:18;;;43622:30;43688:31;43668:18;;;43661:59;43737:18;;7908:60:5;43408:353:39;7908:60:5;-1:-1:-1;8003:10:5;7996:17;;7670:418;8044:33;8052:10;8064:12;8044:7;:33::i;17302:685:20:-;17433:4;17479:37;17519:21;:19;:21::i;:::-;17566:12;;;;17613:366;;;;;;;;17788:24;;:28;;;;;:38;;;-1:-1:-1;;;;;17788:52:20;;;;;17613:366;;17656:24;;:34;17613:366;;;;;;;;;17479:61;;-1:-1:-1;17566:12:20;;;;;:33;;17613:366;;17713:10;:47;;17751:9;17713:47;;;17726:15;;;;:22;-1:-1:-1;;;;;17713:47:20;;17613:366;;;;;;;;;17908:13;;;;;;;;17613:366;;;;;;;;-1:-1:-1;;;17951:13:20;;;;;17613:366;;;;;17566:414;;-1:-1:-1;;;;;;17566:414:20;;;;;;;44003:13:39;;43996:21;43989:29;17951:13:20;17566:414;;43971:48:39;44067:17;;;44061:24;-1:-1:-1;;;;;44057:50:39;44035:20;;;44028:80;44152:17;;;44146:24;44124:20;;;44117:54;44215:17;;;44209:24;44187:20;;;44180:54;44281:4;44269:17;;44263:24;44350:21;;44328:20;;;44321:51;44095:3;44420:17;;;44414:24;44410:33;44388:20;;;44381:63;43943:19;;17566:414:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1308:766:16:-;1377:4;1393:37;1433:21;:19;:21::i;:::-;1467:12;;;;-1:-1:-1;;;;1467:12:16;;-1:-1:-1;;;;;1467:12:16;;:17;1464:55;;-1:-1:-1;1507:1:16;;1308:766;-1:-1:-1;;1308:766:16:o;1464:55::-;1591:17;;;;:44;;-1:-1:-1;;;1591:44:16;;1575:13;;-1:-1:-1;;;;;1591:17:16;;:34;;:44;;1626:8;;1591:44;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1575:60;;1646:12;1676:8;-1:-1:-1;;;;;1661:33:16;;:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1646:50;;1842:14;545:4:11;1876:6:16;:12;;1886:2;1876:12;:40;;1915:1;1876:40;;;1907:4;1893:10;1897:6;1893:2;:10;:::i;:::-;1892:19;;;;:::i;:::-;1860:12;;:57;;;-1:-1:-1;;;1860:12:16;;-1:-1:-1;;;;;1860:12:16;:57;:::i;:::-;1859:90;;;;:::i;:::-;1842:107;-1:-1:-1;2047:20:16;2059:8;1842:107;2047:20;:::i;17993:164:20:-;18068:13;18124:1;18127:21;18144:3;18127:16;:21::i;:::-;18107:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;18093:57;;17993:164;;;;:::o;763:205:4:-;875:86;895:5;925:23;;;950:2;954:5;902:58;;;;;;;;;:::i;8616:540:5:-;8775:17;;:21;8771:379;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;-1:-1:-1;;;9119:20:5;;;;;;;;:::i;415:696:7:-;471:13;520:14;537:17;548:5;537:10;:17::i;:::-;557:1;537:21;520:38;;572:20;606:6;-1:-1:-1;;;;;595:18:7;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;595:18:7;-1:-1:-1;572:41:7;-1:-1:-1;733:28:7;;;749:2;733:28;788:280;-1:-1:-1;;819:5:7;-1:-1:-1;;;953:2:7;942:14;;937:30;819:5;924:44;1012:2;1003:11;;;-1:-1:-1;1032:21:7;788:280;1032:21;-1:-1:-1;1088:6:7;415:696;-1:-1:-1;;;415:696:7:o;9889:890:8:-;9942:7;;-1:-1:-1;;;10017:15:8;;10013:99;;-1:-1:-1;;;10052:15:8;;;-1:-1:-1;10095:2:8;10085:12;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;-1:-1:-1;10207:2:8;10197:12;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;-1:-1:-1;10319:2:8;10309:12;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;-1:-1:-1;10429:1:8;10419:11;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;-1:-1:-1;10538:1:8;10528:11;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;-1:-1:-1;10647:1:8;10637:11;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;10766:6;9889:890;-1:-1:-1;;9889:890:8:o;14:104:39:-;-1:-1:-1;;;;;80:31:39;68:44;;14:104::o;123:274::-;-1:-1:-1;;;;;315:32:39;;;;297:51;;379:2;364:18;;357:34;285:2;270:18;;123:274::o;402:114::-;486:4;479:5;475:16;468:5;465:27;455:55;;506:1;503;496:12;521:130;587:20;;616:29;587:20;616:29;:::i;:::-;521:130;;;:::o;656:243::-;713:6;766:2;754:9;745:7;741:23;737:32;734:52;;;782:1;779;772:12;734:52;821:9;808:23;840:29;863:5;840:29;:::i;904:159::-;971:20;;1031:6;1020:18;;1010:29;;1000:57;;1053:1;1050;1043:12;1068:184;1126:6;1179:2;1167:9;1158:7;1154:23;1150:32;1147:52;;;1195:1;1192;1185:12;1147:52;1218:28;1236:9;1218:28;:::i;1257:180::-;1316:6;1369:2;1357:9;1348:7;1344:23;1340:32;1337:52;;;1385:1;1382;1375:12;1337:52;-1:-1:-1;1408:23:39;;1257:180;-1:-1:-1;1257:180:39:o;1442:160::-;1506:5;1551:3;1542:6;1537:3;1533:16;1529:26;1526:46;;;1568:1;1565;1558:12;1526:46;-1:-1:-1;1590:6:39;1442:160;-1:-1:-1;1442:160:39:o;1607:127::-;1668:10;1663:3;1659:20;1656:1;1649:31;1699:4;1696:1;1689:15;1723:4;1720:1;1713:15;1739:255;1811:2;1805:9;1853:6;1841:19;;-1:-1:-1;;;;;1875:34:39;;1911:22;;;1872:62;1869:88;;;1937:18;;:::i;:::-;1973:2;1966:22;1739:255;:::o;2256:257::-;2328:4;2322:11;;;2360:17;;-1:-1:-1;;;;;2392:34:39;;2428:22;;;2389:62;2386:88;;;2454:18;;:::i;2518:253::-;2590:2;2584:9;2632:4;2620:17;;-1:-1:-1;;;;;2652:34:39;;2688:22;;;2649:62;2646:88;;;2714:18;;:::i;2776:253::-;2848:2;2842:9;2890:4;2878:17;;-1:-1:-1;;;;;2910:34:39;;2946:22;;;2907:62;2904:88;;;2972:18;;:::i;3034:275::-;3105:2;3099:9;3170:2;3151:13;;-1:-1:-1;;3147:27:39;3135:40;;-1:-1:-1;;;;;3190:34:39;;3226:22;;;3187:62;3184:88;;;3252:18;;:::i;:::-;3288:2;3281:22;3034:275;;-1:-1:-1;3034:275:39:o;3314:118::-;3400:5;3393:13;3386:21;3379:5;3376:32;3366:60;;3422:1;3419;3412:12;3437:128;3502:20;;3531:28;3502:20;3531:28;:::i;3570:131::-;-1:-1:-1;;;;;3645:31:39;;3635:42;;3625:70;;3691:1;3688;3681:12;3706:134;3774:20;;3803:31;3774:20;3803:31;:::i;3845:1542::-;3970:6;3978;4022:9;4013:7;4009:23;4052:3;4048:2;4044:12;4041:32;;;4069:1;4066;4059:12;4041:32;4109:9;4096:23;-1:-1:-1;;;;;4134:6:39;4131:30;4128:50;;;4174:1;4171;4164:12;4128:50;4197:71;4260:7;4251:6;4240:9;4236:22;4197:71;:::i;:::-;4187:81;;;4287:6;4327:2;4321;4317:7;4313:2;4309:16;4305:25;4302:45;;;4343:1;4340;4333:12;4302:45;4369:22;;:::i;:::-;4356:35;;4414;4445:2;4434:9;4430:18;4414:35;:::i;:::-;4407:5;4400:50;4482:35;4513:2;4502:9;4498:18;4482:35;:::i;:::-;4477:2;4470:5;4466:14;4459:59;4550:38;4584:2;4573:9;4569:18;4550:38;:::i;:::-;4545:2;4538:5;4534:14;4527:62;4649:3;4638:9;4634:19;4621:33;4616:2;4609:5;4605:14;4598:57;4716:3;4705:9;4701:19;4688:33;4682:3;4675:5;4671:15;4664:58;4783:3;4772:9;4768:19;4755:33;4749:3;4742:5;4738:15;4731:58;4850:3;4839:9;4835:19;4822:33;4816:3;4809:5;4805:15;4798:58;4875:3;4939:2;4928:9;4924:18;4911:32;4905:3;4898:5;4894:15;4887:57;4963:3;5026:2;5015:9;5011:18;4998:32;4993:2;4986:5;4982:14;4975:56;5050:3;5040:13;;5113:2;5102:9;5098:18;5085:32;5080:2;5073:5;5069:14;5062:56;;5137:3;5200:2;5189:9;5185:18;5172:32;5167:2;5160:5;5156:14;5149:56;5224:3;5214:13;;5287:2;5276:9;5272:18;5259:32;5254:2;5247:5;5243:14;5236:56;;5352:2;5341:9;5337:18;5324:32;5319:2;5312:5;5308:14;5301:56;;;5376:5;5366:15;;;3845:1542;;;;;:::o;5488:986::-;5566:12;;5462:13;5455:21;5443:34;;5630:4;5623:5;5619:16;5613:23;5645:45;5684:4;5679:3;5675:14;5661:12;5462:13;5455:21;5443:34;;5392:91;5645:45;;5738:4;5731:5;5727:16;5721:23;5753:50;5797:4;5792:3;5788:14;5772;5753:50;:::i;:::-;-1:-1:-1;5852:4:39;5841:16;;;5835:23;5819:14;;;5812:47;5908:4;5897:16;;;5891:23;5875:14;;;5868:47;5964:4;5953:16;;;5947:23;5931:14;;;5924:47;6020:4;6009:16;;;6003:23;5987:14;;;5980:47;6076:4;6065:16;;;6059:23;6043:14;;;6036:47;6102:6;6144:14;;;6138:21;6124:12;;;6117:43;6179:6;6221:14;;;6215:21;6201:12;;;6194:43;6256:6;6298:14;;;6292:21;6278:12;;;6271:43;6333:6;6375:14;;;6369:21;6355:12;;;6348:43;6410:6;6452:14;;;6446:21;6432:12;;6425:43;5488:986::o;6479:250::-;6665:3;6650:19;;6678:45;6654:9;6705:6;6678:45;:::i;7022:615::-;7108:6;7116;7169:2;7157:9;7148:7;7144:23;7140:32;7137:52;;;7185:1;7182;7175:12;7137:52;7225:9;7212:23;-1:-1:-1;;;;;7295:2:39;7287:6;7284:14;7281:34;;;7311:1;7308;7301:12;7281:34;7349:6;7338:9;7334:22;7324:32;;7394:7;7387:4;7383:2;7379:13;7375:27;7365:55;;7416:1;7413;7406:12;7365:55;7456:2;7443:16;7482:2;7474:6;7471:14;7468:34;;;7498:1;7495;7488:12;7468:34;7551:7;7546:2;7536:6;7533:1;7529:14;7525:2;7521:23;7517:32;7514:45;7511:65;;;7572:1;7569;7562:12;7511:65;7603:2;7595:11;;;;;7625:6;;-1:-1:-1;7022:615:39;;-1:-1:-1;;;;7022:615:39:o;7642:203::-;-1:-1:-1;;;;;7806:32:39;;;;7788:51;;7776:2;7761:18;;7642:203::o;8436:364::-;8526:6;8579:2;8567:9;8558:7;8554:23;8550:32;8547:52;;;8595:1;8592;8585:12;8547:52;8635:9;8622:23;-1:-1:-1;;;;;8660:6:39;8657:30;8654:50;;;8700:1;8697;8690:12;8654:50;8723:71;8786:7;8777:6;8766:9;8762:22;8723:71;:::i;8805:247::-;8864:6;8917:2;8905:9;8896:7;8892:23;8888:32;8885:52;;;8933:1;8930;8923:12;8885:52;8972:9;8959:23;8991:31;9016:5;8991:31;:::i;9057:173::-;9125:20;;-1:-1:-1;;;;;9174:31:39;;9164:42;;9154:70;;9220:1;9217;9210:12;9235:186;9294:6;9347:2;9335:9;9326:7;9322:23;9318:32;9315:52;;;9363:1;9360;9353:12;9315:52;9386:29;9405:9;9386:29;:::i;9426:393::-;9518:6;9571:2;9559:9;9550:7;9546:23;9542:32;9539:52;;;9587:1;9584;9577:12;9539:52;9627:9;9614:23;-1:-1:-1;;;;;9652:6:39;9649:30;9646:50;;;9692:1;9689;9682:12;9646:50;9715:22;;9771:3;9753:16;;;9749:26;9746:46;;;9788:1;9785;9778:12;9824:388;9911:6;9964:2;9952:9;9943:7;9939:23;9935:32;9932:52;;;9980:1;9977;9970:12;9932:52;10020:9;10007:23;-1:-1:-1;;;;;10045:6:39;10042:30;10039:50;;;10085:1;10082;10075:12;10039:50;10108:22;;10164:3;10146:16;;;10142:26;10139:46;;;10181:1;10178;10171:12;10773:336;10975:2;10957:21;;;11014:2;10994:18;;;10987:30;-1:-1:-1;;;11048:2:39;11033:18;;11026:42;11100:2;11085:18;;10773:336::o;12264:184::-;12334:6;12387:2;12375:9;12366:7;12362:23;12358:32;12355:52;;;12403:1;12400;12393:12;12355:52;-1:-1:-1;12426:16:39;;12264:184;-1:-1:-1;12264:184:39:o;12453:578::-;12579:4;12585:6;12645:11;12632:25;12739:2;12735:7;12724:8;12708:14;12704:29;12700:43;12680:18;12676:68;12666:96;;12758:1;12755;12748:12;12666:96;12785:33;;12837:20;;;-1:-1:-1;;;;;;12869:30:39;;12866:50;;;12912:1;12909;12902:12;12866:50;12945:4;12933:17;;-1:-1:-1;12996:1:39;12992:14;;;12976;12972:35;12962:46;;12959:66;;;13021:1;13018;13011:12;12959:66;12453:578;;;;;:::o;13036:127::-;13097:10;13092:3;13088:20;13085:1;13078:31;13128:4;13125:1;13118:15;13152:4;13149:1;13142:15;13168:331;13267:4;13325:11;13312:25;13419:3;13415:8;13404;13388:14;13384:29;13380:44;13360:18;13356:69;13346:97;;13439:1;13436;13429:12;13346:97;13460:33;;;;;13168:331;-1:-1:-1;;13168:331:39:o;13504:521::-;13581:4;13587:6;13647:11;13634:25;13741:2;13737:7;13726:8;13710:14;13706:29;13702:43;13682:18;13678:68;13668:96;;13760:1;13757;13750:12;13668:96;13787:33;;13839:20;;;-1:-1:-1;;;;;;13871:30:39;;13868:50;;;13914:1;13911;13904:12;13868:50;13947:4;13935:17;;-1:-1:-1;13978:14:39;13974:27;;;13964:38;;13961:58;;;14015:1;14012;14005:12;14030:271;14213:6;14205;14200:3;14187:33;14169:3;14239:16;;14264:13;;;14239:16;14030:271;-1:-1:-1;14030:271:39:o;14649:127::-;14710:10;14705:3;14701:20;14698:1;14691:31;14741:4;14738:1;14731:15;14765:4;14762:1;14755:15;14781:135;14820:3;14841:17;;;14838:43;;14861:18;;:::i;:::-;-1:-1:-1;14908:1:39;14897:13;;14781:135::o;14921:128::-;14988:9;;;15009:11;;;15006:37;;;15023:18;;:::i;15767:354::-;15969:2;15951:21;;;16008:2;15988:18;;;15981:30;16047:32;16042:2;16027:18;;16020:60;16112:2;16097:18;;15767:354::o;16126:306::-;-1:-1:-1;;;;;16216:25:39;16235:5;16216:25;:::i;:::-;16212:51;16207:3;16200:64;16312:4;16305:5;16301:16;16288:30;16327:33;16352:7;16327:33;:::i;:::-;-1:-1:-1;;;;;16392:33:39;16385:4;16376:14;;;;16369:57;;;;-1:-1:-1;16126:306:39:o;16437:542::-;16529:5;16536:6;16596:3;16583:17;16682:2;16678:7;16667:8;16651:14;16647:29;16643:43;16623:18;16619:68;16609:96;;16701:1;16698;16691:12;16609:96;16729:33;;16833:4;16820:18;;;-1:-1:-1;16781:21:39;;-1:-1:-1;;;;;;16850:30:39;;16847:50;;;16893:1;16890;16883:12;16847:50;16947:6;16944:1;16940:14;16924;16920:35;16913:5;16909:47;16906:67;;;16969:1;16966;16959:12;16984:266;17072:6;17067:3;17060:19;17124:6;17117:5;17110:4;17105:3;17101:14;17088:43;-1:-1:-1;17176:1:39;17151:16;;;17169:4;17147:27;;;17140:38;;;;17232:2;17211:15;;;-1:-1:-1;;17207:29:39;17198:39;;;17194:50;;16984:266::o;17255:1874::-;17377:6;17372:3;17365:19;17347:3;17403:4;17444:2;17439:3;17435:12;17469:11;17496;17489:18;;17546:6;17543:1;17539:14;17532:5;17528:26;17516:38;;17577:5;17600:1;17610:1493;17624:6;17621:1;17618:13;17610:1493;;;17695:5;17689:4;17685:16;17680:3;17673:29;17754:6;17741:20;17844:3;17840:8;17832:5;17816:14;17812:26;17808:41;17788:18;17784:66;17774:94;;17864:1;17861;17854:12;17774:94;17896:30;;17949:4;17981:21;;18015:33;17981:21;18015:33;:::i;:::-;-1:-1:-1;;;;;18116:16:39;;;18103:30;;18174:16;;;18161:30;;18204:33;18161:30;18204:33;:::i;:::-;18272:16;18257:13;;;18250:39;18312:4;18329:71;18386:13;;;18368:16;;;18329:71;:::i;:::-;;18423:4;18494:2;18485:7;18481:16;18468:30;18585:2;18581:7;18571;18555:14;18551:28;18547:42;18525:20;18521:69;18511:97;;18604:1;18601;18594:12;18511:97;18636:34;;;18748:16;;;;-1:-1:-1;18699:21:39;-1:-1:-1;;;;;18780:32:39;;18777:52;;;18825:1;18822;18815:12;18777:52;18878:8;18862:14;18858:29;18849:7;18845:43;18842:63;;;18901:1;18898;18891:12;18842:63;18940:2;18935;18929:4;18925:13;18918:25;18964:59;19019:2;19013:4;19009:13;18999:8;18990:7;18964:59;:::i;:::-;19081:12;;;;18956:67;-1:-1:-1;;;19046:15:39;;;;-1:-1:-1;;17646:1:39;17639:9;17610:1493;;;-1:-1:-1;19119:4:39;;17255:1874;-1:-1:-1;;;;;;;17255:1874:39:o;19134:1382::-;19366:4;19395:3;19425:2;19414:9;19407:21;19463:6;19450:20;19479:31;19504:5;19479:31;:::i;:::-;-1:-1:-1;;;;;19584:14:39;;;19564:18;;;19557:42;;;;19648:4;19636:17;;19623:31;;19663:33;19623:31;19663:33;:::i;:::-;19733:16;;;19727:3;19712:19;;19705:45;19799:2;19787:15;;19774:29;;19812:33;19774:29;19812:33;:::i;:::-;19882:16;;;;19876:3;19861:19;;19854:45;-1:-1:-1;19961:2:39;19949:15;;19936:29;19930:3;19915:19;;19908:58;19975:78;20048:3;20033:19;;20026:4;20014:17;;19975:78;:::i;:::-;20062;20135:3;20124:9;20120:19;20113:4;20105:6;20101:17;20062:78;:::i;:::-;20183:93;20268:6;20260;20256:19;20248:6;20183:93;:::i;:::-;20313:6;20307:3;20296:9;20292:19;20285:35;20337:108;20440:3;20429:9;20425:19;20411:12;20397;20337:108;:::i;:::-;20329:116;;;;20454:56;20504:4;20493:9;20489:20;20481:6;20454:56;:::i;20521:132::-;20597:13;;20619:28;20597:13;20619:28;:::i;20658:138::-;20737:13;;20759:31;20737:13;20759:31;:::i;20801:1164::-;20897:6;20950:3;20938:9;20929:7;20925:23;20921:33;20918:53;;;20967:1;20964;20957:12;20918:53;20993:22;;:::i;:::-;21038:37;21065:9;21038:37;:::i;:::-;21031:5;21024:52;21108:46;21150:2;21139:9;21135:18;21108:46;:::i;:::-;21103:2;21096:5;21092:14;21085:70;21187:49;21232:2;21221:9;21217:18;21187:49;:::i;:::-;21182:2;21171:14;;21164:73;21290:2;21275:18;;;21269:25;21253:14;;;21246:49;21349:3;21334:19;;;21328:26;21311:15;;;21304:51;21409:3;21394:19;;;21388:26;21371:15;;;21364:51;21469:3;21454:19;;;21448:26;21431:15;;;21424:51;21529:3;21514:19;;;21508:26;21491:15;;;21484:51;21554:3;21595:18;;;21589:25;21573:14;;;21566:49;21634:3;21675:18;;;21669:25;21653:14;;;21646:49;21714:3;21755:18;;;21749:25;21733:14;;;21726:49;21794:3;21835:18;;;21829:25;21813:14;;;21806:49;21874:3;21915:18;;;21909:25;21893:14;;;21886:49;;;;-1:-1:-1;21175:5:39;20801:1164;-1:-1:-1;20801:1164:39:o;21970:365::-;22028:5;22076:4;22064:9;22059:3;22055:19;22051:30;22048:50;;;22094:1;22091;22084:12;22048:50;22116:22;;:::i;:::-;22107:31;;22161:29;22180:9;22161:29;:::i;:::-;22154:5;22147:44;22243:2;22232:9;22228:18;22215:32;22256:33;22281:7;22256:33;:::i;:::-;22316:2;22305:14;;22298:31;22309:5;21970:365;-1:-1:-1;;21970:365:39:o;22340:2274::-;22432:5;-1:-1:-1;;;;;22503:2:39;22495:6;22492:14;22489:40;;;22509:18;;:::i;:::-;22555:6;22552:1;22548:14;22581:4;22603:28;22627:2;22623;22619:11;22603:28;:::i;:::-;22665:21;;;22594:37;-1:-1:-1;22739:15:39;;;;22702:14;;;22766:15;;;22763:35;;;22794:1;22791;22784:12;22763:35;22818:6;22833:1775;22849:6;22844:3;22841:15;22833:1775;;;22935:3;22922:17;22971:2;22958:11;22955:19;22952:109;;;23015:1;23044:2;23040;23033:14;22952:109;23084:24;;23142:4;23128:12;;;23124:23;23121:113;;;23188:1;23217:2;23213;23206:14;23121:113;23260:22;;:::i;:::-;23323:2;23310:16;23339:33;23364:7;23339:33;:::i;:::-;23385:22;;23448:11;;;23435:25;23473:33;23435:25;23473:33;:::i;:::-;23526:14;;;23519:31;23573:2;23611:47;23654:3;23641:11;;;23611:47;:::i;:::-;23595:14;;;23588:71;23709:4;23701:13;;23688:27;23731:16;;;23728:106;;;23788:1;23817:2;23813;23806:14;23728:106;23865:8;23861:2;23857:17;23847:27;;;23898:4;23943:3;23937;23933:2;23929:12;23925:22;23915:123;;23990:1;24020:3;24015;24008:16;23915:123;24075:2;24062:16;24102:2;24097:3;24094:11;24091:37;;;24108:18;;:::i;:::-;24156:53;24180:13;;;-1:-1:-1;;24176:27:39;24172:36;;24156:53;:::i;:::-;24141:68;;24238:3;24229:7;24222:20;24284:3;24279:2;24273:3;24269:2;24265:12;24261:21;24258:30;24255:123;;;24330:1;24360:3;24355;24348:16;24255:123;24435:3;24430:2;24426;24422:11;24417:2;24408:7;24404:16;24391:48;24487:1;24463:17;;;24459:26;;24452:37;24520:4;24509:16;;24502:33;24548:18;;-1:-1:-1;24586:12:39;;;;22866;;22833:1775;;;22837:3;;;;;22340:2274;;;;;:::o;24619:270::-;24686:5;24739:3;24732:4;24724:6;24720:17;24716:27;24706:55;;24757:1;24754;24747:12;24706:55;24779:104;24879:3;24870:6;24857:20;24850:4;24842:6;24838:17;24779:104;:::i;24894:1432::-;25004:9;25058:5;25042:14;25038:26;25084:6;25080:2;25076:15;25073:35;;;25104:1;25101;25094:12;25073:35;25132:22;;:::i;:::-;25174:4;25170:2;25166:13;25163:33;;;25192:1;25189;25182:12;25163:33;25220:22;;:::i;:::-;25279:5;25266:19;25294:33;25319:7;25294:33;:::i;:::-;25336:24;;25394:4;-1:-1:-1;;25376:16:39;;25372:27;25369:47;;;25412:1;25409;25402:12;25369:47;25440:22;;:::i;:::-;25425:37;;25510:2;25503:5;25499:14;25486:28;25523:33;25548:7;25523:33;:::i;:::-;25565:24;;25637:4;25626:16;;25613:30;25652:33;25613:30;25652:33;:::i;:::-;25719:7;25714:2;25705:7;25701:16;25694:33;;25787:4;25780:5;25776:16;25763:30;25756:4;25747:7;25743:18;25736:58;25828:7;25823:2;25814:7;25810:16;25803:33;25861:7;25852;25845:24;;25903:63;25951:14;25944:4;25937:5;25933:16;25903:63;:::i;:::-;25898:2;25889:7;25885:16;25878:89;26003:62;26050:14;26044:3;26037:5;26033:15;26003:62;:::i;:::-;25996:4;25987:7;25983:18;25976:90;26113:3;26106:5;26102:15;26089:29;26075:43;;-1:-1:-1;;;;;26133:6:39;26130:30;26127:50;;;26173:1;26170;26163:12;26127:50;26213:77;26275:14;26266:6;26259:5;26255:18;26213:77;:::i;:::-;26206:4;26193:18;;26186:105;26197:7;24894:1432;-1:-1:-1;;;24894:1432:39:o;30170:522::-;30270:6;30265:3;30258:19;30240:3;30296:4;30325:2;30320:3;30316:12;30309:19;;30351:5;30374:1;30384:283;30398:6;30395:1;30392:13;30384:283;;;30475:6;30462:20;30495:33;30520:7;30495:33;:::i;:::-;-1:-1:-1;;;;;30553:33:39;30541:46;;30607:12;;;;30642:15;;;;30583:1;30413:9;30384:283;;;-1:-1:-1;30683:3:39;;30170:522;-1:-1:-1;;;;;30170:522:39:o;30697:1803::-;30890:2;30879:9;30872:21;30902:62;30960:2;30949:9;30945:18;30919:24;30936:6;30919:24;:::i;:::-;8234:4;8223:16;8211:29;;8167:75;30902:62;30853:4;30993:34;31023:2;31015:6;31011:15;30993:34;:::i;:::-;6810:6;6799:18;;31083:2;31068:18;;6787:31;31036:51;31118:34;31148:2;31140:6;31136:15;31118:34;:::i;:::-;6810:6;6799:18;;31210:2;31195:18;;6787:31;31161:53;31245:35;31276:2;31268:6;31264:15;31245:35;:::i;:::-;31289:55;31339:3;31328:9;31324:19;31308:14;31289:55;:::i;:::-;;31375:36;31406:3;31398:6;31394:16;31375:36;:::i;:::-;31420:55;31470:3;31459:9;31455:19;31439:14;31420:55;:::i;:::-;;31506:36;31537:3;31529:6;31525:16;31506:36;:::i;:::-;31551:55;31601:3;31590:9;31586:19;31570:14;31551:55;:::i;:::-;;31637:36;31668:3;31660:6;31656:16;31637:36;:::i;:::-;31682:55;31732:3;31721:9;31717:19;31701:14;31682:55;:::i;:::-;;31768:36;31799:3;31791:6;31787:16;31768:36;:::i;:::-;31823:3;31835:54;31885:2;31874:9;31870:18;31854:14;31835:54;:::i;:::-;31920:35;31951:2;31943:6;31939:15;31920:35;:::i;:::-;31898:57;;;31974:3;31986:54;32036:2;32025:9;32021:18;32005:14;31986:54;:::i;:::-;32071:35;32102:2;32094:6;32090:15;32071:35;:::i;:::-;32049:57;;;32125:3;32137:54;32187:2;32176:9;32172:18;32156:14;-1:-1:-1;;;;;7916:31:39;7904:44;;7850:104;32137:54;32236:89;32321:2;32313:6;32309:15;32301:6;32236:89;:::i;:::-;32344:6;32366:18;;;32359:30;32200:125;-1:-1:-1;32200:125:39;-1:-1:-1;32406:88:39;32489:3;32474:19;;32200:125;;32406:88;:::i;:::-;32398:96;30697:1803;-1:-1:-1;;;;;30697:1803:39:o;32505:235::-;32593:6;32646:2;32634:9;32625:7;32621:23;32617:32;32614:52;;;32662:1;32659;32652:12;32614:52;32685:49;32726:7;32715:9;32685:49;:::i;32745:312::-;32925:9;32962:89;33036:14;33028:6;33021:5;32962:89;:::i;33062:204::-;33143:12;;-1:-1:-1;;;;;33139:38:39;33127:51;;33231:4;33220:16;;;33214:23;-1:-1:-1;;;;;33210:49:39;33194:14;;33187:73;33062:204::o;33271:250::-;33356:1;33366:113;33380:6;33377:1;33374:13;33366:113;;;33456:11;;;33450:18;33437:11;;;33430:39;33402:2;33395:10;33366:113;;;-1:-1:-1;;33513:1:39;33495:16;;33488:27;33271:250::o;33526:270::-;33567:3;33605:5;33599:12;33632:6;33627:3;33620:19;33648:76;33717:6;33710:4;33705:3;33701:14;33694:4;33687:5;33683:16;33648:76;:::i;:::-;33778:2;33757:15;-1:-1:-1;;33753:29:39;33744:39;;;;33785:4;33740:50;;33526:270;-1:-1:-1;;33526:270:39:o;33801:1096::-;33867:3;33905:5;33899:12;33932:6;33927:3;33920:19;33958:4;33999:2;33994:3;33990:12;34024:11;34051;34044:18;;34101:6;34098:1;34094:14;34087:5;34083:26;34071:38;;34143:2;34136:5;34132:14;34164:1;34174:697;34188:6;34185:1;34182:13;34174:697;;;34249:16;;;34237:29;;34289:13;;34401:9;;-1:-1:-1;;;;;34397:18:39;;;34384:32;;34461:11;;;34455:18;34451:27;34436:13;;;34429:50;34502:4;34545:11;;;34539:18;34325:4;;34502;34570:58;34614:13;;;34539:18;34570:58;:::i;:::-;;;34677:4;34673:2;34669:13;34663:20;34641:42;;34720:2;34713:4;34707;34703:15;34696:27;34744:47;34787:2;34781:4;34777:13;34761:14;34744:47;:::i;:::-;34849:12;;;;34736:55;-1:-1:-1;;;34814:15:39;;;;34210:1;34203:9;34174:697;;34902:1202;35161:3;35173:21;;;35213:13;;35304:9;;-1:-1:-1;;;;;35300:18:39;;;35280;;;35273:46;;;;35362:4;35354:13;;;35348:20;35409:19;;35405:28;;35399:3;35384:19;;35377:57;35481:23;;;35475:30;35471:39;;;35465:3;35450:19;;35443:68;35572:4;35554:23;;;35548:30;35542:3;35527:19;;35520:59;35616:17;;35610:24;35132:4;;35643:66;35704:3;35689:19;;35610:24;35643:66;:::i;:::-;;35758:4;35750:6;35746:17;35740:24;35773:66;35834:3;35823:9;35819:19;35803:14;35773:66;:::i;:::-;;35888:4;35880:6;35876:17;35870:24;35931:6;35925:3;35914:9;35910:19;35903:35;35955:78;36028:3;36017:9;36013:19;35997:14;35955:78;:::i;:::-;35947:86;;;36042:56;36092:4;36081:9;36077:20;36069:6;36042:56;:::i;36514:245::-;36581:6;36634:2;36622:9;36613:7;36609:23;36605:32;36602:52;;;36650:1;36647;36640:12;36602:52;36682:9;36676:16;36701:28;36723:5;36701:28;:::i;38257:525::-;38510:3;38499:9;38492:22;38473:4;38537:45;38577:3;38566:9;38562:19;38554:6;38537:45;:::i;:::-;38618:6;38613:2;38602:9;38598:18;38591:34;38673:9;38665:6;38661:22;38656:2;38645:9;38641:18;38634:50;38701:32;38726:6;38718;38701:32;:::i;:::-;38693:40;;;38769:6;38764:2;38753:9;38749:18;38742:34;38257:525;;;;;;;:::o;38787:219::-;38936:2;38925:9;38918:21;38899:4;38956:44;38996:2;38985:9;38981:18;38973:6;38956:44;:::i;39011:375::-;-1:-1:-1;;;;;39269:15:39;;;39251:34;;39321:15;;;;39316:2;39301:18;;39294:43;39368:2;39353:18;;39346:34;;;;39201:2;39186:18;;39011:375::o;39802:290::-;39979:2;39968:9;39961:21;39942:4;39999:44;40039:2;40028:9;40024:18;40016:6;39999:44;:::i;:::-;39991:52;;40079:6;40074:2;40063:9;40059:18;40052:34;39802:290;;;;;:::o;40097:125::-;40162:9;;;40183:10;;;40180:36;;;40196:18;;:::i;40480:244::-;40637:2;40626:9;40619:21;40600:4;40657:61;40714:2;40703:9;40699:18;40691:6;40683;40657:61;:::i;40729:168::-;40802:9;;;40833;;40850:15;;;40844:22;;40830:37;40820:71;;40871:18;;:::i;41309:287::-;41438:3;41476:6;41470:13;41492:66;41551:6;41546:3;41539:4;41531:6;41527:17;41492:66;:::i;41733:217::-;41773:1;41799;41789:132;;41843:10;41838:3;41834:20;41831:1;41824:31;41878:4;41875:1;41868:15;41906:4;41903:1;41896:15;41789:132;-1:-1:-1;41935:9:39;;41733:217::o;42315:496::-;42494:3;42532:6;42526:13;42548:66;42607:6;42602:3;42595:4;42587:6;42583:17;42548:66;:::i;:::-;42677:13;;42636:16;;;;42699:70;42677:13;42636:16;42746:4;42734:17;;42699:70;:::i;:::-;42785:20;;42315:496;-1:-1:-1;;;;42315:496:39:o;44455:247::-;44523:6;44576:2;44564:9;44555:7;44551:23;44547:32;44544:52;;;44592:1;44589;44582:12;44544:52;44624:9;44618:16;44643:29;44666:5;44643:29;:::i;44707:422::-;44796:1;44839:5;44796:1;44853:270;44874:7;44864:8;44861:21;44853:270;;;44933:4;44929:1;44925:6;44921:17;44915:4;44912:27;44909:53;;;44942:18;;:::i;:::-;44992:7;44982:8;44978:22;44975:55;;;45012:16;;;;44975:55;45091:22;;;;45051:15;;;;44853:270;;;44857:3;44707:422;;;;;:::o;45134:806::-;45183:5;45213:8;45203:80;;-1:-1:-1;45254:1:39;45268:5;;45203:80;45302:4;45292:76;;-1:-1:-1;45339:1:39;45353:5;;45292:76;45384:4;45402:1;45397:59;;;;45470:1;45465:130;;;;45377:218;;45397:59;45427:1;45418:10;;45441:5;;;45465:130;45502:3;45492:8;45489:17;45486:43;;;45509:18;;:::i;:::-;-1:-1:-1;;45565:1:39;45551:16;;45580:5;;45377:218;;45679:2;45669:8;45666:16;45660:3;45654:4;45651:13;45647:36;45641:2;45631:8;45628:16;45623:2;45617:4;45614:12;45610:35;45607:77;45604:159;;;-1:-1:-1;45716:19:39;;;45748:5;;45604:159;45795:34;45820:8;45814:4;45795:34;:::i;:::-;45865:6;45861:1;45857:6;45853:19;45844:7;45841:32;45838:58;;;45876:18;;:::i;:::-;45914:20;;45134:806;-1:-1:-1;;;45134:806:39:o;45945:140::-;46003:5;46032:47;46073:4;46063:8;46059:19;46053:4;46032:47;:::i","linkReferences":{}},"methodIdentifiers":{"addRelays(address[])":"40d925b1","adminMultiSig()":"45c6a874","arbitrumGasOracle()":"76a13636","communityVault()":"53e97868","configure((uint8,uint16,uint16,address,address,address,address,address,address,uint112,address[]))":"b024d616","dxblToken()":"dd81eb98","fill(((address,(address,address,uint256)),(uint112,address),(uint112,address),(address,address,(uint112,address),bytes)[]),(bool,bool,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))":"3564209b","initialize((uint8,uint16,uint16,address,address,address,address,address,address,uint112,address[]))":"ec71a08c","minBpsRate()":"370fb45b","minFeeUSD()":"4e0bb8cc","pause()":"8456cb59","removeRelay(address)":"cd151e9a","resume()":"046f7da2","revshareSplitRatio()":"52ac8616","selfSwap((address,(uint112,address),(uint112,address),(address,address,(uint112,address),bytes)[]))":"c3d718a4","setArbitrumGasOracle(address)":"f3390c3a","setCommunityVault(address)":"d8544cf3","setMinBpsRate(uint16)":"24b40c92","setMinFeeUSD(uint112)":"8c47ea8e","setRevshareSplitRatio(uint8)":"1725d82f","setStdBpsRate(uint16)":"5d745b8f","setStdGasAdjustmentContract(address)":"805ecef8","setTreasury(address)":"f0f44260","stdBpsRate()":"bb471234","stdGasAdjustmentContract()":"e287aec7","swap(((address,(address,address,uint256)),(uint112,address),(uint112,address),(address,address,(uint112,address),bytes)[]))":"602dd026","treasury()":"61d027b3","withdraw(uint256)":"2e1a7d4d"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AffiliatePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"ArbGasOracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"stdRate\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"minRate\",\"type\":\"uint32\"}],\"name\":\"ChangedBpsRates\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"split\",\"type\":\"uint8\"}],\"name\":\"ChangedRevshareSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRevshare\",\"type\":\"address\"}],\"name\":\"ChangedRevshareVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"revshareSplitRatio\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"stdBpsRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minBpsRate\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"adminMultiSig\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"communityVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dxblToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"arbGasOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stdGasAdjustment\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"minFeeUSD\",\"type\":\"uint112\"},{\"internalType\":\"address[]\",\"name\":\"initialRelays\",\"type\":\"address[]\"}],\"indexed\":false,\"internalType\":\"struct DexibleStorage.DexibleConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"ConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientGasFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newRate\",\"type\":\"uint16\"}],\"name\":\"MinBpsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"newMin\",\"type\":\"uint112\"}],\"name\":\"MinFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaidGasFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"}],\"name\":\"RelayAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"}],\"name\":\"RelayRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Resumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newRate\",\"type\":\"uint8\"}],\"name\":\"SplitRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newRate\",\"type\":\"uint16\"}],\"name\":\"StdBpsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"StdGasAdjustmentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasFeePaid\",\"type\":\"uint256\"}],\"name\":\"SwapFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"affiliateFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dexibleFee\",\"type\":\"uint256\"}],\"name\":\"SwapSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"VaultChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrewETH\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"relays\",\"type\":\"address[]\"}],\"name\":\"addRelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminMultiSig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrumGasOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"revshareSplitRatio\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"stdBpsRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minBpsRate\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"adminMultiSig\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"communityVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dxblToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"arbGasOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stdGasAdjustment\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"minFeeUSD\",\"type\":\"uint112\"},{\"internalType\":\"address[]\",\"name\":\"initialRelays\",\"type\":\"address[]\"}],\"internalType\":\"struct DexibleStorage.DexibleConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dxblToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"affiliatePortion\",\"type\":\"uint256\"}],\"internalType\":\"struct ExecutionTypes.FeeDetails\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct ExecutionTypes.ExecutionRequest\",\"name\":\"executionRequest\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct TokenTypes.TokenAmount\",\"name\":\"tokenIn\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct TokenTypes.TokenAmount\",\"name\":\"tokenOut\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct TokenTypes.TokenAmount\",\"name\":\"routeAmount\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"routerData\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapTypes.RouterRequest[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SwapTypes.SwapRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"feeIsInput\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSelfSwap\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"preSwapVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toProtocol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toRevshare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outToTrader\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bpsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeGasAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preDXBLBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputAmountDue\",\"type\":\"uint256\"}],\"internalType\":\"struct SwapHandler.SwapMeta\",\"name\":\"meta\",\"type\":\"tuple\"}],\"name\":\"fill\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"feeIsInput\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSelfSwap\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"preSwapVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toProtocol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toRevshare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outToTrader\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bpsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeGasAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preDXBLBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputAmountDue\",\"type\":\"uint256\"}],\"internalType\":\"struct SwapHandler.SwapMeta\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"revshareSplitRatio\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"stdBpsRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minBpsRate\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"adminMultiSig\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"communityVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dxblToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"arbGasOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stdGasAdjustment\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"minFeeUSD\",\"type\":\"uint112\"},{\"internalType\":\"address[]\",\"name\":\"initialRelays\",\"type\":\"address[]\"}],\"internalType\":\"struct DexibleStorage.DexibleConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBpsRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFeeUSD\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"}],\"name\":\"removeRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revshareSplitRatio\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct TokenTypes.TokenAmount\",\"name\":\"tokenIn\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct TokenTypes.TokenAmount\",\"name\":\"tokenOut\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct TokenTypes.TokenAmount\",\"name\":\"routeAmount\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"routerData\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapTypes.RouterRequest[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SwapTypes.SelfSwap\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"selfSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IArbitrumGasOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setArbitrumGasOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunityVault\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"setCommunityVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"setMinBpsRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"minFee\",\"type\":\"uint112\"}],\"name\":\"setMinFeeUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bps\",\"type\":\"uint8\"}],\"name\":\"setRevshareSplitRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"setStdBpsRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"con\",\"type\":\"address\"}],\"name\":\"setStdGasAdjustmentContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stdBpsRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stdGasAdjustmentContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"affiliatePortion\",\"type\":\"uint256\"}],\"internalType\":\"struct ExecutionTypes.FeeDetails\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct ExecutionTypes.ExecutionRequest\",\"name\":\"executionRequest\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct TokenTypes.TokenAmount\",\"name\":\"tokenIn\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct TokenTypes.TokenAmount\",\"name\":\"tokenOut\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct TokenTypes.TokenAmount\",\"name\":\"routeAmount\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"routerData\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapTypes.RouterRequest[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SwapTypes.SwapRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/dexible/Dexible.sol\":\"Dexible\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[\":@openzeppelin/=src/@openzeppelin/\",\":contracts/common/=src/common/\",\":contracts/dexible/=src/dexible/\",\":contracts/token/=src/token/\",\":contracts/vault/=src/vault/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=src/hardhat/\"]},\"sources\":{\"src/@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"src/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"src/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"src/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"src/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"src/@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"src/@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"src/@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"src/common/ExecutionTypes.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\nimport \\\"./TokenTypes.sol\\\";\\n\\n/**\\n * These types only relevant for relay-based submissions through protocol\\n */\\nlibrary ExecutionTypes {\\n\\n    /**\\n     * Basic fee information which includes any payments to be made to affiliates.\\n     */\\n    struct FeeDetails {\\n\\n        //the fee token to pay\\n        IERC20 feeToken;\\n\\n        //affiliate address to pay affiliate fee\\n        address affiliate;\\n\\n        //fee to pay affiliate\\n        uint affiliatePortion;\\n    }\\n\\n    /**\\n     * Shared information in every execution request. This will evolve \\n     * over time to support signatures and privacy proofs as the protocol\\n     * decentralizes\\n     */\\n    struct ExecutionRequest {\\n        //account requesting this execution\\n        address requester;\\n\\n        //fees info\\n        FeeDetails fee;\\n    }\\n}\",\"keccak256\":\"0x4906aad1bdf7e7dcf0f242201693f26990779c50d21da95e98412121fc9d8ff7\",\"license\":\"Unlicense\"},\"src/common/IPausable.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\ninterface IPausable {\\n\\n    event Paused();\\n    event Resumed();\\n\\n    function pause() external;\\n    function resume() external;\\n}\",\"keccak256\":\"0x389b2da724bea04ecddbb89ab8cf2ac833724649ae1c95be88a5e15fc0737968\",\"license\":\"Unlicense\"},\"src/common/LibConstants.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\n/**\\n * Constant values used elsewhere\\n */\\nlibrary LibConstants {\\n\\n    \\n    \\n    uint16 constant HOUR = 3600;\\n    uint24 constant DAY = 86400;\\n\\n    //storage and calldata requirements significantly higher when using more than \\n    //6decs for USD price precision\\n    uint constant USD_PRECISION = 1e6;\\n\\n    //1_000_000 as a 6-decimal number\\n    uint constant MM_VOLUME = 1e12;\\n\\n    //when doing asset-related math, increase precision accordingly.\\n    uint constant PRICE_PRECISION = 1e30;\\n\\n    //========================================================================\\n    // Assignable roles for role-managed contracts\\n    //========================================================================\\n\\n    //allowed to add relays and other role managers\\n    string public constant ROLE_MGR = \\\"ROLE_MANAGER\\\";\\n\\n    //allowed to submit execution requests\\n    string public constant RELAY = \\\"RELAY\\\";\\n\\n    //========================================================================\\n    // Gas adjustment types\\n    //========================================================================\\n    string public constant SWAP_FAILURE = \\\"SWAP_FAILURE\\\";\\n    string public constant SWAP_SUCCESS = \\\"SWAP_SUCCESS\\\";\\n\\n}\",\"keccak256\":\"0x2f89aba5ce205ae863fa00b2ddf515b210fc4e70885ee46da3a4b22ae8101b8c\",\"license\":\"Unlicense\"},\"src/common/SwapTypes.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\nimport \\\"./TokenTypes.sol\\\";\\nimport \\\"./ExecutionTypes.sol\\\";\\n\\n/**\\n * Swap data strutures to submit for execution\\n */\\nlibrary SwapTypes {\\n\\n    /**\\n     * Individual router called to execute some action. Only approved \\n     * router addresses will execute successfully\\n     */\\n    struct RouterRequest {\\n        //router contract that handles the specific route data\\n        address router;\\n\\n        //any spend allowance approval required\\n        address spender;\\n\\n        //the amount to send to the router\\n        TokenTypes.TokenAmount routeAmount;\\n\\n        //the data to use for calling the router\\n        bytes routerData;\\n    }\\n\\n    /**\\n     * Swap request that is restricted to only relay-based executions. This prevents\\n     * applying discounts through sybil attacks and affiliate addresses.\\n     */\\n    struct SwapRequest {\\n\\n        //general execution request details\\n        ExecutionTypes.ExecutionRequest executionRequest;\\n\\n        //input token and amount\\n        TokenTypes.TokenAmount tokenIn;\\n\\n        //expected min output and amount\\n        TokenTypes.TokenAmount tokenOut;\\n\\n        //array of routes to call to perform swaps\\n        RouterRequest[] routes;\\n    }\\n\\n    /**\\n     * This is used when the caller is also the trader.\\n     */\\n    struct SelfSwap {\\n        //fee token paying in\\n        IERC20 feeToken;\\n\\n        //input token and full amount\\n        /*\\n         * NOTE: it's possible to swap native asset vs. wrapped asset when self-submitting. Could\\n         * use some standard \\\"ETH\\\" address to represent native asset and then verify value sent\\n         * with txn. Then wrap that in the token for swapping as part of the trade.\\n         */\\n        TokenTypes.TokenAmount tokenIn;\\n\\n        //output token and minimum amount out expected\\n        TokenTypes.TokenAmount tokenOut;\\n\\n        //the routers to call\\n        RouterRequest[] routes;\\n    }\\n}\",\"keccak256\":\"0xc8aa48ea0c66bd176a535b9479d34a55b3c530d322496447a207a54dea682c3d\",\"license\":\"Unlicense\"},\"src/common/TokenTypes.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary TokenTypes {\\n\\n    /**\\n     * Wrapper structure for token and an amount\\n     */\\n    struct TokenAmount {\\n        uint112 amount;\\n        IERC20 token;\\n    }\\n    \\n}\",\"keccak256\":\"0x7c1b8d6d3be1e957bb0515dafd8247a724a3b7efc29047220b13b5091585dbd5\",\"license\":\"Unlicense\"},\"src/dexible/Dexible.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\nimport \\\"./interfaces/IDexible.sol\\\";\\nimport \\\"./baseContracts/DexibleView.sol\\\";\\nimport \\\"./baseContracts/SwapHandler.sol\\\";\\nimport \\\"./baseContracts/ConfigBase.sol\\\";\\n\\ncontract Dexible is DexibleView, ConfigBase, SwapHandler, IDexible {\\n\\n    event ReceivedFunds(address from, uint amount);\\n    event WithdrewETH(address indexed admin, uint amount);\\n\\n    /*\\n    constructor(DexibleStorage.DexibleConfig memory config) {\\n        configure(config);\\n    }\\n    */\\n    function initialize(DexibleStorage.DexibleConfig calldata config) public {\\n        configure(config);\\n    }\\n\\n    receive() external payable {\\n       emit ReceivedFunds(msg.sender, msg.value);\\n    }\\n\\n    function swap(SwapTypes.SwapRequest calldata request) external onlyRelay notPaused {\\n        //compute how much gas we have at the outset, plus some gas for loading contract, etc.\\n        uint startGas = gasleft();\\n        SwapMeta memory details = SwapMeta({\\n            feeIsInput: false,\\n            isSelfSwap: false,\\n            startGas: startGas,\\n            preSwapVault: address(DexibleStorage.load().communityVault),\\n            bpsAmount: 0,\\n            gasAmount: 0,\\n            nativeGasAmount: 0,\\n            toProtocol: 0,\\n            toRevshare: 0,\\n            outToTrader: 0,\\n            preDXBLBalance: 0,\\n            outAmount: 0,\\n            inputAmountDue: 0\\n        });\\n\\n        bool success = false;\\n        //execute the swap but catch any problem\\n        try this.fill{\\n            gas: gasleft() - 80_000\\n        }(request, details) returns (SwapMeta memory sd) {\\n            details = sd;\\n            success = true;\\n        } catch {\\n            console.log(\\\"Swap failed\\\");\\n            success = false;\\n        }\\n\\n        postFill(request, details, success);\\n    }\\n\\n    function selfSwap(SwapTypes.SelfSwap calldata request) external notPaused {\\n        //we create a swap request that has no affiliate attached and thus no\\n        //automatic discount.\\n        SwapTypes.SwapRequest memory swapReq = SwapTypes.SwapRequest({\\n            executionRequest: ExecutionTypes.ExecutionRequest({\\n                fee: ExecutionTypes.FeeDetails({\\n                    feeToken: request.feeToken,\\n                    affiliate: address(0),\\n                    affiliatePortion: 0\\n                }),\\n                requester: msg.sender\\n            }),\\n            tokenIn: request.tokenIn,\\n            tokenOut: request.tokenOut,\\n            routes: request.routes\\n        });\\n        SwapMeta memory details = SwapMeta({\\n            feeIsInput: false,\\n            isSelfSwap: true,\\n            startGas: 0,\\n            preSwapVault: address(DexibleStorage.load().communityVault),\\n            bpsAmount: 0,\\n            gasAmount: 0,\\n            nativeGasAmount: 0,\\n            toProtocol: 0,\\n            toRevshare: 0,\\n            outToTrader: 0,\\n            preDXBLBalance: 0,\\n            outAmount: 0,\\n            inputAmountDue: 0\\n        });\\n        details = this.fill(swapReq, details);\\n        postFill(swapReq, details, true);\\n    }\\n\\n    function withdraw(uint amount) public onlyAdmin {\\n        address payable rec = payable(msg.sender);\\n        require(rec.send(amount), \\\"Transfer failed\\\");\\n        emit WithdrewETH(msg.sender, amount);\\n    }\\n}\\n\\n\",\"keccak256\":\"0x64f2f3db2a4198b7bd9126154f5d58e8e569fd55ca2232640e77d3504a571cb9\",\"license\":\"Unlicense\"},\"src/dexible/DexibleStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\nimport \\\"../token/IDXBL.sol\\\";\\nimport \\\"./oracles/IArbitrumGasOracle.sol\\\";\\nimport \\\"../vault/interfaces/ICommunityVault.sol\\\";\\nimport \\\"./oracles/IStandardGasAdjustments.sol\\\";\\n\\nlibrary DexibleStorage {\\n    bytes32 constant DEXIBLE_STORAGE_KEY = 0x949817a987a8e038ef345d3c9d4fd28e49d8e4e09456e57c05a8b2ce2e62866c;\\n\\n    //primary initialization config settings\\n    struct DexibleConfig {\\n        \\n        //percent to split to revshare\\n        uint8 revshareSplitRatio;\\n\\n        //std bps rate to apply to all trades\\n        uint16 stdBpsRate;\\n\\n        //minimum bps rate regardless of tokens held\\n        uint16 minBpsRate;\\n\\n        //multi sig allowed to change settings\\n        address adminMultiSig;\\n\\n        //the vault contract\\n        address communityVault;\\n\\n        //treasury for Dexible team\\n        address treasury;\\n\\n        //the DXBL token address\\n        address dxblToken;\\n\\n        //arbitrum gas oracle contract address\\n        address arbGasOracle;\\n\\n        //contract that manages the standard gas adjustment types\\n        address stdGasAdjustment;\\n\\n        //minimum flat fee to charge if bps fee is too low\\n        uint112 minFeeUSD;\\n\\n        //whitelisted relays to allow\\n        address[] initialRelays;\\n\\n    }\\n\\n    /**\\n     * This is the primary storage for Dexible operations.\\n     */\\n    struct DexibleData {\\n\\n        //whether contract has been paused\\n        bool paused;\\n\\n        //how much of fee goes to revshare vault\\n        uint8 revshareSplitRatio;\\n         \\n        //standard bps fee rate\\n        uint16 stdBpsRate;\\n\\n        //minimum fee applied regardless of tokens held\\n        uint16 minBpsRate;\\n\\n        //min fee to charge if bps too low\\n        uint112 minFeeUSD;\\n        \\n        //vault address\\n        ICommunityVault communityVault;\\n\\n        //treasury address\\n        address treasury;\\n\\n        //multi-sig that manages this contract\\n        address adminMultiSig;\\n\\n        //the DXBL token\\n        IDXBL dxblToken;\\n\\n        //gas oracle for arb network\\n        IArbitrumGasOracle arbitrumGasOracle;\\n\\n        IStandardGasAdjustments stdGasAdjustment;\\n\\n        //whitelisted relay wallets\\n        mapping(address => bool) relays;\\n    }\\n\\n    function load() internal pure returns (DexibleData storage ds) {\\n        assembly { ds.slot := DEXIBLE_STORAGE_KEY }\\n    }\\n}\",\"keccak256\":\"0xf9afdbd57c2ed084edb6ab3f51c9816a1d0f1b4150efde31a630b1f795d55c1e\",\"license\":\"Unlicense\"},\"src/dexible/LibFees.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\nimport \\\"./oracles/IOptimismGasOracle.sol\\\";\\nimport \\\"./DexibleStorage.sol\\\";\\nimport \\\"../common/LibConstants.sol\\\";\\nimport \\\"./oracles/IStandardGasAdjustments.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary LibFees {\\n\\n    //special handling for L2s that impose an L1 rollup fee\\n    uint constant ARB = 42161;\\n    uint constant OPT = 10;\\n    IOptimismGasOracle constant optGasOracle = IOptimismGasOracle(0x420000000000000000000000000000000000000F);\\n\\n    function computeGasCost(uint gasUsed, bool success) internal view returns(uint) {\\n        DexibleStorage.DexibleData storage ds = DexibleStorage.load();\\n        uint add = ds.stdGasAdjustment.adjustment(success ? LibConstants.SWAP_SUCCESS : LibConstants.SWAP_FAILURE);\\n        gasUsed += add;\\n        //console.log(\\\"Gas used to compute cost in fee token\\\", gasUsed, \\\"after adding\\\", add);\\n        uint cid;\\n        assembly {\\n            cid := chainid()\\n        }\\n        if(cid == ARB) {\\n            return ds.arbitrumGasOracle.calculateGasCost(msg.data.length, gasUsed);\\n        }\\n        if(cid == OPT) {\\n            return (tx.gasprice * gasUsed) + optGasOracle.getL1Fee(msg.data);\\n        }\\n       // console.log(\\\"Gas fee\\\", tx.gasprice * gasUsed);\\n        return tx.gasprice * gasUsed;\\n    }\\n\\n    function computeMinFeeUnits(address feeToken) internal view returns (uint) {\\n        DexibleStorage.DexibleData storage rs = DexibleStorage.load();\\n        if(rs.minFeeUSD == 0) {\\n            return 0;\\n        }\\n\\n        //fee token price is in 30-dec units.\\n        uint usdPrice = rs.communityVault.feeTokenPriceUSD(feeToken);\\n\\n        uint8 ftDecs = IERC20Metadata(feeToken).decimals();\\n\\n        //fee USD configuration is expressed in 18-decimals. Have to convert to fee-token units and \\n        //account for price units\\n        uint minFeeUSD = (rs.minFeeUSD * (ftDecs != 18 ? ((10**ftDecs) / 1e18) : 1)) * LibConstants.PRICE_PRECISION;\\n\\n        //then simply divide to get fee token units that equate to min fee USD\\n        return  minFeeUSD / usdPrice;\\n    }\\n}\",\"keccak256\":\"0x4c616342a267f09800640a8daa19d8efeb679f8e7d95ace50820c4233e1414db\",\"license\":\"Unlicense\"},\"src/dexible/baseContracts/AdminBase.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../common/IPausable.sol\\\";\\nimport \\\"../DexibleStorage.sol\\\";\\n\\nabstract contract AdminBase {\\n    \\n    modifier notPaused() {\\n        require(!DexibleStorage.load().paused, \\\"Contract operations are paused\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == DexibleStorage.load().adminMultiSig, \\\"Unauthorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == address(DexibleStorage.load().communityVault), \\\"Only vault can execute this function\\\");\\n        _;\\n    }\\n\\n    modifier onlyRelay() {\\n        DexibleStorage.DexibleData storage dd = DexibleStorage.load();\\n        require(dd.relays[msg.sender], \\\"Only relay allowed to call\\\");\\n        _;\\n    }\\n\\n    modifier onlySelf() {\\n        require(msg.sender == address(this), \\\"Only allowed as internal call\\\");\\n        _;\\n    }\\n\\n}\",\"keccak256\":\"0x63c015ed2d03be64f946e46c4cabca74eabb3dd3b85c08f8db2fe1d38f6e99e0\",\"license\":\"Unlicense\"},\"src/dexible/baseContracts/ConfigBase.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\nimport \\\"../interfaces/IDexibleConfig.sol\\\";\\nimport \\\"../DexibleStorage.sol\\\";\\nimport \\\"./AdminBase.sol\\\";\\n\\nabstract contract ConfigBase is AdminBase, IDexibleConfig {\\n\\n    event ConfigChanged(DexibleStorage.DexibleConfig config);\\n    event RelayAdded(address relay);\\n    event RelayRemoved(address relay);\\n    event StdGasAdjustmentChanged(address newContract);\\n\\n    function configure(DexibleStorage.DexibleConfig calldata config) public {\\n        DexibleStorage.DexibleData storage ds = DexibleStorage.load();\\n        if(ds.adminMultiSig != address(0)) {\\n            require(msg.sender == ds.adminMultiSig, \\\"Unauthorized\\\");\\n        }\\n\\n        require(config.communityVault != address(0), \\\"Invalid CommunityVault address\\\");\\n        require(config.treasury != address(0), \\\"Invalid treasury\\\");\\n        require(config.dxblToken != address(0), \\\"Invalid DXBL token address\\\");\\n        require(config.revshareSplitRatio > 0, \\\"Invalid revshare split ratio\\\");\\n        require(config.stdBpsRate > 0, \\\"Must provide a standard bps fee rate\\\");\\n        require(config.minBpsRate > 0, \\\"minBpsRate is required\\\");\\n        require(config.minBpsRate < config.stdBpsRate, \\\"Min bps rate must be less than std\\\");\\n        require(config.stdGasAdjustment != address(0), \\\"Invalid stdGasAdjustment address\\\");\\n\\n        ds.adminMultiSig = config.adminMultiSig;\\n        ds.revshareSplitRatio = config.revshareSplitRatio;\\n        ds.communityVault = ICommunityVault(config.communityVault);\\n        ds.treasury = config.treasury;\\n        ds.dxblToken = IDXBL(config.dxblToken);\\n        ds.stdBpsRate = config.stdBpsRate;\\n        ds.minBpsRate = config.minBpsRate;\\n        ds.minFeeUSD = config.minFeeUSD; //can be 0\\n        ds.arbitrumGasOracle = IArbitrumGasOracle(config.arbGasOracle);\\n        ds.stdGasAdjustment = IStandardGasAdjustments(config.stdGasAdjustment);\\n\\n        for(uint i=0;i<config.initialRelays.length;++i) {\\n            ds.relays[config.initialRelays[i]] = true;\\n        }\\n        emit ConfigChanged(config);\\n    }\\n\\n    function addRelays(address[] calldata relays) external onlyAdmin {\\n        DexibleStorage.DexibleData storage ds = DexibleStorage.load();\\n        for(uint i=0;i<relays.length;++i) {\\n            ds.relays[relays[i]] = true;\\n            emit RelayAdded(relays[i]);\\n        }\\n    }\\n\\n    function removeRelay(address relay) external onlyAdmin {\\n        DexibleStorage.DexibleData storage ds = DexibleStorage.load();\\n        delete ds.relays[relay];\\n        emit RelayRemoved(relay);\\n    }\\n\\n    function setRevshareSplitRatio(uint8 bps) external onlyAdmin {\\n        DexibleStorage.load().revshareSplitRatio = bps;\\n        emit SplitRatioChanged(bps);\\n    }\\n         \\n    function setStdBpsRate(uint16 bps) external onlyAdmin {\\n        DexibleStorage.load().stdBpsRate = bps;\\n        emit StdBpsChanged(bps);\\n    }\\n\\n    function setMinBpsRate(uint16 bps) external onlyAdmin {\\n        DexibleStorage.load().minBpsRate = bps;\\n        emit MinBpsChanged(bps);\\n    }\\n\\n    function setMinFeeUSD(uint112 minFee) external onlyAdmin {\\n        DexibleStorage.load().minFeeUSD = minFee;\\n        emit MinFeeChanged(minFee);\\n    }\\n        \\n    function setCommunityVault(ICommunityVault vault) external onlyVault {\\n        DexibleStorage.load().communityVault = vault;\\n        emit VaultChanged(address(vault));\\n    }\\n\\n    function setTreasury(address t) external onlyAdmin {\\n        DexibleStorage.load().treasury = t;\\n        emit TreasuryChanged(t);\\n    }\\n    \\n    function setArbitrumGasOracle(IArbitrumGasOracle oracle) external onlyAdmin {\\n        DexibleStorage.load().arbitrumGasOracle = oracle;\\n        emit ArbGasOracleChanged(address(oracle));\\n    }\\n\\n    function pause() external onlyAdmin {\\n        DexibleStorage.load().paused = true;\\n        emit Paused();\\n    }\\n\\n    function resume() external onlyAdmin {\\n        DexibleStorage.load().paused = false;\\n        emit Resumed();\\n    }\\n\\n    function setStdGasAdjustmentContract(address con) external onlyAdmin {\\n        require(con != address(0), \\\"Invalid contract address\\\");\\n        DexibleStorage.load().stdGasAdjustment = IStandardGasAdjustments(con);\\n        emit StdGasAdjustmentChanged(con);\\n    }\\n}\",\"keccak256\":\"0x1c94425f983c800652d51a37422830c379865c7d8b886db31b2f5e025fb8ce08\",\"license\":\"Unlicense\"},\"src/dexible/baseContracts/DexibleView.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\nimport \\\"../interfaces/IDexibleView.sol\\\";\\nimport \\\"../DexibleStorage.sol\\\";\\n\\nabstract contract DexibleView is IDexibleView {\\n\\n    function revshareSplitRatio() external view returns (uint8){\\n        return DexibleStorage.load().revshareSplitRatio;\\n    }\\n         \\n    function stdBpsRate() external view returns (uint16){\\n        return DexibleStorage.load().stdBpsRate;\\n    }\\n\\n    function minBpsRate() external view returns (uint16){\\n        return DexibleStorage.load().minBpsRate;\\n    }\\n\\n    function minFeeUSD() external view returns (uint112){\\n        return DexibleStorage.load().minFeeUSD;\\n    }\\n        \\n    function communityVault() external view returns(address){\\n        return address(DexibleStorage.load().communityVault);\\n    }\\n\\n    function adminMultiSig() external view returns(address) {\\n        return DexibleStorage.load().adminMultiSig;\\n    }\\n\\n    function treasury() external view returns (address){\\n        return DexibleStorage.load().treasury;\\n    }\\n\\n    function dxblToken() external view returns(address){\\n        return address(DexibleStorage.load().dxblToken);\\n    }\\n    \\n    function arbitrumGasOracle() external view returns(address){\\n        return address(DexibleStorage.load().arbitrumGasOracle);\\n    }\\n\\n    function stdGasAdjustmentContract() external view returns (address) {\\n        return address(DexibleStorage.load().stdGasAdjustment);\\n    }\\n}\",\"keccak256\":\"0x2e397572b7a8827be41b3c55d576da2212f66ce7f41e57d1787f072813cc8d5c\",\"license\":\"Unlicense\"},\"src/dexible/baseContracts/SwapHandler.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\nimport \\\"../interfaces/ISwapHandler.sol\\\";\\nimport \\\"../DexibleStorage.sol\\\";\\nimport \\\"./AdminBase.sol\\\";\\nimport \\\"../../vault/interfaces/ICommunityVault.sol\\\";\\nimport \\\"../LibFees.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nabstract contract SwapHandler is AdminBase, ISwapHandler {\\n\\n    using SafeERC20 for IERC20;\\n\\n    struct SwapMeta {\\n        bool feeIsInput;\\n        bool isSelfSwap;\\n        //if a migration occurs during a swap, we don't want to charge\\n        //the trader for the txn if possible\\n        address preSwapVault;\\n        uint startGas;\\n        uint toProtocol;\\n        uint toRevshare;\\n        uint outToTrader;\\n        uint outAmount;\\n        uint bpsAmount;\\n        uint gasAmount;\\n        uint nativeGasAmount;\\n        uint preDXBLBalance;\\n        uint inputAmountDue;\\n    }\\n\\n\\n    function fill(SwapTypes.SwapRequest calldata request, SwapMeta memory meta) external onlySelf returns (SwapMeta memory)  {\\n\\n        preCheck(request, meta);\\n        meta.outAmount = request.tokenOut.token.balanceOf(address(this));\\n        \\n        for(uint i=0;i<request.routes.length;++i) {\\n            SwapTypes.RouterRequest calldata rr = request.routes[i];\\n            IERC20(rr.routeAmount.token).safeApprove(rr.spender, rr.routeAmount.amount);\\n            (bool s, ) = rr.router.call(rr.routerData);\\n\\n            if(!s) {\\n                revert(\\\"Failed to swap\\\");\\n            }\\n        }\\n        uint out = request.tokenOut.token.balanceOf(address(this));\\n        if(meta.outAmount < out) {\\n            meta.outAmount = out - meta.outAmount;\\n        } else {\\n            meta.outAmount = 0;\\n        }\\n        \\n        console.log(\\\"Expected\\\", request.tokenOut.amount, \\\"Received\\\", meta.outAmount);\\n        //first, make sure enough output was generated\\n        require(meta.outAmount >= request.tokenOut.amount, \\\"Insufficient output generated\\\");\\n        return meta;\\n    }\\n\\n    function postFill(SwapTypes.SwapRequest memory request, SwapMeta memory meta, bool success) internal  {\\n\\n        if(success) {\\n            //if we succeeded, then do successful post-swap ops\\n            handleSwapSuccess(request, meta); \\n        }  else {\\n            //otherwise, handle as a failure\\n            handleSwapFailure(request, meta);\\n        }\\n        //pay the relayer their gas fee if we have funds for it\\n        payRelayGas(meta.nativeGasAmount);\\n    }\\n\\n    /**\\n     * When a relay-based swap fails, we need to account for failure gas fees if the input\\n     * token is the fee token. That's what this function does\\n     */\\n    function handleSwapFailure(SwapTypes.SwapRequest memory request, SwapMeta memory meta) internal {\\n       \\n        DexibleStorage.DexibleData storage dd = DexibleStorage.load();\\n        uint gasInFeeToken = 0;\\n        if(meta.feeIsInput) {\\n            unchecked { \\n                //the total gas used thus far plus some post-op stuff that needs to get done\\n                uint totalGas = (meta.startGas - gasleft());\\n                \\n                console.log(\\\"Estimated gas used for failed gas payment\\\", totalGas);\\n                meta.nativeGasAmount = LibFees.computeGasCost(totalGas, false);\\n            }\\n\\n            gasInFeeToken = dd.communityVault.convertGasToFeeToken(address(request.executionRequest.fee.feeToken), meta.nativeGasAmount);\\n\\n            //console.log(\\\"Transferring partial input token to devteam for failure gas fees\\\");\\n            \\n            //console.log(\\\"Failed gas fee\\\", gasInFeeToken);\\n\\n            //transfer input assets from trader to treasury. Recall that any previous transfer amount\\n            //to this contract was rolled back on failure, so we transfer the funds for gas only\\n            request.executionRequest.fee.feeToken.safeTransferFrom(request.executionRequest.requester, dd.treasury, gasInFeeToken);\\n        }\\n        \\n        emit SwapFailed(request.executionRequest.requester, address(request.executionRequest.fee.feeToken), gasInFeeToken);\\n    }\\n\\n    /**\\n     * This is called when a relay-based swap is successful. It basically rewards DXBL tokens\\n     * to trader and pays appropriate fees.\\n     */\\n    function handleSwapSuccess(SwapTypes.SwapRequest memory request, \\n                SwapMeta memory meta) internal {\\n        \\n        //reward trader with DXBL tokens\\n        collectDXBL(request, meta.feeIsInput, meta.outAmount);\\n\\n        //pay fees\\n        payAndDistribute(request, meta);\\n    }\\n\\n    /**\\n     * Reward DXBL to the trader\\n     */\\n    function collectDXBL(SwapTypes.SwapRequest memory request, bool feeIsInput, uint outAmount) internal {\\n        DexibleStorage.DexibleData storage dd = DexibleStorage.load();\\n\\n        uint value = 0;\\n        if(feeIsInput) {\\n            //when input, the total input amount is used to determine reward rate\\n            value = request.tokenIn.amount;\\n        } else {\\n            //otherwise, it's the output generated from the swap\\n            value = outAmount;\\n        }\\n        //Dexible is the only one allowed to ask the vault to mint tokens on behalf of a trader\\n        //See RevshareVault for logic of minting rewards\\n\\n        //NOTE: a migration to a new vault could occur as part of this call. It would just \\n        //change the address of the vault in storage and all proceeds would be forwarded to \\n        //the new vault address. All minting occurs before the migration so mint rates and \\n        //token balances are all forwarded to the new vault as part of the migration. It is \\n        //possible, however, that gas estimates would not account for the migration.\\n        dd.communityVault.rewardTrader(request.executionRequest.requester, address(request.executionRequest.fee.feeToken), value);\\n    }\\n\\n\\n    /**\\n     * Distribute payments to revshare pool, affiliates, treasury, and trader\\n     */\\n    function payAndDistribute(SwapTypes.SwapRequest memory request, \\n                                SwapMeta memory meta) internal  {\\n        allocateRevshareAndAffiliate(request, meta);\\n        payProtocolAndTrader(request, meta);\\n    }\\n\\n    /**\\n     * Allocate bps portions to revshare pool and any associated affiliate\\n     */\\n    function allocateRevshareAndAffiliate(SwapTypes.SwapRequest memory request, \\n                                SwapMeta memory meta) internal view {\\n\\n        DexibleStorage.DexibleData storage dd = DexibleStorage.load();\\n\\n        //assume trader gets all output\\n        meta.outToTrader = meta.outAmount;\\n\\n        //the bps portion of fee. \\n        meta.bpsAmount = computeBpsFee(request, meta.feeIsInput, meta.preDXBLBalance, meta.outAmount);\\n    \\n        //console.log(\\\"Total bps fee\\\", payments.bpsAmount);\\n        uint minFee = LibFees.computeMinFeeUnits(address(request.executionRequest.fee.feeToken));\\n        if(minFee > meta.bpsAmount) {\\n            //console.log(\\\"Trade too small. Charging minimum flat fee\\\", minFee);\\n            meta.bpsAmount = minFee;\\n        }\\n\\n        //revshare pool gets portion of bps fee collected\\n        meta.toRevshare = (meta.bpsAmount * dd.revshareSplitRatio) / 100;\\n\\n        //console.log(\\\"To revshare\\\", meta.toRevshare);\\n\\n        //protocol gets remaining bps but affiliate fees come out of its portion. Will revert if\\n        //Dexible miscalculated the affiliate reward portion. However, the call would revert here and\\n        //Dexible relay would pay the gas fee for its mistake. Self-swap has no affiliate so no revert\\n        //would happen.\\n        require(request.executionRequest.fee.affiliatePortion < meta.bpsAmount-meta.toRevshare, \\\"Miscalculated affiliate portion\\\");\\n        meta.toProtocol = (meta.bpsAmount-meta.toRevshare) - request.executionRequest.fee.affiliatePortion;\\n\\n        //console.log(\\\"Protocol pre-gas\\\", meta.toProtocol);\\n\\n        //fees accounted for thus far\\n        uint total = meta.toRevshare + meta.toProtocol + request.executionRequest.fee.affiliatePortion;\\n            \\n        if(!meta.feeIsInput) {\\n            //this is an interim calculation. Gas fees get deducted later as well. This will\\n            //also revert if insufficient output was generated to cover all fees\\n            //console.log(\\\"Out amount\\\", meta.outAmount, \\\"Total fees so far\\\", total);\\n            if(meta.outAmount < total) {\\n                revert(\\n                    string(\\n                        abi.encodePacked(\\n                            _concatUintString(\\\"Insufficient output to pay bps fees. Required: \\\", total),\\n                            _concatUintString(\\\" Output amount: \\\", meta.outAmount)\\n                        )\\n                    )\\n                );\\n            }\\n            meta.outToTrader = meta.outAmount - total;\\n        } else {\\n            //input debits are handled later so we keep track of what's due so far in bps fees\\n            meta.inputAmountDue = total;\\n        }\\n    }\\n\\n    /**\\n     * Final step to compute gas consumption for trader and pay the vault, protocol, affiliate, and trader \\n     * their portions.\\n     */\\n    function payProtocolAndTrader(SwapTypes.SwapRequest memory request,\\n                            SwapMeta memory meta) internal {\\n        \\n        DexibleStorage.DexibleData storage dd = DexibleStorage.load();\\n\\n        if(!meta.isSelfSwap) {\\n            //If this was a relay-based swap, we need to pay treasury an estimated gas fee\\n            \\n            //we leave unguarded for gas savings since we know start gas is always higher \\n            //than used and will never rollover without costing an extremely large amount of $$\\n            unchecked { \\n                //console.log(\\\"Start gas\\\", meta.startGas, \\\"Left\\\", gasleft());\\n\\n                //the total gas used thus far plus some post-op buffer for transfers and events\\n                uint totalGas = (meta.startGas - gasleft());\\n                if(address(dd.communityVault) != meta.preSwapVault && totalGas > 200_000) {\\n                    totalGas -= 200_000; //give credit for estimated migration gas\\n                }\\n                \\n                console.log(\\\"Estimated gas used for trader gas payment\\\", totalGas);\\n                meta.nativeGasAmount = LibFees.computeGasCost(totalGas, true); //(totalGas * tx.gasprice);\\n            }\\n            //use price oracle in vault to get native price in fee token\\n            meta.gasAmount = dd.communityVault.convertGasToFeeToken(address(request.executionRequest.fee.feeToken), meta.nativeGasAmount);\\n            //console.log(\\\"Gas paid by trader in fee token\\\", meta.gasAmount);\\n\\n            //add gas payment to treasury portion\\n            meta.toProtocol += meta.gasAmount;\\n            //console.log(\\\"Payment to protocol\\\", meta.toProtocol);\\n\\n            if(!meta.feeIsInput) {\\n                //if output was fee, deduct gas payment from proceeds, revert if there isn't enough output\\n                //for it (should have been caught offchain before submit). We make sure the trader gets \\n                //something out of the deal by ensuring output is more than gas.\\n                if(meta.outToTrader <= meta.gasAmount) {\\n                    revert(\\n                        string(\\n                            abi.encodePacked(\\n                                _concatUintString(\\\"Insufficient output to pay gas fees. Required: \\\", meta.gasAmount),\\n                                _concatUintString(\\\" Trader output proceeds: \\\", meta.outToTrader)\\n                            )\\n                        )\\n                    );\\n                }\\n                meta.outToTrader -= meta.gasAmount;\\n            } else {\\n                //other make sure it's account for as input debit\\n                meta.inputAmountDue += meta.gasAmount;\\n            }\\n            //console.log(\\\"Proceeds to trader\\\", payments.outToTrader);\\n        }\\n\\n        //now distribute fees\\n        IERC20 feeToken = request.executionRequest.fee.feeToken;\\n        if(meta.feeIsInput) {\\n            //make sure we didn't overspend on trading input amount and not have enough to cover\\n            //fees\\n            uint totalInputSpent = request.routes[0].routeAmount.amount + meta.inputAmountDue;\\n            //console.log(\\\"Total input spent\\\", totalInputSpent, \\\"Expected input amount\\\", request.tokenIn.amount);\\n            if(totalInputSpent > request.tokenIn.amount) {\\n                revert(\\n                    string(\\n                        abi.encodePacked(_concatUintString(\\\"Attempt to spend more input than anticipated. Total required: \\\", totalInputSpent),\\n                                        _concatUintString(\\\" Max input: \\\", request.tokenIn.amount))\\n                    )\\n                );\\n            }\\n            //pay protocol from input token\\n            feeToken.safeTransferFrom(request.executionRequest.requester, dd.treasury, meta.toProtocol);\\n\\n            //pay vault from input token\\n            feeToken.safeTransferFrom(request.executionRequest.requester, address(dd.communityVault), meta.toRevshare);\\n            if(request.executionRequest.fee.affiliatePortion > 0) {\\n                //pay affiliate their portion which was deducted from protocol's bps portion\\n                feeToken.safeTransferFrom(request.executionRequest.requester, request.executionRequest.fee.affiliate, request.executionRequest.fee.affiliatePortion);\\n                emit AffiliatePaid(request.executionRequest.fee.affiliate, address(feeToken), request.executionRequest.fee.affiliatePortion);\\n            }\\n        } else {\\n            //otherwise, transfer directly from generated output\\n            //console.log(\\\"Total output spent\\\", (meta.toProtocol + meta.toRevshare + request.executionRequest.fee.affiliatePortion));\\n            //console.log(\\\"Total output generated\\\", meta.outAmount);\\n            feeToken.safeTransfer(dd.treasury, meta.toProtocol);\\n            feeToken.safeTransfer(address(dd.communityVault), meta.toRevshare);\\n            if(request.executionRequest.fee.affiliatePortion > 0) {\\n                //pay affiliate their portion\\n                feeToken.safeTransfer(request.executionRequest.fee.affiliate, request.executionRequest.fee.affiliatePortion);\\n                emit AffiliatePaid(request.executionRequest.fee.affiliate, address(feeToken), request.executionRequest.fee.affiliatePortion);\\n            }\\n        }\\n        \\n        //and send trader their proceeds\\n        request.tokenOut.token.safeTransfer(request.executionRequest.requester, meta.outToTrader);\\n        \\n        emit SwapSuccess(request.executionRequest.requester,\\n                    request.executionRequest.fee.affiliate,\\n                    request.tokenOut.amount,\\n                    meta.outToTrader, \\n                    address(request.executionRequest.fee.feeToken),\\n                    meta.gasAmount,\\n                    request.executionRequest.fee.affiliatePortion,\\n                    meta.bpsAmount); \\n    }\\n\\n    function preCheck(SwapTypes.SwapRequest calldata request, SwapMeta memory meta) internal {\\n        //make sure fee token is allowed\\n        address fToken = address(request.executionRequest.fee.feeToken);\\n        DexibleStorage.DexibleData storage dd = DexibleStorage.load();\\n        require(\\n            dd.communityVault.isFeeTokenAllowed(fToken), \\n            \\\"Fee token is not allowed\\\"\\n        );\\n\\n        //and that it's one of the tokens swapped\\n        require(fToken == address(request.tokenIn.token) ||\\n                fToken == address(request.tokenOut.token), \\n                \\\"Fee token must be input or output token\\\");\\n\\n         //get the current DXBL balance at the start to apply discounts\\n        meta.preDXBLBalance = dd.dxblToken.balanceOf(request.executionRequest.requester);\\n        \\n        //flag whether the input token is the fee token\\n        meta.feeIsInput = address(request.tokenIn.token) == address(request.executionRequest.fee.feeToken);\\n        \\n        //transfer input tokens for router so it can perform swap\\n        //console.log(\\\"Transfering input for trading:\\\", request.routes[0].routeAmount.amount);\\n        request.tokenIn.token.safeTransferFrom(request.executionRequest.requester, address(this), request.routes[0].routeAmount.amount);\\n        //console.log(\\\"Expected output\\\", request.tokenOut.amount);\\n    }\\n\\n\\n    /**\\n     * Pay the relay with gas funds stored in this contract. The gas used provided \\n     * does not include arbitrum multiplier but may include additional amount for post-op\\n     * gas estimates.\\n     */\\n    function payRelayGas(uint gasFee) internal {\\n        if(gasFee == 0) {\\n            return;\\n        }\\n        \\n        //console.log(\\\"Relay Gas Reimbursement\\\", gasFee);\\n        //if there is ETH in the contract, reimburse the relay that called the fill function\\n        if(address(this).balance < gasFee) {\\n            //console.log(\\\"Cannot reimburse relay since do not have enough funds\\\");\\n            emit InsufficientGasFunds(msg.sender, gasFee);\\n        } else {\\n            //console.log(\\\"Transfering gas fee to relay\\\");\\n            payable(msg.sender).transfer(gasFee);\\n            emit PaidGasFunds(msg.sender, gasFee);\\n        }\\n    }\\n\\n    /**\\n     * Compute the bps to charge for the swap. This leverages the DXBL token to compute discounts\\n     * based on trader balances and discount rates applied per DXBL token.\\n     */\\n    function computeBpsFee(SwapTypes.SwapRequest memory request, bool feeIsInput, uint preDXBL, uint outAmount) internal view returns (uint) {\\n        //apply any discounts\\n        DexibleStorage.DexibleData storage ds = DexibleStorage.load();\\n        \\n        return ds.dxblToken.computeDiscountedFee(\\n            IDXBL.FeeRequest({\\n                trader: request.executionRequest.requester,\\n                amt: feeIsInput ? request.tokenIn.amount : outAmount,\\n                referred: request.executionRequest.fee.affiliate != address(0),\\n                dxblBalance: preDXBL,\\n                stdBpsRate: ds.stdBpsRate,\\n                minBpsRate: ds.minBpsRate\\n            }));\\n    }\\n\\n    function _concatUintString(string memory s, uint val) private pure returns(string memory) {\\n        return string(abi.encodePacked(s, Strings.toString(val)));\\n    }\\n}\",\"keccak256\":\"0xe357981dd93f16276c47261116aac4095cf4360a4b26e9a32c99b498f8a8992e\",\"license\":\"Unlicense\"},\"src/dexible/interfaces/IDexible.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IDexibleView.sol\\\";\\nimport \\\"./ISwapHandler.sol\\\";\\nimport \\\"./IDexibleEvents.sol\\\";\\nimport \\\"./IDexibleConfig.sol\\\";\\n\\ninterface IDexible is IDexibleView, IDexibleConfig, ISwapHandler {\\n\\n    \\n}\",\"keccak256\":\"0x463dc2050dbcf1fdc67d2a23c9b6fc6d02c562e4748a80a5489f0a0c88d8ef41\",\"license\":\"Unlicense\"},\"src/dexible/interfaces/IDexibleConfig.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../vault/interfaces/ICommunityVault.sol\\\";\\nimport \\\"../oracles/IArbitrumGasOracle.sol\\\";\\nimport \\\"../../common/IPausable.sol\\\";\\n\\ninterface IDexibleConfig is IPausable {\\n\\n    event SplitRatioChanged(uint8 newRate);\\n    event StdBpsChanged(uint16 newRate);\\n    event MinBpsChanged(uint16 newRate);\\n    event MinFeeChanged(uint112 newMin);\\n    event VaultChanged(address newVault);\\n    event TreasuryChanged(address newTreasury);\\n    event ArbGasOracleChanged(address newVault);\\n\\n    function setRevshareSplitRatio(uint8 bps) external;\\n         \\n    function setStdBpsRate(uint16 bps) external;\\n\\n    function setMinBpsRate(uint16 bps) external;\\n\\n    function setMinFeeUSD(uint112 minFee) external;\\n        \\n    function setCommunityVault(ICommunityVault vault) external;\\n\\n    function setTreasury(address t) external;\\n    \\n    function setArbitrumGasOracle(IArbitrumGasOracle oracle) external;\\n}\",\"keccak256\":\"0x78b8f2ff100f808f61a2a4965b8f89b4f156f5dbea372e15bea397088ee6b64b\",\"license\":\"Unlicense\"},\"src/dexible/interfaces/IDexibleEvents.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\ninterface IDexibleEvents {\\n\\n    event SwapFailed(address indexed trader, \\n                     address feeToken, \\n                     uint gasFeePaid);\\n    event SwapSuccess(address indexed trader,\\n                        address indexed affiliate,\\n                        uint inputAmount,\\n                        uint outputAmount,\\n                        address feeToken,\\n                        uint gasFee,\\n                        uint affiliateFee,\\n                        uint dexibleFee);\\n    event AffiliatePaid(address indexed affiliate, address token, uint amount);\\n\\n    event PaidGasFunds(address indexed relay, uint amount);\\n    event InsufficientGasFunds(address indexed relay, uint amount);\\n    event ChangedRevshareVault(address indexed old, address indexed newRevshare);\\n    event ChangedRevshareSplit(uint8 split);\\n    event ChangedBpsRates(uint32 stdRate, uint32 minRate);\\n    \\n}\",\"keccak256\":\"0xda9c72c976099e0596c803d099da427978875f124b3c6e78a8e92a50a84c3d4c\",\"license\":\"Unlicense\"},\"src/dexible/interfaces/IDexibleView.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\ninterface IDexibleView {\\n    function revshareSplitRatio() external view returns (uint8);\\n         \\n    function stdBpsRate() external view returns (uint16);\\n\\n    function minBpsRate() external view returns (uint16);\\n\\n    function minFeeUSD() external view returns (uint112);\\n        \\n    function communityVault() external view returns(address);\\n\\n    function treasury() external view returns (address);\\n\\n    function dxblToken() external view returns(address);\\n\\n    function arbitrumGasOracle() external view returns(address);\\n}\",\"keccak256\":\"0x53a6a5d7652501593fd1f3ece41fad990bc1eed785884476730df3f4fa31b1bf\",\"license\":\"Unlicense\"},\"src/dexible/interfaces/ISwapHandler.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../common/SwapTypes.sol\\\";\\nimport \\\"./IDexibleEvents.sol\\\";\\n\\ninterface ISwapHandler is IDexibleEvents {\\n\\n    function swap(SwapTypes.SwapRequest calldata request) external;\\n    function selfSwap(SwapTypes.SelfSwap calldata request) external;\\n}\",\"keccak256\":\"0x2086cbc9aac7ee424571e0c6f086256f2dddff56e248e29acac51f2349a18e86\",\"license\":\"Unlicense\"},\"src/dexible/oracles/IArbitrumGasOracle.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\ninterface IArbitrumGasOracle {\\n    function calculateGasCost(uint callDataSize, uint l2GasUsed) external view returns (uint);\\n}\",\"keccak256\":\"0x1d3c8517ccbbeca13982398e259fcdf645c34b3e003808bbd21c311594d59097\",\"license\":\"Unlicense\"},\"src/dexible/oracles/IOptimismGasOracle.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\ninterface IOptimismGasOracle {\\n    \\n    function getL1Fee(bytes calldata data) external view returns(uint);\\n}\",\"keccak256\":\"0x08829b70cb6018c936302048444030535a53d5002ca65ac3a5154afa8bc064ac\",\"license\":\"Unlicense\"},\"src/dexible/oracles/IStandardGasAdjustments.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\ninterface IStandardGasAdjustments {\\n\\n    function adjustment(string memory adjType) external view returns (uint);\\n}\",\"keccak256\":\"0x80e322f6beaf9c77f5bab66b2b3a9bb309064400a61b4857c25952e8f4631745\",\"license\":\"Unlicense\"},\"src/hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"},\"src/token/IDXBL.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDXBL is IERC20, IERC20Metadata {\\n    struct FeeRequest {\\n        bool referred;\\n        address trader;\\n        uint amt;\\n        uint dxblBalance;\\n        uint16 stdBpsRate;\\n        uint16 minBpsRate;\\n    }\\n\\n    function minter() external view returns (address);\\n    function discountPerTokenBps() external view returns(uint32);\\n\\n    function mint(address acct, uint amt) external;\\n    function burn(address holder, uint amt) external;\\n    function setDiscountRate(uint32 discount) external;\\n    function setNewMinter(address minter) external;\\n    function computeDiscountedFee(FeeRequest calldata request) external view returns(uint);\\n}\",\"keccak256\":\"0x5c7e94839ff1ff8d19ed800cbb7a9af9ea24d178ec1cca6c84c0b914636494ef\",\"license\":\"Unlicense\"},\"src/vault/VaultStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\nimport \\\"../token/IDXBL.sol\\\";\\nimport \\\"./interfaces/IPriceFeed.sol\\\";\\n\\nlibrary VaultStorage {\\n\\n    bytes32 constant VAULT_STORAGE_KEY = 0xbfa76ec2967ed7f8d3d40cd552f1451ab03573b596bfce931a6a016f7733078c;\\n\\n    \\n    //mint rate bucket\\n    struct MintRateRangeConfig {\\n        uint16 minMMVolume;\\n        uint16 maxMMVolume;\\n        uint rate;\\n    }\\n\\n    //fee token and its associated chainlink feed\\n    struct FeeTokenConfig {\\n        address[] feeTokens;\\n        address[] priceFeeds;\\n    }\\n\\n    //initialize config to intialize storage\\n    struct VaultConfig {\\n\\n        //the address of the wrapped native token\\n        address wrappedNativeToken;\\n\\n        //address of the multisig that will administer this vault\\n        address adminMultiSig;\\n\\n\\n        //seconds for any timelock-based changes\\n        uint32 timelockSeconds;\\n\\n        //starting volume needed to mint a single DXBL token. This increases\\n        //as we get closer to reaching the daily goal\\n        uint baseMintThreshold;\\n\\n        //initial rate ranges to apply\\n        MintRateRangeConfig[] rateRanges;\\n\\n        //set of fee token/price feed pairs to initialize with\\n        FeeTokenConfig feeTokenConfig;\\n    }\\n\\n    //stored mint rate range\\n    struct MintRateRange {\\n        uint16 minMMVolume;\\n        uint16 maxMMVolume;\\n        uint rate;\\n        uint index;\\n    }\\n\\n    //price feed for a fee token\\n    struct PriceFeed {\\n        IPriceFeed feed;\\n        uint8 decimals;\\n    }\\n\\n    /*****************************************************************************************\\n     * STORAGE\\n    ******************************************************************************************/\\n    \\n    \\n    struct VaultData {\\n        //whether the vault is paused\\n        bool paused;\\n\\n        //admin multi sig\\n        address adminMultiSig;\\n\\n        //token address\\n        IDXBL dxbl;\\n\\n        //dexible settlement contract that is allowed to call the vault\\n        address dexible;\\n\\n        //wrapped native asset address for gas computation\\n        address wrappedNativeToken;\\n\\n        //pending migration to new vault\\n        address pendingMigrationTarget;\\n\\n        //time before migration allowed\\n        uint32 timelockSeconds;\\n\\n        //base volume needed to mint a single DXBL token. This increases\\n        //as we get closer to reaching the daily goal\\n        uint baseMintThreshold;\\n\\n        //current daily volume adjusted each hour\\n        uint currentVolume;\\n\\n        //to compute what hourly slots to deduct from 24hr window\\n        uint lastTradeTimestamp;\\n\\n        //can migrate the contract to a new vault after this time\\n        uint migrateAfterTime;\\n\\n        //all known fee tokens. Some may be inactive\\n        IERC20[] feeTokens;\\n\\n        //the current volume range we're operating in for mint rate\\n        MintRateRange currentMintRate;\\n\\n        //The ranges of 24hr volume and their percentage-per-MM increase to \\n        //mint a single token\\n        MintRateRange[] mintRateRanges;\\n\\n        //hourly volume totals to adjust current volume every 24 hr slot\\n        uint[24] hourlyVolume;\\n\\n        //fee token decimals\\n        mapping(address => uint8) tokenDecimals;\\n\\n        //all allowed fee tokens mapped to their price feed address\\n        mapping(address => PriceFeed) allowedFeeTokens;\\n    }\\n\\n    /**\\n     * If a migration occurs from the V1 vault to a new vault, this structure is forwarded\\n     * after all fee token balances are transferred. It is expected that the new vault will have\\n     * its fee token, minting rates, and starting mint rates mapped out as part of its deployment.\\n     * The migration is intended to get the new vault into a state where it knows the last 24hrs\\n     * of volume and can pick up where this vault leaves off but with new settings and capabilities.\\n     */\\n    struct VaultMigrationV1 {\\n        //current daily volume adjusted each hour\\n        uint currentVolume;\\n\\n        //to compute what hourly slots to deduct from 24hr window\\n        uint lastTradeTimestamp;\\n\\n        //hourly volume totals to adjust in new contract\\n        uint[24] hourlyVolume;\\n\\n        //the current volume range we're operating in for mint rate\\n        MintRateRange currentMintRate;\\n    }\\n\\n    function load() internal pure returns (VaultData storage ds) {\\n        assembly { ds.slot := VAULT_STORAGE_KEY }\\n    }\\n}\",\"keccak256\":\"0x06f4025a6c0778c764e67e3605488a0e1ae0fba4a98bb9dbdd2952afa61efde5\",\"license\":\"Unlicense\"},\"src/vault/interfaces/ICommunityVault.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./ICommunityVaultEvents.sol\\\";\\nimport \\\"./V1Migrateable.sol\\\";\\nimport \\\"./IStorageView.sol\\\";\\nimport \\\"./IComputationalView.sol\\\";\\nimport \\\"./IRewardHandler.sol\\\";\\nimport \\\"../../common/IPausable.sol\\\";\\n\\ninterface ICommunityVault is IStorageView, IComputationalView, IRewardHandler, ICommunityVaultEvents, IPausable, V1Migrateable {\\n    function redeemDXBL(address feeToken, uint dxblAmount, uint minOutAmount, bool unwrapNative) external;\\n}\",\"keccak256\":\"0x6c951b24fba22f8557c3001a9cfdcb6f58096b70047a699eac0705a85a9fdfa7\",\"license\":\"Unlicense\"},\"src/vault/interfaces/ICommunityVaultEvents.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\ninterface ICommunityVaultEvents {\\n\\n    event DXBLRedeemed(address holder, uint dxblAmount, address rewardToken, uint rewardAmount);\\n}\",\"keccak256\":\"0xc947f6e92177e75cbbc9643473b1e72c6ae4a1ecc3ecfae75c82747b3af9513e\",\"license\":\"Unlicense\"},\"src/vault/interfaces/IComputationalView.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\ninterface IComputationalView {\\n\\n    struct AssetInfo {\\n        address token;\\n        uint balance;\\n        uint usdValue;\\n        uint usdPrice;\\n    }\\n\\n    function convertGasToFeeToken(address feeToken, uint gasCost) external view returns (uint);\\n    function estimateRedemption(address feeToken, uint dxblAmount) external view returns(uint);\\n    function feeTokenPriceUSD(address feeToken) external view returns (uint);\\n    function aumUSD() external view returns(uint);\\n    function currentNavUSD() external view returns(uint);\\n    function assets() external view returns (AssetInfo[] memory);\\n    function currentMintRateUSD() external view returns (uint);\\n    function computeVolumeUSD(address feeToken, uint amount) external view returns(uint);\\n\\n}\",\"keccak256\":\"0xc0e46b88fd0f1381ada98e1e202068fefb7dca14d74e273e1d5bd264966c9a1d\",\"license\":\"Unlicense\"},\"src/vault/interfaces/IPriceFeed.sol\":{\"content\":\"\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\n/**\\n * Interface for Chainlink oracle feeds\\n */\\ninterface IPriceFeed {\\n    function latestRoundData() external view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x151d6516db0e8639f2c0aae6a0d3dd7fc9befc2d179ac8b08ea8830253cbb544\",\"license\":\"Unlicense\"},\"src/vault/interfaces/IRewardHandler.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\ninterface IRewardHandler {\\n\\n    /**\\n     * Modification functions\\n     */\\n    function rewardTrader(address trader, address feeToken, uint amount) external;\\n}\",\"keccak256\":\"0x103b1b3c548036a1ba6fefb5bf923eda05a1a66732e05c8f2553b00625c6aabd\",\"license\":\"Unlicense\"},\"src/vault/interfaces/IStorageView.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\ninterface IStorageView {\\n\\n    /**\\n     * Storage variable view functions\\n     */\\n    function isFeeTokenAllowed(address tokens) external view returns (bool);\\n    function discountBps() external view returns(uint32);\\n    function dailyVolumeUSD() external view returns(uint);\\n    function paused() external view returns (bool);\\n    function adminMultiSig() external view returns (address);\\n    function dxblToken() external view returns (address);\\n    function dexibleContract() external view returns (address);\\n    function wrappedNativeToken() external view returns (address);\\n    function timelockSeconds() external view returns (uint32);\\n    function baseMintThreshold() external view returns (uint);\\n}\",\"keccak256\":\"0xe582187e92b985d1f5c557d74c715f38cc3475215138444faf0fa58c30fabdb0\",\"license\":\"Unlicense\"},\"src/vault/interfaces/V1Migrateable.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\nimport \\\"../VaultStorage.sol\\\";\\n\\ninterface V1MigrationTarget {\\n    /**\\n     * Call from current vault to migrate the state of the old vault to the new one. \\n     */\\n    function migrationFromV1(VaultStorage.VaultMigrationV1 memory data) external;\\n}\\n\\ninterface V1Migrateable {\\n\\n    event MigrationScheduled(address indexed newVault, uint afterTime);\\n    event MigrationCancelled(address indexed newVault);\\n    event VaultMigrated(address indexed newVault);\\n\\n    function scheduleMigration(V1MigrationTarget target) external;\\n\\n    function cancelMigration() external;\\n\\n    function canMigrate() external view returns (bool);\\n\\n    /**\\n     * Migrate the vault to a new vault address that implements the target interface\\n     * to receive this vault's state. This will transfer all fee token assets to the \\n     * new vault. This can only be called after timelock is expired.\\n     */\\n    function migrateV1() external;\\n    \\n}\",\"keccak256\":\"0x7950798d6d2e6b2960de25d1a4b8383e13dccb9bddb077859528cff48f39cf1e\",\"license\":\"Unlicense\"}},\"version\":1}","metadata":{"compiler":{"version":"0.8.17+commit.8df45f5f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"affiliate","type":"address","indexed":true},{"internalType":"address","name":"token","type":"address","indexed":false},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"AffiliatePaid","anonymous":false},{"inputs":[{"internalType":"address","name":"newVault","type":"address","indexed":false}],"type":"event","name":"ArbGasOracleChanged","anonymous":false},{"inputs":[{"internalType":"uint32","name":"stdRate","type":"uint32","indexed":false},{"internalType":"uint32","name":"minRate","type":"uint32","indexed":false}],"type":"event","name":"ChangedBpsRates","anonymous":false},{"inputs":[{"internalType":"uint8","name":"split","type":"uint8","indexed":false}],"type":"event","name":"ChangedRevshareSplit","anonymous":false},{"inputs":[{"internalType":"address","name":"old","type":"address","indexed":true},{"internalType":"address","name":"newRevshare","type":"address","indexed":true}],"type":"event","name":"ChangedRevshareVault","anonymous":false},{"inputs":[{"internalType":"struct DexibleStorage.DexibleConfig","name":"config","type":"tuple","components":[{"internalType":"uint8","name":"revshareSplitRatio","type":"uint8"},{"internalType":"uint16","name":"stdBpsRate","type":"uint16"},{"internalType":"uint16","name":"minBpsRate","type":"uint16"},{"internalType":"address","name":"adminMultiSig","type":"address"},{"internalType":"address","name":"communityVault","type":"address"},{"internalType":"address","name":"treasury","type":"address"},{"internalType":"address","name":"dxblToken","type":"address"},{"internalType":"address","name":"arbGasOracle","type":"address"},{"internalType":"address","name":"stdGasAdjustment","type":"address"},{"internalType":"uint112","name":"minFeeUSD","type":"uint112"},{"internalType":"address[]","name":"initialRelays","type":"address[]"}],"indexed":false}],"type":"event","name":"ConfigChanged","anonymous":false},{"inputs":[{"internalType":"address","name":"relay","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"InsufficientGasFunds","anonymous":false},{"inputs":[{"internalType":"uint16","name":"newRate","type":"uint16","indexed":false}],"type":"event","name":"MinBpsChanged","anonymous":false},{"inputs":[{"internalType":"uint112","name":"newMin","type":"uint112","indexed":false}],"type":"event","name":"MinFeeChanged","anonymous":false},{"inputs":[{"internalType":"address","name":"relay","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"PaidGasFunds","anonymous":false},{"inputs":[],"type":"event","name":"Paused","anonymous":false},{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":false},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"ReceivedFunds","anonymous":false},{"inputs":[{"internalType":"address","name":"relay","type":"address","indexed":false}],"type":"event","name":"RelayAdded","anonymous":false},{"inputs":[{"internalType":"address","name":"relay","type":"address","indexed":false}],"type":"event","name":"RelayRemoved","anonymous":false},{"inputs":[],"type":"event","name":"Resumed","anonymous":false},{"inputs":[{"internalType":"uint8","name":"newRate","type":"uint8","indexed":false}],"type":"event","name":"SplitRatioChanged","anonymous":false},{"inputs":[{"internalType":"uint16","name":"newRate","type":"uint16","indexed":false}],"type":"event","name":"StdBpsChanged","anonymous":false},{"inputs":[{"internalType":"address","name":"newContract","type":"address","indexed":false}],"type":"event","name":"StdGasAdjustmentChanged","anonymous":false},{"inputs":[{"internalType":"address","name":"trader","type":"address","indexed":true},{"internalType":"address","name":"feeToken","type":"address","indexed":false},{"internalType":"uint256","name":"gasFeePaid","type":"uint256","indexed":false}],"type":"event","name":"SwapFailed","anonymous":false},{"inputs":[{"internalType":"address","name":"trader","type":"address","indexed":true},{"internalType":"address","name":"affiliate","type":"address","indexed":true},{"internalType":"uint256","name":"inputAmount","type":"uint256","indexed":false},{"internalType":"uint256","name":"outputAmount","type":"uint256","indexed":false},{"internalType":"address","name":"feeToken","type":"address","indexed":false},{"internalType":"uint256","name":"gasFee","type":"uint256","indexed":false},{"internalType":"uint256","name":"affiliateFee","type":"uint256","indexed":false},{"internalType":"uint256","name":"dexibleFee","type":"uint256","indexed":false}],"type":"event","name":"SwapSuccess","anonymous":false},{"inputs":[{"internalType":"address","name":"newTreasury","type":"address","indexed":false}],"type":"event","name":"TreasuryChanged","anonymous":false},{"inputs":[{"internalType":"address","name":"newVault","type":"address","indexed":false}],"type":"event","name":"VaultChanged","anonymous":false},{"inputs":[{"internalType":"address","name":"admin","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"WithdrewETH","anonymous":false},{"inputs":[{"internalType":"address[]","name":"relays","type":"address[]"}],"stateMutability":"nonpayable","type":"function","name":"addRelays"},{"inputs":[],"stateMutability":"view","type":"function","name":"adminMultiSig","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"arbitrumGasOracle","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"communityVault","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"struct DexibleStorage.DexibleConfig","name":"config","type":"tuple","components":[{"internalType":"uint8","name":"revshareSplitRatio","type":"uint8"},{"internalType":"uint16","name":"stdBpsRate","type":"uint16"},{"internalType":"uint16","name":"minBpsRate","type":"uint16"},{"internalType":"address","name":"adminMultiSig","type":"address"},{"internalType":"address","name":"communityVault","type":"address"},{"internalType":"address","name":"treasury","type":"address"},{"internalType":"address","name":"dxblToken","type":"address"},{"internalType":"address","name":"arbGasOracle","type":"address"},{"internalType":"address","name":"stdGasAdjustment","type":"address"},{"internalType":"uint112","name":"minFeeUSD","type":"uint112"},{"internalType":"address[]","name":"initialRelays","type":"address[]"}]}],"stateMutability":"nonpayable","type":"function","name":"configure"},{"inputs":[],"stateMutability":"view","type":"function","name":"dxblToken","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"struct SwapTypes.SwapRequest","name":"request","type":"tuple","components":[{"internalType":"struct ExecutionTypes.ExecutionRequest","name":"executionRequest","type":"tuple","components":[{"internalType":"address","name":"requester","type":"address"},{"internalType":"struct ExecutionTypes.FeeDetails","name":"fee","type":"tuple","components":[{"internalType":"contract IERC20","name":"feeToken","type":"address"},{"internalType":"address","name":"affiliate","type":"address"},{"internalType":"uint256","name":"affiliatePortion","type":"uint256"}]}]},{"internalType":"struct TokenTypes.TokenAmount","name":"tokenIn","type":"tuple","components":[{"internalType":"uint112","name":"amount","type":"uint112"},{"internalType":"contract IERC20","name":"token","type":"address"}]},{"internalType":"struct TokenTypes.TokenAmount","name":"tokenOut","type":"tuple","components":[{"internalType":"uint112","name":"amount","type":"uint112"},{"internalType":"contract IERC20","name":"token","type":"address"}]},{"internalType":"struct SwapTypes.RouterRequest[]","name":"routes","type":"tuple[]","components":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"struct TokenTypes.TokenAmount","name":"routeAmount","type":"tuple","components":[{"internalType":"uint112","name":"amount","type":"uint112"},{"internalType":"contract IERC20","name":"token","type":"address"}]},{"internalType":"bytes","name":"routerData","type":"bytes"}]}]},{"internalType":"struct SwapHandler.SwapMeta","name":"meta","type":"tuple","components":[{"internalType":"bool","name":"feeIsInput","type":"bool"},{"internalType":"bool","name":"isSelfSwap","type":"bool"},{"internalType":"address","name":"preSwapVault","type":"address"},{"internalType":"uint256","name":"startGas","type":"uint256"},{"internalType":"uint256","name":"toProtocol","type":"uint256"},{"internalType":"uint256","name":"toRevshare","type":"uint256"},{"internalType":"uint256","name":"outToTrader","type":"uint256"},{"internalType":"uint256","name":"outAmount","type":"uint256"},{"internalType":"uint256","name":"bpsAmount","type":"uint256"},{"internalType":"uint256","name":"gasAmount","type":"uint256"},{"internalType":"uint256","name":"nativeGasAmount","type":"uint256"},{"internalType":"uint256","name":"preDXBLBalance","type":"uint256"},{"internalType":"uint256","name":"inputAmountDue","type":"uint256"}]}],"stateMutability":"nonpayable","type":"function","name":"fill","outputs":[{"internalType":"struct SwapHandler.SwapMeta","name":"","type":"tuple","components":[{"internalType":"bool","name":"feeIsInput","type":"bool"},{"internalType":"bool","name":"isSelfSwap","type":"bool"},{"internalType":"address","name":"preSwapVault","type":"address"},{"internalType":"uint256","name":"startGas","type":"uint256"},{"internalType":"uint256","name":"toProtocol","type":"uint256"},{"internalType":"uint256","name":"toRevshare","type":"uint256"},{"internalType":"uint256","name":"outToTrader","type":"uint256"},{"internalType":"uint256","name":"outAmount","type":"uint256"},{"internalType":"uint256","name":"bpsAmount","type":"uint256"},{"internalType":"uint256","name":"gasAmount","type":"uint256"},{"internalType":"uint256","name":"nativeGasAmount","type":"uint256"},{"internalType":"uint256","name":"preDXBLBalance","type":"uint256"},{"internalType":"uint256","name":"inputAmountDue","type":"uint256"}]}]},{"inputs":[{"internalType":"struct DexibleStorage.DexibleConfig","name":"config","type":"tuple","components":[{"internalType":"uint8","name":"revshareSplitRatio","type":"uint8"},{"internalType":"uint16","name":"stdBpsRate","type":"uint16"},{"internalType":"uint16","name":"minBpsRate","type":"uint16"},{"internalType":"address","name":"adminMultiSig","type":"address"},{"internalType":"address","name":"communityVault","type":"address"},{"internalType":"address","name":"treasury","type":"address"},{"internalType":"address","name":"dxblToken","type":"address"},{"internalType":"address","name":"arbGasOracle","type":"address"},{"internalType":"address","name":"stdGasAdjustment","type":"address"},{"internalType":"uint112","name":"minFeeUSD","type":"uint112"},{"internalType":"address[]","name":"initialRelays","type":"address[]"}]}],"stateMutability":"nonpayable","type":"function","name":"initialize"},{"inputs":[],"stateMutability":"view","type":"function","name":"minBpsRate","outputs":[{"internalType":"uint16","name":"","type":"uint16"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"minFeeUSD","outputs":[{"internalType":"uint112","name":"","type":"uint112"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"pause"},{"inputs":[{"internalType":"address","name":"relay","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"removeRelay"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"resume"},{"inputs":[],"stateMutability":"view","type":"function","name":"revshareSplitRatio","outputs":[{"internalType":"uint8","name":"","type":"uint8"}]},{"inputs":[{"internalType":"struct SwapTypes.SelfSwap","name":"request","type":"tuple","components":[{"internalType":"contract IERC20","name":"feeToken","type":"address"},{"internalType":"struct TokenTypes.TokenAmount","name":"tokenIn","type":"tuple","components":[{"internalType":"uint112","name":"amount","type":"uint112"},{"internalType":"contract IERC20","name":"token","type":"address"}]},{"internalType":"struct TokenTypes.TokenAmount","name":"tokenOut","type":"tuple","components":[{"internalType":"uint112","name":"amount","type":"uint112"},{"internalType":"contract IERC20","name":"token","type":"address"}]},{"internalType":"struct SwapTypes.RouterRequest[]","name":"routes","type":"tuple[]","components":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"struct TokenTypes.TokenAmount","name":"routeAmount","type":"tuple","components":[{"internalType":"uint112","name":"amount","type":"uint112"},{"internalType":"contract IERC20","name":"token","type":"address"}]},{"internalType":"bytes","name":"routerData","type":"bytes"}]}]}],"stateMutability":"nonpayable","type":"function","name":"selfSwap"},{"inputs":[{"internalType":"contract IArbitrumGasOracle","name":"oracle","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setArbitrumGasOracle"},{"inputs":[{"internalType":"contract ICommunityVault","name":"vault","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setCommunityVault"},{"inputs":[{"internalType":"uint16","name":"bps","type":"uint16"}],"stateMutability":"nonpayable","type":"function","name":"setMinBpsRate"},{"inputs":[{"internalType":"uint112","name":"minFee","type":"uint112"}],"stateMutability":"nonpayable","type":"function","name":"setMinFeeUSD"},{"inputs":[{"internalType":"uint8","name":"bps","type":"uint8"}],"stateMutability":"nonpayable","type":"function","name":"setRevshareSplitRatio"},{"inputs":[{"internalType":"uint16","name":"bps","type":"uint16"}],"stateMutability":"nonpayable","type":"function","name":"setStdBpsRate"},{"inputs":[{"internalType":"address","name":"con","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setStdGasAdjustmentContract"},{"inputs":[{"internalType":"address","name":"t","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setTreasury"},{"inputs":[],"stateMutability":"view","type":"function","name":"stdBpsRate","outputs":[{"internalType":"uint16","name":"","type":"uint16"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"stdGasAdjustmentContract","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"struct SwapTypes.SwapRequest","name":"request","type":"tuple","components":[{"internalType":"struct ExecutionTypes.ExecutionRequest","name":"executionRequest","type":"tuple","components":[{"internalType":"address","name":"requester","type":"address"},{"internalType":"struct ExecutionTypes.FeeDetails","name":"fee","type":"tuple","components":[{"internalType":"contract IERC20","name":"feeToken","type":"address"},{"internalType":"address","name":"affiliate","type":"address"},{"internalType":"uint256","name":"affiliatePortion","type":"uint256"}]}]},{"internalType":"struct TokenTypes.TokenAmount","name":"tokenIn","type":"tuple","components":[{"internalType":"uint112","name":"amount","type":"uint112"},{"internalType":"contract IERC20","name":"token","type":"address"}]},{"internalType":"struct TokenTypes.TokenAmount","name":"tokenOut","type":"tuple","components":[{"internalType":"uint112","name":"amount","type":"uint112"},{"internalType":"contract IERC20","name":"token","type":"address"}]},{"internalType":"struct SwapTypes.RouterRequest[]","name":"routes","type":"tuple[]","components":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"struct TokenTypes.TokenAmount","name":"routeAmount","type":"tuple","components":[{"internalType":"uint112","name":"amount","type":"uint112"},{"internalType":"contract IERC20","name":"token","type":"address"}]},{"internalType":"bytes","name":"routerData","type":"bytes"}]}]}],"stateMutability":"nonpayable","type":"function","name":"swap"},{"inputs":[],"stateMutability":"view","type":"function","name":"treasury","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"withdraw"},{"inputs":[],"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/=src/@openzeppelin/","contracts/common/=src/common/","contracts/dexible/=src/dexible/","contracts/token/=src/token/","contracts/vault/=src/vault/","forge-std/=lib/forge-std/src/","hardhat/=src/hardhat/"],"optimizer":{"enabled":true,"runs":100},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"src/dexible/Dexible.sol":"Dexible"},"evmVersion":"london","libraries":{}},"sources":{"src/@openzeppelin/contracts/token/ERC20/ERC20.sol":{"keccak256":"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n","license":"MIT"},"src/@openzeppelin/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n","license":"MIT"},"src/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n","license":"MIT"},"src/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"keccak256":"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n","license":"MIT"},"src/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"keccak256":"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n","license":"MIT"},"src/@openzeppelin/contracts/utils/Address.sol":{"keccak256":"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n","license":"MIT"},"src/@openzeppelin/contracts/utils/Context.sol":{"keccak256":"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n","license":"MIT"},"src/@openzeppelin/contracts/utils/Strings.sol":{"keccak256":"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n","license":"MIT"},"src/@openzeppelin/contracts/utils/math/Math.sol":{"keccak256":"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n","license":"MIT"},"src/common/ExecutionTypes.sol":{"keccak256":"0x4906aad1bdf7e7dcf0f242201693f26990779c50d21da95e98412121fc9d8ff7","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\nimport \"./TokenTypes.sol\";\n\n/**\n * These types only relevant for relay-based submissions through protocol\n */\nlibrary ExecutionTypes {\n\n    /**\n     * Basic fee information which includes any payments to be made to affiliates.\n     */\n    struct FeeDetails {\n\n        //the fee token to pay\n        IERC20 feeToken;\n\n        //affiliate address to pay affiliate fee\n        address affiliate;\n\n        //fee to pay affiliate\n        uint affiliatePortion;\n    }\n\n    /**\n     * Shared information in every execution request. This will evolve \n     * over time to support signatures and privacy proofs as the protocol\n     * decentralizes\n     */\n    struct ExecutionRequest {\n        //account requesting this execution\n        address requester;\n\n        //fees info\n        FeeDetails fee;\n    }\n}","license":"Unlicense"},"src/common/IPausable.sol":{"keccak256":"0x389b2da724bea04ecddbb89ab8cf2ac833724649ae1c95be88a5e15fc0737968","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\ninterface IPausable {\n\n    event Paused();\n    event Resumed();\n\n    function pause() external;\n    function resume() external;\n}","license":"Unlicense"},"src/common/LibConstants.sol":{"keccak256":"0x2f89aba5ce205ae863fa00b2ddf515b210fc4e70885ee46da3a4b22ae8101b8c","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\n/**\n * Constant values used elsewhere\n */\nlibrary LibConstants {\n\n    \n    \n    uint16 constant HOUR = 3600;\n    uint24 constant DAY = 86400;\n\n    //storage and calldata requirements significantly higher when using more than \n    //6decs for USD price precision\n    uint constant USD_PRECISION = 1e6;\n\n    //1_000_000 as a 6-decimal number\n    uint constant MM_VOLUME = 1e12;\n\n    //when doing asset-related math, increase precision accordingly.\n    uint constant PRICE_PRECISION = 1e30;\n\n    //========================================================================\n    // Assignable roles for role-managed contracts\n    //========================================================================\n\n    //allowed to add relays and other role managers\n    string public constant ROLE_MGR = \"ROLE_MANAGER\";\n\n    //allowed to submit execution requests\n    string public constant RELAY = \"RELAY\";\n\n    //========================================================================\n    // Gas adjustment types\n    //========================================================================\n    string public constant SWAP_FAILURE = \"SWAP_FAILURE\";\n    string public constant SWAP_SUCCESS = \"SWAP_SUCCESS\";\n\n}","license":"Unlicense"},"src/common/SwapTypes.sol":{"keccak256":"0xc8aa48ea0c66bd176a535b9479d34a55b3c530d322496447a207a54dea682c3d","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\nimport \"./TokenTypes.sol\";\nimport \"./ExecutionTypes.sol\";\n\n/**\n * Swap data strutures to submit for execution\n */\nlibrary SwapTypes {\n\n    /**\n     * Individual router called to execute some action. Only approved \n     * router addresses will execute successfully\n     */\n    struct RouterRequest {\n        //router contract that handles the specific route data\n        address router;\n\n        //any spend allowance approval required\n        address spender;\n\n        //the amount to send to the router\n        TokenTypes.TokenAmount routeAmount;\n\n        //the data to use for calling the router\n        bytes routerData;\n    }\n\n    /**\n     * Swap request that is restricted to only relay-based executions. This prevents\n     * applying discounts through sybil attacks and affiliate addresses.\n     */\n    struct SwapRequest {\n\n        //general execution request details\n        ExecutionTypes.ExecutionRequest executionRequest;\n\n        //input token and amount\n        TokenTypes.TokenAmount tokenIn;\n\n        //expected min output and amount\n        TokenTypes.TokenAmount tokenOut;\n\n        //array of routes to call to perform swaps\n        RouterRequest[] routes;\n    }\n\n    /**\n     * This is used when the caller is also the trader.\n     */\n    struct SelfSwap {\n        //fee token paying in\n        IERC20 feeToken;\n\n        //input token and full amount\n        /*\n         * NOTE: it's possible to swap native asset vs. wrapped asset when self-submitting. Could\n         * use some standard \"ETH\" address to represent native asset and then verify value sent\n         * with txn. Then wrap that in the token for swapping as part of the trade.\n         */\n        TokenTypes.TokenAmount tokenIn;\n\n        //output token and minimum amount out expected\n        TokenTypes.TokenAmount tokenOut;\n\n        //the routers to call\n        RouterRequest[] routes;\n    }\n}","license":"Unlicense"},"src/common/TokenTypes.sol":{"keccak256":"0x7c1b8d6d3be1e957bb0515dafd8247a724a3b7efc29047220b13b5091585dbd5","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\n\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nlibrary TokenTypes {\n\n    /**\n     * Wrapper structure for token and an amount\n     */\n    struct TokenAmount {\n        uint112 amount;\n        IERC20 token;\n    }\n    \n}","license":"Unlicense"},"src/dexible/Dexible.sol":{"keccak256":"0x64f2f3db2a4198b7bd9126154f5d58e8e569fd55ca2232640e77d3504a571cb9","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\nimport \"./interfaces/IDexible.sol\";\nimport \"./baseContracts/DexibleView.sol\";\nimport \"./baseContracts/SwapHandler.sol\";\nimport \"./baseContracts/ConfigBase.sol\";\n\ncontract Dexible is DexibleView, ConfigBase, SwapHandler, IDexible {\n\n    event ReceivedFunds(address from, uint amount);\n    event WithdrewETH(address indexed admin, uint amount);\n\n    /*\n    constructor(DexibleStorage.DexibleConfig memory config) {\n        configure(config);\n    }\n    */\n    function initialize(DexibleStorage.DexibleConfig calldata config) public {\n        configure(config);\n    }\n\n    receive() external payable {\n       emit ReceivedFunds(msg.sender, msg.value);\n    }\n\n    function swap(SwapTypes.SwapRequest calldata request) external onlyRelay notPaused {\n        //compute how much gas we have at the outset, plus some gas for loading contract, etc.\n        uint startGas = gasleft();\n        SwapMeta memory details = SwapMeta({\n            feeIsInput: false,\n            isSelfSwap: false,\n            startGas: startGas,\n            preSwapVault: address(DexibleStorage.load().communityVault),\n            bpsAmount: 0,\n            gasAmount: 0,\n            nativeGasAmount: 0,\n            toProtocol: 0,\n            toRevshare: 0,\n            outToTrader: 0,\n            preDXBLBalance: 0,\n            outAmount: 0,\n            inputAmountDue: 0\n        });\n\n        bool success = false;\n        //execute the swap but catch any problem\n        try this.fill{\n            gas: gasleft() - 80_000\n        }(request, details) returns (SwapMeta memory sd) {\n            details = sd;\n            success = true;\n        } catch {\n            console.log(\"Swap failed\");\n            success = false;\n        }\n\n        postFill(request, details, success);\n    }\n\n    function selfSwap(SwapTypes.SelfSwap calldata request) external notPaused {\n        //we create a swap request that has no affiliate attached and thus no\n        //automatic discount.\n        SwapTypes.SwapRequest memory swapReq = SwapTypes.SwapRequest({\n            executionRequest: ExecutionTypes.ExecutionRequest({\n                fee: ExecutionTypes.FeeDetails({\n                    feeToken: request.feeToken,\n                    affiliate: address(0),\n                    affiliatePortion: 0\n                }),\n                requester: msg.sender\n            }),\n            tokenIn: request.tokenIn,\n            tokenOut: request.tokenOut,\n            routes: request.routes\n        });\n        SwapMeta memory details = SwapMeta({\n            feeIsInput: false,\n            isSelfSwap: true,\n            startGas: 0,\n            preSwapVault: address(DexibleStorage.load().communityVault),\n            bpsAmount: 0,\n            gasAmount: 0,\n            nativeGasAmount: 0,\n            toProtocol: 0,\n            toRevshare: 0,\n            outToTrader: 0,\n            preDXBLBalance: 0,\n            outAmount: 0,\n            inputAmountDue: 0\n        });\n        details = this.fill(swapReq, details);\n        postFill(swapReq, details, true);\n    }\n\n    function withdraw(uint amount) public onlyAdmin {\n        address payable rec = payable(msg.sender);\n        require(rec.send(amount), \"Transfer failed\");\n        emit WithdrewETH(msg.sender, amount);\n    }\n}\n\n","license":"Unlicense"},"src/dexible/DexibleStorage.sol":{"keccak256":"0xf9afdbd57c2ed084edb6ab3f51c9816a1d0f1b4150efde31a630b1f795d55c1e","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\nimport \"../token/IDXBL.sol\";\nimport \"./oracles/IArbitrumGasOracle.sol\";\nimport \"../vault/interfaces/ICommunityVault.sol\";\nimport \"./oracles/IStandardGasAdjustments.sol\";\n\nlibrary DexibleStorage {\n    bytes32 constant DEXIBLE_STORAGE_KEY = 0x949817a987a8e038ef345d3c9d4fd28e49d8e4e09456e57c05a8b2ce2e62866c;\n\n    //primary initialization config settings\n    struct DexibleConfig {\n        \n        //percent to split to revshare\n        uint8 revshareSplitRatio;\n\n        //std bps rate to apply to all trades\n        uint16 stdBpsRate;\n\n        //minimum bps rate regardless of tokens held\n        uint16 minBpsRate;\n\n        //multi sig allowed to change settings\n        address adminMultiSig;\n\n        //the vault contract\n        address communityVault;\n\n        //treasury for Dexible team\n        address treasury;\n\n        //the DXBL token address\n        address dxblToken;\n\n        //arbitrum gas oracle contract address\n        address arbGasOracle;\n\n        //contract that manages the standard gas adjustment types\n        address stdGasAdjustment;\n\n        //minimum flat fee to charge if bps fee is too low\n        uint112 minFeeUSD;\n\n        //whitelisted relays to allow\n        address[] initialRelays;\n\n    }\n\n    /**\n     * This is the primary storage for Dexible operations.\n     */\n    struct DexibleData {\n\n        //whether contract has been paused\n        bool paused;\n\n        //how much of fee goes to revshare vault\n        uint8 revshareSplitRatio;\n         \n        //standard bps fee rate\n        uint16 stdBpsRate;\n\n        //minimum fee applied regardless of tokens held\n        uint16 minBpsRate;\n\n        //min fee to charge if bps too low\n        uint112 minFeeUSD;\n        \n        //vault address\n        ICommunityVault communityVault;\n\n        //treasury address\n        address treasury;\n\n        //multi-sig that manages this contract\n        address adminMultiSig;\n\n        //the DXBL token\n        IDXBL dxblToken;\n\n        //gas oracle for arb network\n        IArbitrumGasOracle arbitrumGasOracle;\n\n        IStandardGasAdjustments stdGasAdjustment;\n\n        //whitelisted relay wallets\n        mapping(address => bool) relays;\n    }\n\n    function load() internal pure returns (DexibleData storage ds) {\n        assembly { ds.slot := DEXIBLE_STORAGE_KEY }\n    }\n}","license":"Unlicense"},"src/dexible/LibFees.sol":{"keccak256":"0x4c616342a267f09800640a8daa19d8efeb679f8e7d95ace50820c4233e1414db","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\nimport \"./oracles/IOptimismGasOracle.sol\";\nimport \"./DexibleStorage.sol\";\nimport \"../common/LibConstants.sol\";\nimport \"./oracles/IStandardGasAdjustments.sol\";\nimport \"hardhat/console.sol\";\n\nlibrary LibFees {\n\n    //special handling for L2s that impose an L1 rollup fee\n    uint constant ARB = 42161;\n    uint constant OPT = 10;\n    IOptimismGasOracle constant optGasOracle = IOptimismGasOracle(0x420000000000000000000000000000000000000F);\n\n    function computeGasCost(uint gasUsed, bool success) internal view returns(uint) {\n        DexibleStorage.DexibleData storage ds = DexibleStorage.load();\n        uint add = ds.stdGasAdjustment.adjustment(success ? LibConstants.SWAP_SUCCESS : LibConstants.SWAP_FAILURE);\n        gasUsed += add;\n        //console.log(\"Gas used to compute cost in fee token\", gasUsed, \"after adding\", add);\n        uint cid;\n        assembly {\n            cid := chainid()\n        }\n        if(cid == ARB) {\n            return ds.arbitrumGasOracle.calculateGasCost(msg.data.length, gasUsed);\n        }\n        if(cid == OPT) {\n            return (tx.gasprice * gasUsed) + optGasOracle.getL1Fee(msg.data);\n        }\n       // console.log(\"Gas fee\", tx.gasprice * gasUsed);\n        return tx.gasprice * gasUsed;\n    }\n\n    function computeMinFeeUnits(address feeToken) internal view returns (uint) {\n        DexibleStorage.DexibleData storage rs = DexibleStorage.load();\n        if(rs.minFeeUSD == 0) {\n            return 0;\n        }\n\n        //fee token price is in 30-dec units.\n        uint usdPrice = rs.communityVault.feeTokenPriceUSD(feeToken);\n\n        uint8 ftDecs = IERC20Metadata(feeToken).decimals();\n\n        //fee USD configuration is expressed in 18-decimals. Have to convert to fee-token units and \n        //account for price units\n        uint minFeeUSD = (rs.minFeeUSD * (ftDecs != 18 ? ((10**ftDecs) / 1e18) : 1)) * LibConstants.PRICE_PRECISION;\n\n        //then simply divide to get fee token units that equate to min fee USD\n        return  minFeeUSD / usdPrice;\n    }\n}","license":"Unlicense"},"src/dexible/baseContracts/AdminBase.sol":{"keccak256":"0x63c015ed2d03be64f946e46c4cabca74eabb3dd3b85c08f8db2fe1d38f6e99e0","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\nimport \"../../common/IPausable.sol\";\nimport \"../DexibleStorage.sol\";\n\nabstract contract AdminBase {\n    \n    modifier notPaused() {\n        require(!DexibleStorage.load().paused, \"Contract operations are paused\");\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == DexibleStorage.load().adminMultiSig, \"Unauthorized\");\n        _;\n    }\n\n    modifier onlyVault() {\n        require(msg.sender == address(DexibleStorage.load().communityVault), \"Only vault can execute this function\");\n        _;\n    }\n\n    modifier onlyRelay() {\n        DexibleStorage.DexibleData storage dd = DexibleStorage.load();\n        require(dd.relays[msg.sender], \"Only relay allowed to call\");\n        _;\n    }\n\n    modifier onlySelf() {\n        require(msg.sender == address(this), \"Only allowed as internal call\");\n        _;\n    }\n\n}","license":"Unlicense"},"src/dexible/baseContracts/ConfigBase.sol":{"keccak256":"0x1c94425f983c800652d51a37422830c379865c7d8b886db31b2f5e025fb8ce08","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\nimport \"../interfaces/IDexibleConfig.sol\";\nimport \"../DexibleStorage.sol\";\nimport \"./AdminBase.sol\";\n\nabstract contract ConfigBase is AdminBase, IDexibleConfig {\n\n    event ConfigChanged(DexibleStorage.DexibleConfig config);\n    event RelayAdded(address relay);\n    event RelayRemoved(address relay);\n    event StdGasAdjustmentChanged(address newContract);\n\n    function configure(DexibleStorage.DexibleConfig calldata config) public {\n        DexibleStorage.DexibleData storage ds = DexibleStorage.load();\n        if(ds.adminMultiSig != address(0)) {\n            require(msg.sender == ds.adminMultiSig, \"Unauthorized\");\n        }\n\n        require(config.communityVault != address(0), \"Invalid CommunityVault address\");\n        require(config.treasury != address(0), \"Invalid treasury\");\n        require(config.dxblToken != address(0), \"Invalid DXBL token address\");\n        require(config.revshareSplitRatio > 0, \"Invalid revshare split ratio\");\n        require(config.stdBpsRate > 0, \"Must provide a standard bps fee rate\");\n        require(config.minBpsRate > 0, \"minBpsRate is required\");\n        require(config.minBpsRate < config.stdBpsRate, \"Min bps rate must be less than std\");\n        require(config.stdGasAdjustment != address(0), \"Invalid stdGasAdjustment address\");\n\n        ds.adminMultiSig = config.adminMultiSig;\n        ds.revshareSplitRatio = config.revshareSplitRatio;\n        ds.communityVault = ICommunityVault(config.communityVault);\n        ds.treasury = config.treasury;\n        ds.dxblToken = IDXBL(config.dxblToken);\n        ds.stdBpsRate = config.stdBpsRate;\n        ds.minBpsRate = config.minBpsRate;\n        ds.minFeeUSD = config.minFeeUSD; //can be 0\n        ds.arbitrumGasOracle = IArbitrumGasOracle(config.arbGasOracle);\n        ds.stdGasAdjustment = IStandardGasAdjustments(config.stdGasAdjustment);\n\n        for(uint i=0;i<config.initialRelays.length;++i) {\n            ds.relays[config.initialRelays[i]] = true;\n        }\n        emit ConfigChanged(config);\n    }\n\n    function addRelays(address[] calldata relays) external onlyAdmin {\n        DexibleStorage.DexibleData storage ds = DexibleStorage.load();\n        for(uint i=0;i<relays.length;++i) {\n            ds.relays[relays[i]] = true;\n            emit RelayAdded(relays[i]);\n        }\n    }\n\n    function removeRelay(address relay) external onlyAdmin {\n        DexibleStorage.DexibleData storage ds = DexibleStorage.load();\n        delete ds.relays[relay];\n        emit RelayRemoved(relay);\n    }\n\n    function setRevshareSplitRatio(uint8 bps) external onlyAdmin {\n        DexibleStorage.load().revshareSplitRatio = bps;\n        emit SplitRatioChanged(bps);\n    }\n         \n    function setStdBpsRate(uint16 bps) external onlyAdmin {\n        DexibleStorage.load().stdBpsRate = bps;\n        emit StdBpsChanged(bps);\n    }\n\n    function setMinBpsRate(uint16 bps) external onlyAdmin {\n        DexibleStorage.load().minBpsRate = bps;\n        emit MinBpsChanged(bps);\n    }\n\n    function setMinFeeUSD(uint112 minFee) external onlyAdmin {\n        DexibleStorage.load().minFeeUSD = minFee;\n        emit MinFeeChanged(minFee);\n    }\n        \n    function setCommunityVault(ICommunityVault vault) external onlyVault {\n        DexibleStorage.load().communityVault = vault;\n        emit VaultChanged(address(vault));\n    }\n\n    function setTreasury(address t) external onlyAdmin {\n        DexibleStorage.load().treasury = t;\n        emit TreasuryChanged(t);\n    }\n    \n    function setArbitrumGasOracle(IArbitrumGasOracle oracle) external onlyAdmin {\n        DexibleStorage.load().arbitrumGasOracle = oracle;\n        emit ArbGasOracleChanged(address(oracle));\n    }\n\n    function pause() external onlyAdmin {\n        DexibleStorage.load().paused = true;\n        emit Paused();\n    }\n\n    function resume() external onlyAdmin {\n        DexibleStorage.load().paused = false;\n        emit Resumed();\n    }\n\n    function setStdGasAdjustmentContract(address con) external onlyAdmin {\n        require(con != address(0), \"Invalid contract address\");\n        DexibleStorage.load().stdGasAdjustment = IStandardGasAdjustments(con);\n        emit StdGasAdjustmentChanged(con);\n    }\n}","license":"Unlicense"},"src/dexible/baseContracts/DexibleView.sol":{"keccak256":"0x2e397572b7a8827be41b3c55d576da2212f66ce7f41e57d1787f072813cc8d5c","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\nimport \"../interfaces/IDexibleView.sol\";\nimport \"../DexibleStorage.sol\";\n\nabstract contract DexibleView is IDexibleView {\n\n    function revshareSplitRatio() external view returns (uint8){\n        return DexibleStorage.load().revshareSplitRatio;\n    }\n         \n    function stdBpsRate() external view returns (uint16){\n        return DexibleStorage.load().stdBpsRate;\n    }\n\n    function minBpsRate() external view returns (uint16){\n        return DexibleStorage.load().minBpsRate;\n    }\n\n    function minFeeUSD() external view returns (uint112){\n        return DexibleStorage.load().minFeeUSD;\n    }\n        \n    function communityVault() external view returns(address){\n        return address(DexibleStorage.load().communityVault);\n    }\n\n    function adminMultiSig() external view returns(address) {\n        return DexibleStorage.load().adminMultiSig;\n    }\n\n    function treasury() external view returns (address){\n        return DexibleStorage.load().treasury;\n    }\n\n    function dxblToken() external view returns(address){\n        return address(DexibleStorage.load().dxblToken);\n    }\n    \n    function arbitrumGasOracle() external view returns(address){\n        return address(DexibleStorage.load().arbitrumGasOracle);\n    }\n\n    function stdGasAdjustmentContract() external view returns (address) {\n        return address(DexibleStorage.load().stdGasAdjustment);\n    }\n}","license":"Unlicense"},"src/dexible/baseContracts/SwapHandler.sol":{"keccak256":"0xe357981dd93f16276c47261116aac4095cf4360a4b26e9a32c99b498f8a8992e","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\nimport \"../interfaces/ISwapHandler.sol\";\nimport \"../DexibleStorage.sol\";\nimport \"./AdminBase.sol\";\nimport \"../../vault/interfaces/ICommunityVault.sol\";\nimport \"../LibFees.sol\";\n\nimport \"hardhat/console.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nabstract contract SwapHandler is AdminBase, ISwapHandler {\n\n    using SafeERC20 for IERC20;\n\n    struct SwapMeta {\n        bool feeIsInput;\n        bool isSelfSwap;\n        //if a migration occurs during a swap, we don't want to charge\n        //the trader for the txn if possible\n        address preSwapVault;\n        uint startGas;\n        uint toProtocol;\n        uint toRevshare;\n        uint outToTrader;\n        uint outAmount;\n        uint bpsAmount;\n        uint gasAmount;\n        uint nativeGasAmount;\n        uint preDXBLBalance;\n        uint inputAmountDue;\n    }\n\n\n    function fill(SwapTypes.SwapRequest calldata request, SwapMeta memory meta) external onlySelf returns (SwapMeta memory)  {\n\n        preCheck(request, meta);\n        meta.outAmount = request.tokenOut.token.balanceOf(address(this));\n        \n        for(uint i=0;i<request.routes.length;++i) {\n            SwapTypes.RouterRequest calldata rr = request.routes[i];\n            IERC20(rr.routeAmount.token).safeApprove(rr.spender, rr.routeAmount.amount);\n            (bool s, ) = rr.router.call(rr.routerData);\n\n            if(!s) {\n                revert(\"Failed to swap\");\n            }\n        }\n        uint out = request.tokenOut.token.balanceOf(address(this));\n        if(meta.outAmount < out) {\n            meta.outAmount = out - meta.outAmount;\n        } else {\n            meta.outAmount = 0;\n        }\n        \n        console.log(\"Expected\", request.tokenOut.amount, \"Received\", meta.outAmount);\n        //first, make sure enough output was generated\n        require(meta.outAmount >= request.tokenOut.amount, \"Insufficient output generated\");\n        return meta;\n    }\n\n    function postFill(SwapTypes.SwapRequest memory request, SwapMeta memory meta, bool success) internal  {\n\n        if(success) {\n            //if we succeeded, then do successful post-swap ops\n            handleSwapSuccess(request, meta); \n        }  else {\n            //otherwise, handle as a failure\n            handleSwapFailure(request, meta);\n        }\n        //pay the relayer their gas fee if we have funds for it\n        payRelayGas(meta.nativeGasAmount);\n    }\n\n    /**\n     * When a relay-based swap fails, we need to account for failure gas fees if the input\n     * token is the fee token. That's what this function does\n     */\n    function handleSwapFailure(SwapTypes.SwapRequest memory request, SwapMeta memory meta) internal {\n       \n        DexibleStorage.DexibleData storage dd = DexibleStorage.load();\n        uint gasInFeeToken = 0;\n        if(meta.feeIsInput) {\n            unchecked { \n                //the total gas used thus far plus some post-op stuff that needs to get done\n                uint totalGas = (meta.startGas - gasleft());\n                \n                console.log(\"Estimated gas used for failed gas payment\", totalGas);\n                meta.nativeGasAmount = LibFees.computeGasCost(totalGas, false);\n            }\n\n            gasInFeeToken = dd.communityVault.convertGasToFeeToken(address(request.executionRequest.fee.feeToken), meta.nativeGasAmount);\n\n            //console.log(\"Transferring partial input token to devteam for failure gas fees\");\n            \n            //console.log(\"Failed gas fee\", gasInFeeToken);\n\n            //transfer input assets from trader to treasury. Recall that any previous transfer amount\n            //to this contract was rolled back on failure, so we transfer the funds for gas only\n            request.executionRequest.fee.feeToken.safeTransferFrom(request.executionRequest.requester, dd.treasury, gasInFeeToken);\n        }\n        \n        emit SwapFailed(request.executionRequest.requester, address(request.executionRequest.fee.feeToken), gasInFeeToken);\n    }\n\n    /**\n     * This is called when a relay-based swap is successful. It basically rewards DXBL tokens\n     * to trader and pays appropriate fees.\n     */\n    function handleSwapSuccess(SwapTypes.SwapRequest memory request, \n                SwapMeta memory meta) internal {\n        \n        //reward trader with DXBL tokens\n        collectDXBL(request, meta.feeIsInput, meta.outAmount);\n\n        //pay fees\n        payAndDistribute(request, meta);\n    }\n\n    /**\n     * Reward DXBL to the trader\n     */\n    function collectDXBL(SwapTypes.SwapRequest memory request, bool feeIsInput, uint outAmount) internal {\n        DexibleStorage.DexibleData storage dd = DexibleStorage.load();\n\n        uint value = 0;\n        if(feeIsInput) {\n            //when input, the total input amount is used to determine reward rate\n            value = request.tokenIn.amount;\n        } else {\n            //otherwise, it's the output generated from the swap\n            value = outAmount;\n        }\n        //Dexible is the only one allowed to ask the vault to mint tokens on behalf of a trader\n        //See RevshareVault for logic of minting rewards\n\n        //NOTE: a migration to a new vault could occur as part of this call. It would just \n        //change the address of the vault in storage and all proceeds would be forwarded to \n        //the new vault address. All minting occurs before the migration so mint rates and \n        //token balances are all forwarded to the new vault as part of the migration. It is \n        //possible, however, that gas estimates would not account for the migration.\n        dd.communityVault.rewardTrader(request.executionRequest.requester, address(request.executionRequest.fee.feeToken), value);\n    }\n\n\n    /**\n     * Distribute payments to revshare pool, affiliates, treasury, and trader\n     */\n    function payAndDistribute(SwapTypes.SwapRequest memory request, \n                                SwapMeta memory meta) internal  {\n        allocateRevshareAndAffiliate(request, meta);\n        payProtocolAndTrader(request, meta);\n    }\n\n    /**\n     * Allocate bps portions to revshare pool and any associated affiliate\n     */\n    function allocateRevshareAndAffiliate(SwapTypes.SwapRequest memory request, \n                                SwapMeta memory meta) internal view {\n\n        DexibleStorage.DexibleData storage dd = DexibleStorage.load();\n\n        //assume trader gets all output\n        meta.outToTrader = meta.outAmount;\n\n        //the bps portion of fee. \n        meta.bpsAmount = computeBpsFee(request, meta.feeIsInput, meta.preDXBLBalance, meta.outAmount);\n    \n        //console.log(\"Total bps fee\", payments.bpsAmount);\n        uint minFee = LibFees.computeMinFeeUnits(address(request.executionRequest.fee.feeToken));\n        if(minFee > meta.bpsAmount) {\n            //console.log(\"Trade too small. Charging minimum flat fee\", minFee);\n            meta.bpsAmount = minFee;\n        }\n\n        //revshare pool gets portion of bps fee collected\n        meta.toRevshare = (meta.bpsAmount * dd.revshareSplitRatio) / 100;\n\n        //console.log(\"To revshare\", meta.toRevshare);\n\n        //protocol gets remaining bps but affiliate fees come out of its portion. Will revert if\n        //Dexible miscalculated the affiliate reward portion. However, the call would revert here and\n        //Dexible relay would pay the gas fee for its mistake. Self-swap has no affiliate so no revert\n        //would happen.\n        require(request.executionRequest.fee.affiliatePortion < meta.bpsAmount-meta.toRevshare, \"Miscalculated affiliate portion\");\n        meta.toProtocol = (meta.bpsAmount-meta.toRevshare) - request.executionRequest.fee.affiliatePortion;\n\n        //console.log(\"Protocol pre-gas\", meta.toProtocol);\n\n        //fees accounted for thus far\n        uint total = meta.toRevshare + meta.toProtocol + request.executionRequest.fee.affiliatePortion;\n            \n        if(!meta.feeIsInput) {\n            //this is an interim calculation. Gas fees get deducted later as well. This will\n            //also revert if insufficient output was generated to cover all fees\n            //console.log(\"Out amount\", meta.outAmount, \"Total fees so far\", total);\n            if(meta.outAmount < total) {\n                revert(\n                    string(\n                        abi.encodePacked(\n                            _concatUintString(\"Insufficient output to pay bps fees. Required: \", total),\n                            _concatUintString(\" Output amount: \", meta.outAmount)\n                        )\n                    )\n                );\n            }\n            meta.outToTrader = meta.outAmount - total;\n        } else {\n            //input debits are handled later so we keep track of what's due so far in bps fees\n            meta.inputAmountDue = total;\n        }\n    }\n\n    /**\n     * Final step to compute gas consumption for trader and pay the vault, protocol, affiliate, and trader \n     * their portions.\n     */\n    function payProtocolAndTrader(SwapTypes.SwapRequest memory request,\n                            SwapMeta memory meta) internal {\n        \n        DexibleStorage.DexibleData storage dd = DexibleStorage.load();\n\n        if(!meta.isSelfSwap) {\n            //If this was a relay-based swap, we need to pay treasury an estimated gas fee\n            \n            //we leave unguarded for gas savings since we know start gas is always higher \n            //than used and will never rollover without costing an extremely large amount of $$\n            unchecked { \n                //console.log(\"Start gas\", meta.startGas, \"Left\", gasleft());\n\n                //the total gas used thus far plus some post-op buffer for transfers and events\n                uint totalGas = (meta.startGas - gasleft());\n                if(address(dd.communityVault) != meta.preSwapVault && totalGas > 200_000) {\n                    totalGas -= 200_000; //give credit for estimated migration gas\n                }\n                \n                console.log(\"Estimated gas used for trader gas payment\", totalGas);\n                meta.nativeGasAmount = LibFees.computeGasCost(totalGas, true); //(totalGas * tx.gasprice);\n            }\n            //use price oracle in vault to get native price in fee token\n            meta.gasAmount = dd.communityVault.convertGasToFeeToken(address(request.executionRequest.fee.feeToken), meta.nativeGasAmount);\n            //console.log(\"Gas paid by trader in fee token\", meta.gasAmount);\n\n            //add gas payment to treasury portion\n            meta.toProtocol += meta.gasAmount;\n            //console.log(\"Payment to protocol\", meta.toProtocol);\n\n            if(!meta.feeIsInput) {\n                //if output was fee, deduct gas payment from proceeds, revert if there isn't enough output\n                //for it (should have been caught offchain before submit). We make sure the trader gets \n                //something out of the deal by ensuring output is more than gas.\n                if(meta.outToTrader <= meta.gasAmount) {\n                    revert(\n                        string(\n                            abi.encodePacked(\n                                _concatUintString(\"Insufficient output to pay gas fees. Required: \", meta.gasAmount),\n                                _concatUintString(\" Trader output proceeds: \", meta.outToTrader)\n                            )\n                        )\n                    );\n                }\n                meta.outToTrader -= meta.gasAmount;\n            } else {\n                //other make sure it's account for as input debit\n                meta.inputAmountDue += meta.gasAmount;\n            }\n            //console.log(\"Proceeds to trader\", payments.outToTrader);\n        }\n\n        //now distribute fees\n        IERC20 feeToken = request.executionRequest.fee.feeToken;\n        if(meta.feeIsInput) {\n            //make sure we didn't overspend on trading input amount and not have enough to cover\n            //fees\n            uint totalInputSpent = request.routes[0].routeAmount.amount + meta.inputAmountDue;\n            //console.log(\"Total input spent\", totalInputSpent, \"Expected input amount\", request.tokenIn.amount);\n            if(totalInputSpent > request.tokenIn.amount) {\n                revert(\n                    string(\n                        abi.encodePacked(_concatUintString(\"Attempt to spend more input than anticipated. Total required: \", totalInputSpent),\n                                        _concatUintString(\" Max input: \", request.tokenIn.amount))\n                    )\n                );\n            }\n            //pay protocol from input token\n            feeToken.safeTransferFrom(request.executionRequest.requester, dd.treasury, meta.toProtocol);\n\n            //pay vault from input token\n            feeToken.safeTransferFrom(request.executionRequest.requester, address(dd.communityVault), meta.toRevshare);\n            if(request.executionRequest.fee.affiliatePortion > 0) {\n                //pay affiliate their portion which was deducted from protocol's bps portion\n                feeToken.safeTransferFrom(request.executionRequest.requester, request.executionRequest.fee.affiliate, request.executionRequest.fee.affiliatePortion);\n                emit AffiliatePaid(request.executionRequest.fee.affiliate, address(feeToken), request.executionRequest.fee.affiliatePortion);\n            }\n        } else {\n            //otherwise, transfer directly from generated output\n            //console.log(\"Total output spent\", (meta.toProtocol + meta.toRevshare + request.executionRequest.fee.affiliatePortion));\n            //console.log(\"Total output generated\", meta.outAmount);\n            feeToken.safeTransfer(dd.treasury, meta.toProtocol);\n            feeToken.safeTransfer(address(dd.communityVault), meta.toRevshare);\n            if(request.executionRequest.fee.affiliatePortion > 0) {\n                //pay affiliate their portion\n                feeToken.safeTransfer(request.executionRequest.fee.affiliate, request.executionRequest.fee.affiliatePortion);\n                emit AffiliatePaid(request.executionRequest.fee.affiliate, address(feeToken), request.executionRequest.fee.affiliatePortion);\n            }\n        }\n        \n        //and send trader their proceeds\n        request.tokenOut.token.safeTransfer(request.executionRequest.requester, meta.outToTrader);\n        \n        emit SwapSuccess(request.executionRequest.requester,\n                    request.executionRequest.fee.affiliate,\n                    request.tokenOut.amount,\n                    meta.outToTrader, \n                    address(request.executionRequest.fee.feeToken),\n                    meta.gasAmount,\n                    request.executionRequest.fee.affiliatePortion,\n                    meta.bpsAmount); \n    }\n\n    function preCheck(SwapTypes.SwapRequest calldata request, SwapMeta memory meta) internal {\n        //make sure fee token is allowed\n        address fToken = address(request.executionRequest.fee.feeToken);\n        DexibleStorage.DexibleData storage dd = DexibleStorage.load();\n        require(\n            dd.communityVault.isFeeTokenAllowed(fToken), \n            \"Fee token is not allowed\"\n        );\n\n        //and that it's one of the tokens swapped\n        require(fToken == address(request.tokenIn.token) ||\n                fToken == address(request.tokenOut.token), \n                \"Fee token must be input or output token\");\n\n         //get the current DXBL balance at the start to apply discounts\n        meta.preDXBLBalance = dd.dxblToken.balanceOf(request.executionRequest.requester);\n        \n        //flag whether the input token is the fee token\n        meta.feeIsInput = address(request.tokenIn.token) == address(request.executionRequest.fee.feeToken);\n        \n        //transfer input tokens for router so it can perform swap\n        //console.log(\"Transfering input for trading:\", request.routes[0].routeAmount.amount);\n        request.tokenIn.token.safeTransferFrom(request.executionRequest.requester, address(this), request.routes[0].routeAmount.amount);\n        //console.log(\"Expected output\", request.tokenOut.amount);\n    }\n\n\n    /**\n     * Pay the relay with gas funds stored in this contract. The gas used provided \n     * does not include arbitrum multiplier but may include additional amount for post-op\n     * gas estimates.\n     */\n    function payRelayGas(uint gasFee) internal {\n        if(gasFee == 0) {\n            return;\n        }\n        \n        //console.log(\"Relay Gas Reimbursement\", gasFee);\n        //if there is ETH in the contract, reimburse the relay that called the fill function\n        if(address(this).balance < gasFee) {\n            //console.log(\"Cannot reimburse relay since do not have enough funds\");\n            emit InsufficientGasFunds(msg.sender, gasFee);\n        } else {\n            //console.log(\"Transfering gas fee to relay\");\n            payable(msg.sender).transfer(gasFee);\n            emit PaidGasFunds(msg.sender, gasFee);\n        }\n    }\n\n    /**\n     * Compute the bps to charge for the swap. This leverages the DXBL token to compute discounts\n     * based on trader balances and discount rates applied per DXBL token.\n     */\n    function computeBpsFee(SwapTypes.SwapRequest memory request, bool feeIsInput, uint preDXBL, uint outAmount) internal view returns (uint) {\n        //apply any discounts\n        DexibleStorage.DexibleData storage ds = DexibleStorage.load();\n        \n        return ds.dxblToken.computeDiscountedFee(\n            IDXBL.FeeRequest({\n                trader: request.executionRequest.requester,\n                amt: feeIsInput ? request.tokenIn.amount : outAmount,\n                referred: request.executionRequest.fee.affiliate != address(0),\n                dxblBalance: preDXBL,\n                stdBpsRate: ds.stdBpsRate,\n                minBpsRate: ds.minBpsRate\n            }));\n    }\n\n    function _concatUintString(string memory s, uint val) private pure returns(string memory) {\n        return string(abi.encodePacked(s, Strings.toString(val)));\n    }\n}","license":"Unlicense"},"src/dexible/interfaces/IDexible.sol":{"keccak256":"0x463dc2050dbcf1fdc67d2a23c9b6fc6d02c562e4748a80a5489f0a0c88d8ef41","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\nimport \"./IDexibleView.sol\";\nimport \"./ISwapHandler.sol\";\nimport \"./IDexibleEvents.sol\";\nimport \"./IDexibleConfig.sol\";\n\ninterface IDexible is IDexibleView, IDexibleConfig, ISwapHandler {\n\n    \n}","license":"Unlicense"},"src/dexible/interfaces/IDexibleConfig.sol":{"keccak256":"0x78b8f2ff100f808f61a2a4965b8f89b4f156f5dbea372e15bea397088ee6b64b","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\nimport \"../../vault/interfaces/ICommunityVault.sol\";\nimport \"../oracles/IArbitrumGasOracle.sol\";\nimport \"../../common/IPausable.sol\";\n\ninterface IDexibleConfig is IPausable {\n\n    event SplitRatioChanged(uint8 newRate);\n    event StdBpsChanged(uint16 newRate);\n    event MinBpsChanged(uint16 newRate);\n    event MinFeeChanged(uint112 newMin);\n    event VaultChanged(address newVault);\n    event TreasuryChanged(address newTreasury);\n    event ArbGasOracleChanged(address newVault);\n\n    function setRevshareSplitRatio(uint8 bps) external;\n         \n    function setStdBpsRate(uint16 bps) external;\n\n    function setMinBpsRate(uint16 bps) external;\n\n    function setMinFeeUSD(uint112 minFee) external;\n        \n    function setCommunityVault(ICommunityVault vault) external;\n\n    function setTreasury(address t) external;\n    \n    function setArbitrumGasOracle(IArbitrumGasOracle oracle) external;\n}","license":"Unlicense"},"src/dexible/interfaces/IDexibleEvents.sol":{"keccak256":"0xda9c72c976099e0596c803d099da427978875f124b3c6e78a8e92a50a84c3d4c","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\ninterface IDexibleEvents {\n\n    event SwapFailed(address indexed trader, \n                     address feeToken, \n                     uint gasFeePaid);\n    event SwapSuccess(address indexed trader,\n                        address indexed affiliate,\n                        uint inputAmount,\n                        uint outputAmount,\n                        address feeToken,\n                        uint gasFee,\n                        uint affiliateFee,\n                        uint dexibleFee);\n    event AffiliatePaid(address indexed affiliate, address token, uint amount);\n\n    event PaidGasFunds(address indexed relay, uint amount);\n    event InsufficientGasFunds(address indexed relay, uint amount);\n    event ChangedRevshareVault(address indexed old, address indexed newRevshare);\n    event ChangedRevshareSplit(uint8 split);\n    event ChangedBpsRates(uint32 stdRate, uint32 minRate);\n    \n}","license":"Unlicense"},"src/dexible/interfaces/IDexibleView.sol":{"keccak256":"0x53a6a5d7652501593fd1f3ece41fad990bc1eed785884476730df3f4fa31b1bf","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\ninterface IDexibleView {\n    function revshareSplitRatio() external view returns (uint8);\n         \n    function stdBpsRate() external view returns (uint16);\n\n    function minBpsRate() external view returns (uint16);\n\n    function minFeeUSD() external view returns (uint112);\n        \n    function communityVault() external view returns(address);\n\n    function treasury() external view returns (address);\n\n    function dxblToken() external view returns(address);\n\n    function arbitrumGasOracle() external view returns(address);\n}","license":"Unlicense"},"src/dexible/interfaces/ISwapHandler.sol":{"keccak256":"0x2086cbc9aac7ee424571e0c6f086256f2dddff56e248e29acac51f2349a18e86","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\nimport \"../../common/SwapTypes.sol\";\nimport \"./IDexibleEvents.sol\";\n\ninterface ISwapHandler is IDexibleEvents {\n\n    function swap(SwapTypes.SwapRequest calldata request) external;\n    function selfSwap(SwapTypes.SelfSwap calldata request) external;\n}","license":"Unlicense"},"src/dexible/oracles/IArbitrumGasOracle.sol":{"keccak256":"0x1d3c8517ccbbeca13982398e259fcdf645c34b3e003808bbd21c311594d59097","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\ninterface IArbitrumGasOracle {\n    function calculateGasCost(uint callDataSize, uint l2GasUsed) external view returns (uint);\n}","license":"Unlicense"},"src/dexible/oracles/IOptimismGasOracle.sol":{"keccak256":"0x08829b70cb6018c936302048444030535a53d5002ca65ac3a5154afa8bc064ac","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\ninterface IOptimismGasOracle {\n    \n    function getL1Fee(bytes calldata data) external view returns(uint);\n}","license":"Unlicense"},"src/dexible/oracles/IStandardGasAdjustments.sol":{"keccak256":"0x80e322f6beaf9c77f5bab66b2b3a9bb309064400a61b4857c25952e8f4631745","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\ninterface IStandardGasAdjustments {\n\n    function adjustment(string memory adjType) external view returns (uint);\n}","license":"Unlicense"},"src/hardhat/console.sol":{"keccak256":"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n\t}\n\n\tfunction logUint(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n","license":"MIT"},"src/token/IDXBL.sol":{"keccak256":"0x5c7e94839ff1ff8d19ed800cbb7a9af9ea24d178ec1cca6c84c0b914636494ef","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IDXBL is IERC20, IERC20Metadata {\n    struct FeeRequest {\n        bool referred;\n        address trader;\n        uint amt;\n        uint dxblBalance;\n        uint16 stdBpsRate;\n        uint16 minBpsRate;\n    }\n\n    function minter() external view returns (address);\n    function discountPerTokenBps() external view returns(uint32);\n\n    function mint(address acct, uint amt) external;\n    function burn(address holder, uint amt) external;\n    function setDiscountRate(uint32 discount) external;\n    function setNewMinter(address minter) external;\n    function computeDiscountedFee(FeeRequest calldata request) external view returns(uint);\n}","license":"Unlicense"},"src/vault/VaultStorage.sol":{"keccak256":"0x06f4025a6c0778c764e67e3605488a0e1ae0fba4a98bb9dbdd2952afa61efde5","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\nimport \"../token/IDXBL.sol\";\nimport \"./interfaces/IPriceFeed.sol\";\n\nlibrary VaultStorage {\n\n    bytes32 constant VAULT_STORAGE_KEY = 0xbfa76ec2967ed7f8d3d40cd552f1451ab03573b596bfce931a6a016f7733078c;\n\n    \n    //mint rate bucket\n    struct MintRateRangeConfig {\n        uint16 minMMVolume;\n        uint16 maxMMVolume;\n        uint rate;\n    }\n\n    //fee token and its associated chainlink feed\n    struct FeeTokenConfig {\n        address[] feeTokens;\n        address[] priceFeeds;\n    }\n\n    //initialize config to intialize storage\n    struct VaultConfig {\n\n        //the address of the wrapped native token\n        address wrappedNativeToken;\n\n        //address of the multisig that will administer this vault\n        address adminMultiSig;\n\n\n        //seconds for any timelock-based changes\n        uint32 timelockSeconds;\n\n        //starting volume needed to mint a single DXBL token. This increases\n        //as we get closer to reaching the daily goal\n        uint baseMintThreshold;\n\n        //initial rate ranges to apply\n        MintRateRangeConfig[] rateRanges;\n\n        //set of fee token/price feed pairs to initialize with\n        FeeTokenConfig feeTokenConfig;\n    }\n\n    //stored mint rate range\n    struct MintRateRange {\n        uint16 minMMVolume;\n        uint16 maxMMVolume;\n        uint rate;\n        uint index;\n    }\n\n    //price feed for a fee token\n    struct PriceFeed {\n        IPriceFeed feed;\n        uint8 decimals;\n    }\n\n    /*****************************************************************************************\n     * STORAGE\n    ******************************************************************************************/\n    \n    \n    struct VaultData {\n        //whether the vault is paused\n        bool paused;\n\n        //admin multi sig\n        address adminMultiSig;\n\n        //token address\n        IDXBL dxbl;\n\n        //dexible settlement contract that is allowed to call the vault\n        address dexible;\n\n        //wrapped native asset address for gas computation\n        address wrappedNativeToken;\n\n        //pending migration to new vault\n        address pendingMigrationTarget;\n\n        //time before migration allowed\n        uint32 timelockSeconds;\n\n        //base volume needed to mint a single DXBL token. This increases\n        //as we get closer to reaching the daily goal\n        uint baseMintThreshold;\n\n        //current daily volume adjusted each hour\n        uint currentVolume;\n\n        //to compute what hourly slots to deduct from 24hr window\n        uint lastTradeTimestamp;\n\n        //can migrate the contract to a new vault after this time\n        uint migrateAfterTime;\n\n        //all known fee tokens. Some may be inactive\n        IERC20[] feeTokens;\n\n        //the current volume range we're operating in for mint rate\n        MintRateRange currentMintRate;\n\n        //The ranges of 24hr volume and their percentage-per-MM increase to \n        //mint a single token\n        MintRateRange[] mintRateRanges;\n\n        //hourly volume totals to adjust current volume every 24 hr slot\n        uint[24] hourlyVolume;\n\n        //fee token decimals\n        mapping(address => uint8) tokenDecimals;\n\n        //all allowed fee tokens mapped to their price feed address\n        mapping(address => PriceFeed) allowedFeeTokens;\n    }\n\n    /**\n     * If a migration occurs from the V1 vault to a new vault, this structure is forwarded\n     * after all fee token balances are transferred. It is expected that the new vault will have\n     * its fee token, minting rates, and starting mint rates mapped out as part of its deployment.\n     * The migration is intended to get the new vault into a state where it knows the last 24hrs\n     * of volume and can pick up where this vault leaves off but with new settings and capabilities.\n     */\n    struct VaultMigrationV1 {\n        //current daily volume adjusted each hour\n        uint currentVolume;\n\n        //to compute what hourly slots to deduct from 24hr window\n        uint lastTradeTimestamp;\n\n        //hourly volume totals to adjust in new contract\n        uint[24] hourlyVolume;\n\n        //the current volume range we're operating in for mint rate\n        MintRateRange currentMintRate;\n    }\n\n    function load() internal pure returns (VaultData storage ds) {\n        assembly { ds.slot := VAULT_STORAGE_KEY }\n    }\n}","license":"Unlicense"},"src/vault/interfaces/ICommunityVault.sol":{"keccak256":"0x6c951b24fba22f8557c3001a9cfdcb6f58096b70047a699eac0705a85a9fdfa7","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./ICommunityVaultEvents.sol\";\nimport \"./V1Migrateable.sol\";\nimport \"./IStorageView.sol\";\nimport \"./IComputationalView.sol\";\nimport \"./IRewardHandler.sol\";\nimport \"../../common/IPausable.sol\";\n\ninterface ICommunityVault is IStorageView, IComputationalView, IRewardHandler, ICommunityVaultEvents, IPausable, V1Migrateable {\n    function redeemDXBL(address feeToken, uint dxblAmount, uint minOutAmount, bool unwrapNative) external;\n}","license":"Unlicense"},"src/vault/interfaces/ICommunityVaultEvents.sol":{"keccak256":"0xc947f6e92177e75cbbc9643473b1e72c6ae4a1ecc3ecfae75c82747b3af9513e","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\ninterface ICommunityVaultEvents {\n\n    event DXBLRedeemed(address holder, uint dxblAmount, address rewardToken, uint rewardAmount);\n}","license":"Unlicense"},"src/vault/interfaces/IComputationalView.sol":{"keccak256":"0xc0e46b88fd0f1381ada98e1e202068fefb7dca14d74e273e1d5bd264966c9a1d","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\ninterface IComputationalView {\n\n    struct AssetInfo {\n        address token;\n        uint balance;\n        uint usdValue;\n        uint usdPrice;\n    }\n\n    function convertGasToFeeToken(address feeToken, uint gasCost) external view returns (uint);\n    function estimateRedemption(address feeToken, uint dxblAmount) external view returns(uint);\n    function feeTokenPriceUSD(address feeToken) external view returns (uint);\n    function aumUSD() external view returns(uint);\n    function currentNavUSD() external view returns(uint);\n    function assets() external view returns (AssetInfo[] memory);\n    function currentMintRateUSD() external view returns (uint);\n    function computeVolumeUSD(address feeToken, uint amount) external view returns(uint);\n\n}","license":"Unlicense"},"src/vault/interfaces/IPriceFeed.sol":{"keccak256":"0x151d6516db0e8639f2c0aae6a0d3dd7fc9befc2d179ac8b08ea8830253cbb544","urls":[],"content":"\n//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\n/**\n * Interface for Chainlink oracle feeds\n */\ninterface IPriceFeed {\n    function latestRoundData() external view\n    returns (\n        uint80 roundId,\n        int256 answer,\n        uint256 startedAt,\n        uint256 updatedAt,\n        uint80 answeredInRound\n    );\n    function decimals() external view returns (uint8);\n}","license":"Unlicense"},"src/vault/interfaces/IRewardHandler.sol":{"keccak256":"0x103b1b3c548036a1ba6fefb5bf923eda05a1a66732e05c8f2553b00625c6aabd","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\ninterface IRewardHandler {\n\n    /**\n     * Modification functions\n     */\n    function rewardTrader(address trader, address feeToken, uint amount) external;\n}","license":"Unlicense"},"src/vault/interfaces/IStorageView.sol":{"keccak256":"0xe582187e92b985d1f5c557d74c715f38cc3475215138444faf0fa58c30fabdb0","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\ninterface IStorageView {\n\n    /**\n     * Storage variable view functions\n     */\n    function isFeeTokenAllowed(address tokens) external view returns (bool);\n    function discountBps() external view returns(uint32);\n    function dailyVolumeUSD() external view returns(uint);\n    function paused() external view returns (bool);\n    function adminMultiSig() external view returns (address);\n    function dxblToken() external view returns (address);\n    function dexibleContract() external view returns (address);\n    function wrappedNativeToken() external view returns (address);\n    function timelockSeconds() external view returns (uint32);\n    function baseMintThreshold() external view returns (uint);\n}","license":"Unlicense"},"src/vault/interfaces/V1Migrateable.sol":{"keccak256":"0x7950798d6d2e6b2960de25d1a4b8383e13dccb9bddb077859528cff48f39cf1e","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\nimport \"../VaultStorage.sol\";\n\ninterface V1MigrationTarget {\n    /**\n     * Call from current vault to migrate the state of the old vault to the new one. \n     */\n    function migrationFromV1(VaultStorage.VaultMigrationV1 memory data) external;\n}\n\ninterface V1Migrateable {\n\n    event MigrationScheduled(address indexed newVault, uint afterTime);\n    event MigrationCancelled(address indexed newVault);\n    event VaultMigrated(address indexed newVault);\n\n    function scheduleMigration(V1MigrationTarget target) external;\n\n    function cancelMigration() external;\n\n    function canMigrate() external view returns (bool);\n\n    /**\n     * Migrate the vault to a new vault address that implements the target interface\n     * to receive this vault's state. This will transfer all fee token assets to the \n     * new vault. This can only be called after timelock is expired.\n     */\n    function migrateV1() external;\n    \n}","license":"Unlicense"}},"version":1},"storageLayout":{"storage":[],"types":{}},"id":14}