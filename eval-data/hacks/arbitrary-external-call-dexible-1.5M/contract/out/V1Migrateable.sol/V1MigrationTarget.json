{"abi":[{"type":"function","name":"migrationFromV1","inputs":[{"name":"data","type":"tuple","internalType":"struct VaultStorage.VaultMigrationV1","components":[{"name":"currentVolume","type":"uint256","internalType":"uint256"},{"name":"lastTradeTimestamp","type":"uint256","internalType":"uint256"},{"name":"hourlyVolume","type":"uint256[24]","internalType":"uint256[24]"},{"name":"currentMintRate","type":"tuple","internalType":"struct VaultStorage.MintRateRange","components":[{"name":"minMMVolume","type":"uint16","internalType":"uint16"},{"name":"maxMMVolume","type":"uint16","internalType":"uint16"},{"name":"rate","type":"uint256","internalType":"uint256"},{"name":"index","type":"uint256","internalType":"uint256"}]}]}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"migrationFromV1((uint256,uint256,uint256[24],(uint16,uint16,uint256,uint256)))":"5864de4e"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTradeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[24]\",\"name\":\"hourlyVolume\",\"type\":\"uint256[24]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"minMMVolume\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxMMVolume\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct VaultStorage.MintRateRange\",\"name\":\"currentMintRate\",\"type\":\"tuple\"}],\"internalType\":\"struct VaultStorage.VaultMigrationV1\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"migrationFromV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"migrationFromV1((uint256,uint256,uint256[24],(uint16,uint16,uint256,uint256)))\":{\"notice\":\"Call from current vault to migrate the state of the old vault to the new one. \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/vault/interfaces/V1Migrateable.sol\":\"V1MigrationTarget\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[\":@openzeppelin/=src/@openzeppelin/\",\":contracts/common/=src/common/\",\":contracts/dexible/=src/dexible/\",\":contracts/token/=src/token/\",\":contracts/vault/=src/vault/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=src/hardhat/\"]},\"sources\":{\"src/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"src/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"src/token/IDXBL.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDXBL is IERC20, IERC20Metadata {\\n    struct FeeRequest {\\n        bool referred;\\n        address trader;\\n        uint amt;\\n        uint dxblBalance;\\n        uint16 stdBpsRate;\\n        uint16 minBpsRate;\\n    }\\n\\n    function minter() external view returns (address);\\n    function discountPerTokenBps() external view returns(uint32);\\n\\n    function mint(address acct, uint amt) external;\\n    function burn(address holder, uint amt) external;\\n    function setDiscountRate(uint32 discount) external;\\n    function setNewMinter(address minter) external;\\n    function computeDiscountedFee(FeeRequest calldata request) external view returns(uint);\\n}\",\"keccak256\":\"0x5c7e94839ff1ff8d19ed800cbb7a9af9ea24d178ec1cca6c84c0b914636494ef\",\"license\":\"Unlicense\"},\"src/vault/VaultStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\nimport \\\"../token/IDXBL.sol\\\";\\nimport \\\"./interfaces/IPriceFeed.sol\\\";\\n\\nlibrary VaultStorage {\\n\\n    bytes32 constant VAULT_STORAGE_KEY = 0xbfa76ec2967ed7f8d3d40cd552f1451ab03573b596bfce931a6a016f7733078c;\\n\\n    \\n    //mint rate bucket\\n    struct MintRateRangeConfig {\\n        uint16 minMMVolume;\\n        uint16 maxMMVolume;\\n        uint rate;\\n    }\\n\\n    //fee token and its associated chainlink feed\\n    struct FeeTokenConfig {\\n        address[] feeTokens;\\n        address[] priceFeeds;\\n    }\\n\\n    //initialize config to intialize storage\\n    struct VaultConfig {\\n\\n        //the address of the wrapped native token\\n        address wrappedNativeToken;\\n\\n        //address of the multisig that will administer this vault\\n        address adminMultiSig;\\n\\n\\n        //seconds for any timelock-based changes\\n        uint32 timelockSeconds;\\n\\n        //starting volume needed to mint a single DXBL token. This increases\\n        //as we get closer to reaching the daily goal\\n        uint baseMintThreshold;\\n\\n        //initial rate ranges to apply\\n        MintRateRangeConfig[] rateRanges;\\n\\n        //set of fee token/price feed pairs to initialize with\\n        FeeTokenConfig feeTokenConfig;\\n    }\\n\\n    //stored mint rate range\\n    struct MintRateRange {\\n        uint16 minMMVolume;\\n        uint16 maxMMVolume;\\n        uint rate;\\n        uint index;\\n    }\\n\\n    //price feed for a fee token\\n    struct PriceFeed {\\n        IPriceFeed feed;\\n        uint8 decimals;\\n    }\\n\\n    /*****************************************************************************************\\n     * STORAGE\\n    ******************************************************************************************/\\n    \\n    \\n    struct VaultData {\\n        //whether the vault is paused\\n        bool paused;\\n\\n        //admin multi sig\\n        address adminMultiSig;\\n\\n        //token address\\n        IDXBL dxbl;\\n\\n        //dexible settlement contract that is allowed to call the vault\\n        address dexible;\\n\\n        //wrapped native asset address for gas computation\\n        address wrappedNativeToken;\\n\\n        //pending migration to new vault\\n        address pendingMigrationTarget;\\n\\n        //time before migration allowed\\n        uint32 timelockSeconds;\\n\\n        //base volume needed to mint a single DXBL token. This increases\\n        //as we get closer to reaching the daily goal\\n        uint baseMintThreshold;\\n\\n        //current daily volume adjusted each hour\\n        uint currentVolume;\\n\\n        //to compute what hourly slots to deduct from 24hr window\\n        uint lastTradeTimestamp;\\n\\n        //can migrate the contract to a new vault after this time\\n        uint migrateAfterTime;\\n\\n        //all known fee tokens. Some may be inactive\\n        IERC20[] feeTokens;\\n\\n        //the current volume range we're operating in for mint rate\\n        MintRateRange currentMintRate;\\n\\n        //The ranges of 24hr volume and their percentage-per-MM increase to \\n        //mint a single token\\n        MintRateRange[] mintRateRanges;\\n\\n        //hourly volume totals to adjust current volume every 24 hr slot\\n        uint[24] hourlyVolume;\\n\\n        //fee token decimals\\n        mapping(address => uint8) tokenDecimals;\\n\\n        //all allowed fee tokens mapped to their price feed address\\n        mapping(address => PriceFeed) allowedFeeTokens;\\n    }\\n\\n    /**\\n     * If a migration occurs from the V1 vault to a new vault, this structure is forwarded\\n     * after all fee token balances are transferred. It is expected that the new vault will have\\n     * its fee token, minting rates, and starting mint rates mapped out as part of its deployment.\\n     * The migration is intended to get the new vault into a state where it knows the last 24hrs\\n     * of volume and can pick up where this vault leaves off but with new settings and capabilities.\\n     */\\n    struct VaultMigrationV1 {\\n        //current daily volume adjusted each hour\\n        uint currentVolume;\\n\\n        //to compute what hourly slots to deduct from 24hr window\\n        uint lastTradeTimestamp;\\n\\n        //hourly volume totals to adjust in new contract\\n        uint[24] hourlyVolume;\\n\\n        //the current volume range we're operating in for mint rate\\n        MintRateRange currentMintRate;\\n    }\\n\\n    function load() internal pure returns (VaultData storage ds) {\\n        assembly { ds.slot := VAULT_STORAGE_KEY }\\n    }\\n}\",\"keccak256\":\"0x06f4025a6c0778c764e67e3605488a0e1ae0fba4a98bb9dbdd2952afa61efde5\",\"license\":\"Unlicense\"},\"src/vault/interfaces/IPriceFeed.sol\":{\"content\":\"\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\n/**\\n * Interface for Chainlink oracle feeds\\n */\\ninterface IPriceFeed {\\n    function latestRoundData() external view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x151d6516db0e8639f2c0aae6a0d3dd7fc9befc2d179ac8b08ea8830253cbb544\",\"license\":\"Unlicense\"},\"src/vault/interfaces/V1Migrateable.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\nimport \\\"../VaultStorage.sol\\\";\\n\\ninterface V1MigrationTarget {\\n    /**\\n     * Call from current vault to migrate the state of the old vault to the new one. \\n     */\\n    function migrationFromV1(VaultStorage.VaultMigrationV1 memory data) external;\\n}\\n\\ninterface V1Migrateable {\\n\\n    event MigrationScheduled(address indexed newVault, uint afterTime);\\n    event MigrationCancelled(address indexed newVault);\\n    event VaultMigrated(address indexed newVault);\\n\\n    function scheduleMigration(V1MigrationTarget target) external;\\n\\n    function cancelMigration() external;\\n\\n    function canMigrate() external view returns (bool);\\n\\n    /**\\n     * Migrate the vault to a new vault address that implements the target interface\\n     * to receive this vault's state. This will transfer all fee token assets to the \\n     * new vault. This can only be called after timelock is expired.\\n     */\\n    function migrateV1() external;\\n    \\n}\",\"keccak256\":\"0x7950798d6d2e6b2960de25d1a4b8383e13dccb9bddb077859528cff48f39cf1e\",\"license\":\"Unlicense\"}},\"version\":1}","metadata":{"compiler":{"version":"0.8.17+commit.8df45f5f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"struct VaultStorage.VaultMigrationV1","name":"data","type":"tuple","components":[{"internalType":"uint256","name":"currentVolume","type":"uint256"},{"internalType":"uint256","name":"lastTradeTimestamp","type":"uint256"},{"internalType":"uint256[24]","name":"hourlyVolume","type":"uint256[24]"},{"internalType":"struct VaultStorage.MintRateRange","name":"currentMintRate","type":"tuple","components":[{"internalType":"uint16","name":"minMMVolume","type":"uint16"},{"internalType":"uint16","name":"maxMMVolume","type":"uint16"},{"internalType":"uint256","name":"rate","type":"uint256"},{"internalType":"uint256","name":"index","type":"uint256"}]}]}],"stateMutability":"nonpayable","type":"function","name":"migrationFromV1"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{"migrationFromV1((uint256,uint256,uint256[24],(uint16,uint16,uint256,uint256)))":{"notice":"Call from current vault to migrate the state of the old vault to the new one. "}},"version":1}},"settings":{"remappings":["@openzeppelin/=src/@openzeppelin/","contracts/common/=src/common/","contracts/dexible/=src/dexible/","contracts/token/=src/token/","contracts/vault/=src/vault/","forge-std/=lib/forge-std/src/","hardhat/=src/hardhat/"],"optimizer":{"enabled":true,"runs":100},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"src/vault/interfaces/V1Migrateable.sol":"V1MigrationTarget"},"evmVersion":"london","libraries":{}},"sources":{"src/@openzeppelin/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n","license":"MIT"},"src/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n","license":"MIT"},"src/token/IDXBL.sol":{"keccak256":"0x5c7e94839ff1ff8d19ed800cbb7a9af9ea24d178ec1cca6c84c0b914636494ef","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IDXBL is IERC20, IERC20Metadata {\n    struct FeeRequest {\n        bool referred;\n        address trader;\n        uint amt;\n        uint dxblBalance;\n        uint16 stdBpsRate;\n        uint16 minBpsRate;\n    }\n\n    function minter() external view returns (address);\n    function discountPerTokenBps() external view returns(uint32);\n\n    function mint(address acct, uint amt) external;\n    function burn(address holder, uint amt) external;\n    function setDiscountRate(uint32 discount) external;\n    function setNewMinter(address minter) external;\n    function computeDiscountedFee(FeeRequest calldata request) external view returns(uint);\n}","license":"Unlicense"},"src/vault/VaultStorage.sol":{"keccak256":"0x06f4025a6c0778c764e67e3605488a0e1ae0fba4a98bb9dbdd2952afa61efde5","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\nimport \"../token/IDXBL.sol\";\nimport \"./interfaces/IPriceFeed.sol\";\n\nlibrary VaultStorage {\n\n    bytes32 constant VAULT_STORAGE_KEY = 0xbfa76ec2967ed7f8d3d40cd552f1451ab03573b596bfce931a6a016f7733078c;\n\n    \n    //mint rate bucket\n    struct MintRateRangeConfig {\n        uint16 minMMVolume;\n        uint16 maxMMVolume;\n        uint rate;\n    }\n\n    //fee token and its associated chainlink feed\n    struct FeeTokenConfig {\n        address[] feeTokens;\n        address[] priceFeeds;\n    }\n\n    //initialize config to intialize storage\n    struct VaultConfig {\n\n        //the address of the wrapped native token\n        address wrappedNativeToken;\n\n        //address of the multisig that will administer this vault\n        address adminMultiSig;\n\n\n        //seconds for any timelock-based changes\n        uint32 timelockSeconds;\n\n        //starting volume needed to mint a single DXBL token. This increases\n        //as we get closer to reaching the daily goal\n        uint baseMintThreshold;\n\n        //initial rate ranges to apply\n        MintRateRangeConfig[] rateRanges;\n\n        //set of fee token/price feed pairs to initialize with\n        FeeTokenConfig feeTokenConfig;\n    }\n\n    //stored mint rate range\n    struct MintRateRange {\n        uint16 minMMVolume;\n        uint16 maxMMVolume;\n        uint rate;\n        uint index;\n    }\n\n    //price feed for a fee token\n    struct PriceFeed {\n        IPriceFeed feed;\n        uint8 decimals;\n    }\n\n    /*****************************************************************************************\n     * STORAGE\n    ******************************************************************************************/\n    \n    \n    struct VaultData {\n        //whether the vault is paused\n        bool paused;\n\n        //admin multi sig\n        address adminMultiSig;\n\n        //token address\n        IDXBL dxbl;\n\n        //dexible settlement contract that is allowed to call the vault\n        address dexible;\n\n        //wrapped native asset address for gas computation\n        address wrappedNativeToken;\n\n        //pending migration to new vault\n        address pendingMigrationTarget;\n\n        //time before migration allowed\n        uint32 timelockSeconds;\n\n        //base volume needed to mint a single DXBL token. This increases\n        //as we get closer to reaching the daily goal\n        uint baseMintThreshold;\n\n        //current daily volume adjusted each hour\n        uint currentVolume;\n\n        //to compute what hourly slots to deduct from 24hr window\n        uint lastTradeTimestamp;\n\n        //can migrate the contract to a new vault after this time\n        uint migrateAfterTime;\n\n        //all known fee tokens. Some may be inactive\n        IERC20[] feeTokens;\n\n        //the current volume range we're operating in for mint rate\n        MintRateRange currentMintRate;\n\n        //The ranges of 24hr volume and their percentage-per-MM increase to \n        //mint a single token\n        MintRateRange[] mintRateRanges;\n\n        //hourly volume totals to adjust current volume every 24 hr slot\n        uint[24] hourlyVolume;\n\n        //fee token decimals\n        mapping(address => uint8) tokenDecimals;\n\n        //all allowed fee tokens mapped to their price feed address\n        mapping(address => PriceFeed) allowedFeeTokens;\n    }\n\n    /**\n     * If a migration occurs from the V1 vault to a new vault, this structure is forwarded\n     * after all fee token balances are transferred. It is expected that the new vault will have\n     * its fee token, minting rates, and starting mint rates mapped out as part of its deployment.\n     * The migration is intended to get the new vault into a state where it knows the last 24hrs\n     * of volume and can pick up where this vault leaves off but with new settings and capabilities.\n     */\n    struct VaultMigrationV1 {\n        //current daily volume adjusted each hour\n        uint currentVolume;\n\n        //to compute what hourly slots to deduct from 24hr window\n        uint lastTradeTimestamp;\n\n        //hourly volume totals to adjust in new contract\n        uint[24] hourlyVolume;\n\n        //the current volume range we're operating in for mint rate\n        MintRateRange currentMintRate;\n    }\n\n    function load() internal pure returns (VaultData storage ds) {\n        assembly { ds.slot := VAULT_STORAGE_KEY }\n    }\n}","license":"Unlicense"},"src/vault/interfaces/IPriceFeed.sol":{"keccak256":"0x151d6516db0e8639f2c0aae6a0d3dd7fc9befc2d179ac8b08ea8830253cbb544","urls":[],"content":"\n//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\n/**\n * Interface for Chainlink oracle feeds\n */\ninterface IPriceFeed {\n    function latestRoundData() external view\n    returns (\n        uint80 roundId,\n        int256 answer,\n        uint256 startedAt,\n        uint256 updatedAt,\n        uint80 answeredInRound\n    );\n    function decimals() external view returns (uint8);\n}","license":"Unlicense"},"src/vault/interfaces/V1Migrateable.sol":{"keccak256":"0x7950798d6d2e6b2960de25d1a4b8383e13dccb9bddb077859528cff48f39cf1e","urls":[],"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\nimport \"../VaultStorage.sol\";\n\ninterface V1MigrationTarget {\n    /**\n     * Call from current vault to migrate the state of the old vault to the new one. \n     */\n    function migrationFromV1(VaultStorage.VaultMigrationV1 memory data) external;\n}\n\ninterface V1Migrateable {\n\n    event MigrationScheduled(address indexed newVault, uint afterTime);\n    event MigrationCancelled(address indexed newVault);\n    event VaultMigrated(address indexed newVault);\n\n    function scheduleMigration(V1MigrationTarget target) external;\n\n    function cancelMigration() external;\n\n    function canMigrate() external view returns (bool);\n\n    /**\n     * Migrate the vault to a new vault address that implements the target interface\n     * to receive this vault's state. This will transfer all fee token assets to the \n     * new vault. This can only be called after timelock is expired.\n     */\n    function migrateV1() external;\n    \n}","license":"Unlicense"}},"version":1},"storageLayout":{"storage":[],"types":{}},"id":38}