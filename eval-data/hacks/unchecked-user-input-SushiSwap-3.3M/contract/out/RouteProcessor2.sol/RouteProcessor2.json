{"abi":[{"type":"constructor","inputs":[{"name":"_bentoBox","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"receive","stateMutability":"payable"},{"type":"function","name":"bentoBox","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IBentoBoxMinimal"}],"stateMutability":"view"},{"type":"function","name":"processRoute","inputs":[{"name":"tokenIn","type":"address","internalType":"address"},{"name":"amountIn","type":"uint256","internalType":"uint256"},{"name":"tokenOut","type":"address","internalType":"address"},{"name":"amountOutMin","type":"uint256","internalType":"uint256"},{"name":"to","type":"address","internalType":"address"},{"name":"route","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"amountOut","type":"uint256","internalType":"uint256"}],"stateMutability":"payable"},{"type":"function","name":"transferValueAndprocessRoute","inputs":[{"name":"transferValueTo","type":"address","internalType":"address payable"},{"name":"amountValueTransfer","type":"uint256","internalType":"uint256"},{"name":"tokenIn","type":"address","internalType":"address"},{"name":"amountIn","type":"uint256","internalType":"uint256"},{"name":"tokenOut","type":"address","internalType":"address"},{"name":"amountOutMin","type":"uint256","internalType":"uint256"},{"name":"to","type":"address","internalType":"address"},{"name":"route","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"amountOut","type":"uint256","internalType":"uint256"}],"stateMutability":"payable"},{"type":"function","name":"tridentCLSwapCallback","inputs":[{"name":"amount0Delta","type":"int256","internalType":"int256"},{"name":"amount1Delta","type":"int256","internalType":"int256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"uniswapV3SwapCallback","inputs":[{"name":"amount0Delta","type":"int256","internalType":"int256"},{"name":"amount1Delta","type":"int256","internalType":"int256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x60a0604052600180553480156200001557600080fd5b5060405162002f4c38038062002f4c83398101604081905262000038916200005d565b6001600160a01b0316608052600080546001600160a01b03191660011790556200008f565b6000602082840312156200007057600080fd5b81516001600160a01b03811681146200008857600080fd5b9392505050565b608051612e55620000f76000396000818160a201528181610f7301528181611b1701528181611b5e01528181611bc801528181611c8d01528181611d3a01528181611e1e01528181611f0f01528181611fbb0152818161208a01526121860152612e556000f3fe60806040526004361061005e5760003560e01c806393b3774c1161004357806393b3774c146100e9578063e2a7b501146100fc578063fa461e331461011e57600080fd5b80632646478b1461006a5780636b2ace871461009057600080fd5b3661006557005b600080fd5b61007d610078366004612793565b61013e565b6040519081526020015b60405180910390f35b34801561009c57600080fd5b506100c47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610087565b61007d6100f736600461281a565b6101d3565b34801561010857600080fd5b5061011c6101173660046128bf565b610325565b005b34801561012a57600080fd5b5061011c6101393660046128bf565b61051a565b60006001546001146101b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f526f75746550726f636573736f72206973206c6f636b6564000000000000000060448201526064015b60405180910390fd5b60026001556101c48787878787876106a0565b60018055979650505050505050565b6000600154600114610241576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f526f75746550726f636573736f72206973206c6f636b6564000000000000000060448201526064016101a8565b6002600155604051600090819073ffffffffffffffffffffffffffffffffffffffff8c16908b908381818185875af1925050503d80600081146102a0576040519150601f19603f3d011682016040523d82523d6000602084013e6102a5565b606091505b509150915081816040516020016102bc919061296b565b60405160208183030381529060405290610303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a891906129d1565b506103128989898989896106a0565b600180559b9a5050505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f526f75746550726f636573736f722e54726964656e74434c5377617043616c6c60448201527f6261636b3a2063616c6c2066726f6d20756e6b6e6f776e20736f75726365000060648201526084016101a8565b600080547fffffffffffffffffffffffff000000000000000000000000000000000000000016600117815580610404838501856129eb565b9150915060008087136104175785610419565b865b9050600081136104ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f526f75746550726f636573736f722e54726964656e74434c5377617043616c6c60448201527f6261636b3a206e6f7420706f73697469766520616d6f756e740000000000000060648201526084016101a8565b73ffffffffffffffffffffffffffffffffffffffff82163014156104ef576104ea73ffffffffffffffffffffffffffffffffffffffff84163383610c7c565b610511565b61051173ffffffffffffffffffffffffffffffffffffffff8416833384610d55565b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f526f75746550726f636573736f722e756e697377617056335377617043616c6c60448201527f6261636b3a2063616c6c2066726f6d20756e6b6e6f776e20736f75726365000060648201526084016101a8565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001178155806105f9838501856129eb565b91509150600080871361060c578561060e565b865b9050600081136104ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f526f75746550726f636573736f722e756e697377617056335377617043616c6c60448201527f6261636b3a206e6f7420706f73697469766520616d6f756e740000000000000060648201526084016101a8565b60008073ffffffffffffffffffffffffffffffffffffffff881673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610767576040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8916906370a0823190602401602060405180830381865afa15801561073e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107629190612a24565b610769565b475b9050600073ffffffffffffffffffffffffffffffffffffffff871673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610833576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301528816906370a0823190602401602060405180830381865afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e9190612a24565b61084c565b8473ffffffffffffffffffffffffffffffffffffffff16315b604080518082019091528581528551860160208201529091505b8051602082015111156109835760006108858280516001018051915290565b90508060ff16600114156108a15761089c82610db9565b61097d565b8060ff16600214156108b75761089c828b610e96565b8060ff16600314156108cc5761089c82610eb6565b8060ff16600414156108e15761089c82610edb565b8060ff16600514156108f65761089c82610efc565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f526f75746550726f636573736f723a20556e6b6e6f776e20636f6d6d616e642060448201527f636f64650000000000000000000000000000000000000000000000000000000060648201526084016101a8565b50610866565b600073ffffffffffffffffffffffffffffffffffffffff8b1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610a49576040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8c16906370a0823190602401602060405180830381865afa158015610a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a449190612a24565b610a4b565b475b905083610a588b83612a6c565b1015610ae6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f526f75746550726f636573736f723a204d696e696d616c20696d70757420626160448201527f6c616e63652076696f6c6174696f6e000000000000000000000000000000000060648201526084016101a8565b600073ffffffffffffffffffffffffffffffffffffffff8a1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610bae576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301528b16906370a0823190602401602060405180830381865afa158015610b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba99190612a24565b610bc7565b8773ffffffffffffffffffffffffffffffffffffffff16315b9050610bd38985612a6c565b811015610c62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f526f75746550726f636573736f723a204d696e696d616c206f7570757420626160448201527f6c616e63652076696f6c6174696f6e000000000000000000000000000000000060648201526084016101a8565b610c6c8482612a84565b9c9b505050505050505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610d509084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611057565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610db39085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610cce565b50505050565b6000610dcb8280516014018051915290565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5f9190612a24565b90508015610e8a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff015b610d5083308484611163565b6000610ea88380516014018051915290565b9050610d5083338385611163565b47610ed7823073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee84611163565b5050565b6000610eed8280516014018051915290565b9050610ed782308360006111c6565b6000610f0e8280516014018051915290565b90506000610f228380516001018051915290565b6040517ff7888aec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301523060248301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063f7888aec90604401602060405180830381865afa158015610fba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fde9190612a24565b90508015611009577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff015b60005b8260ff168110156110505760006110298680516002018051915290565b61ffff8082168502049384900393909150611046873088846111c6565b505060010161100c565b5050505050565b60006110b9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166112f39092919063ffffffff16565b805190915015610d5057808060200190518101906110d79190612a9b565b610d50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101a8565b60006111758580516001018051915290565b905060005b8160ff168110156111be5760006111978780516002018051915290565b61ffff80821686020494859003949091506111b4888888846111c6565b505060010161117a565b505050505050565b60006111d88580516001018051915290565b905060ff81166111f3576111ee8585858561130a565b611050565b8060ff166001141561120b576111ee85858585611683565b8060ff1660021415611223576111ee858585856118a7565b8060ff166003141561123b576111ee85858585611aa6565b8060ff1660041415611253576111ee85858585612100565b8060ff166005141561126b576111ee85858585612278565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f526f75746550726f636573736f723a20556e6b6e6f776e20706f6f6c2074797060448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016101a8565b6060611302848460008561249f565b949350505050565b600061131c8580516014018051915290565b905060006113308680516001018051915290565b905060006113448780516014018051915290565b90506000808473ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b89190612ae0565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000821180156113ed5750600081115b611453576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f57726f6e6720706f6f6c2072657365727665730000000000000000000000000060448201526064016101a8565b6000808560ff1660011461146857828461146b565b83835b91509150876000146114dd5773ffffffffffffffffffffffffffffffffffffffff8a163014156114bb576114b673ffffffffffffffffffffffffffffffffffffffff8a16888a610c7c565b61157d565b6114b673ffffffffffffffffffffffffffffffffffffffff8a168b898b610d55565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301528391908b16906370a0823190602401602060405180830381865afa15801561154c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115709190612a24565b61157a9190612a84565b97505b600061158b896103e5612b30565b905060008161159c856103e8612b30565b6115a69190612a6c565b6115b08484612b30565b6115ba9190612b6d565b90506000808960ff166001146115d2578260006115d6565b6000835b604080516000815260208101918290527f022c0d9f00000000000000000000000000000000000000000000000000000000909152919350915073ffffffffffffffffffffffffffffffffffffffff8c169063022c0d9f9061164090859085908e9060248101612ba8565b600060405180830381600087803b15801561165a57600080fd5b505af115801561166e573d6000803e3d6000fd5b50505050505050505050505050505050505050565b60006116958580516014018051915290565b90506000806116aa8780516001018051915290565b60ff1611905060006116c28780516014018051915290565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590915063128acb088284878161173957611734600173fffd8963efd1fc6a506488495d951d5263988d26612bed565b611749565b6117496401000276a36001612c22565b6040805173ffffffffffffffffffffffffffffffffffffffff8d811660208301528e168183015281518082038301815260608201928390527fffffffff0000000000000000000000000000000000000000000000000000000060e089901b169092526117bc959493929190606401612c5a565b60408051808303816000875af11580156117da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fe9190612ca1565b505060005473ffffffffffffffffffffffffffffffffffffffff16600114610511576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f526f75746550726f636573736f722e73776170556e6956333a20756e6578706560448201527f637465640000000000000000000000000000000000000000000000000000000060648201526084016101a8565b60006118b98580516001018051915290565b905060006118cd8680516014018051915290565b90506001808316141561199c5760006118ec8780516014018051915290565b905060028316611958578073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561193e57600080fd5b505af1158015611952573d6000803e3d6000fd5b50505050505b73ffffffffffffffffffffffffffffffffffffffff821630146119965761199673ffffffffffffffffffffffffffffffffffffffff82168386610c7c565b506111be565b60028216611a645773ffffffffffffffffffffffffffffffffffffffff851630146119e3576119e373ffffffffffffffffffffffffffffffffffffffff8516863086610d55565b6040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff851690632e1a7d4d90602401600060405180830381600087803b158015611a4b57600080fd5b505af1158015611a5f573d6000803e3d6000fd5b505050505b60405173ffffffffffffffffffffffffffffffffffffffff8216904780156108fc02916000818181858888f19350505050158015610511573d6000803e3d6000fd5b6000611ab88580516001018051915290565b90506000611acc8680516014018051915290565b905060ff821615611eaf578215611b835773ffffffffffffffffffffffffffffffffffffffff8516301415611b4157611b3c73ffffffffffffffffffffffffffffffffffffffff85167f000000000000000000000000000000000000000000000000000000000000000085610c7c565b611dd9565b611b3c73ffffffffffffffffffffffffffffffffffffffff8516867f000000000000000000000000000000000000000000000000000000000000000086610d55565b6040517f4ffe34db00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301527f00000000000000000000000000000000000000000000000000000000000000001690634ffe34db906024016040805180830381865afa158015611c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c329190612ce5565b516040517fdf23b45b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301526fffffffffffffffffffffffffffffffff909216917f0000000000000000000000000000000000000000000000000000000000000000169063df23b45b90602401606060405180830381865afa158015611cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf89190612d58565b60409081015190517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301526fffffffffffffffffffffffffffffffff909216918716906370a0823190602401602060405180830381865afa158015611d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc29190612a24565b611dcc9190612a6c565b611dd69190612a84565b92505b6040517f02b9446c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830181905290831660448301526064820185905260006084830152906302b9446c9060a40160408051808303816000875af1158015611e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea89190612ca1565b50506111be565b8215611f70576040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528681166024830152306044830152606482018590527f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90608401600060405180830381600087803b158015611f5357600080fd5b505af1158015611f67573d6000803e3d6000fd5b50505050612029565b6040517ff7888aec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301523060248301527f0000000000000000000000000000000000000000000000000000000000000000169063f7888aec90604401602060405180830381865afa158015612002573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120269190612a24565b92505b6040517f97da6d3000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152306024830152828116604483015260006064830152608482018590527f000000000000000000000000000000000000000000000000000000000000000016906397da6d309060a40160408051808303816000875af11580156120d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f69190612ca1565b5050505050505050565b60006121128580516014018051915290565b85516020808201805190920101875290915082156121e3576040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015286811660248301528381166044830152606482018590527f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90608401600060405180830381600087803b1580156121ca57600080fd5b505af11580156121de573d6000803e3d6000fd5b505050505b6040517f627dd56a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063627dd56a906122359084906004016129d1565b6020604051808303816000875af1158015612254573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105119190612a24565b600061228a8580516014018051915290565b905060008061229f8780516001018051915290565b60ff1611905060006122b78780516014018051915290565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86169081179091559091506321a761188284878161232e57612329600173fffd8963efd1fc6a506488495d951d5263988d26612bed565b61233e565b61233e6401000276a36001612c22565b6040805173ffffffffffffffffffffffffffffffffffffffff8d811660208301528e168183015281518082038301815260608201928390527fffffffff0000000000000000000000000000000000000000000000000000000060e089901b169092526123b39594939291600091606401612dc4565b60408051808303816000875af11580156123d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f59190612ca1565b505060005473ffffffffffffffffffffffffffffffffffffffff16600114610511576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f526f75746550726f636573736f722e7377617054726964656e74434c3a20756e60448201527f657870656374656400000000000000000000000000000000000000000000000060648201526084016101a8565b606082471015612531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016101a8565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161255a919061296b565b60006040518083038185875af1925050503d8060008114612597576040519150601f19603f3d011682016040523d82523d6000602084013e61259c565b606091505b50915091506125ad878383876125b8565b979650505050505050565b6060831561264b5782516126445773ffffffffffffffffffffffffffffffffffffffff85163b612644576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101a8565b5081611302565b61130283838151156126605781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a891906129d1565b73ffffffffffffffffffffffffffffffffffffffff811681146126b657600080fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126126f957600080fd5b813567ffffffffffffffff80821115612714576127146126b9565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561275a5761275a6126b9565b8160405283815286602085880101111561277357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c087890312156127ac57600080fd5b86356127b781612694565b95506020870135945060408701356127ce81612694565b93506060870135925060808701356127e581612694565b915060a087013567ffffffffffffffff81111561280157600080fd5b61280d89828a016126e8565b9150509295509295509295565b600080600080600080600080610100898b03121561283757600080fd5b883561284281612694565b975060208901359650604089013561285981612694565b955060608901359450608089013561287081612694565b935060a0890135925060c089013561288781612694565b915060e089013567ffffffffffffffff8111156128a357600080fd5b6128af8b828c016126e8565b9150509295985092959890939650565b600080600080606085870312156128d557600080fd5b8435935060208501359250604085013567ffffffffffffffff808211156128fb57600080fd5b818701915087601f83011261290f57600080fd5b81358181111561291e57600080fd5b88602082850101111561293057600080fd5b95989497505060200194505050565b60005b8381101561295a578181015183820152602001612942565b83811115610db35750506000910152565b6000825161297d81846020870161293f565b9190910192915050565b6000815180845261299f81602086016020860161293f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006129e46020830184612987565b9392505050565b600080604083850312156129fe57600080fd5b8235612a0981612694565b91506020830135612a1981612694565b809150509250929050565b600060208284031215612a3657600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115612a7f57612a7f612a3d565b500190565b600082821015612a9657612a96612a3d565b500390565b600060208284031215612aad57600080fd5b815180151581146129e457600080fd5b80516dffffffffffffffffffffffffffff81168114612adb57600080fd5b919050565b600080600060608486031215612af557600080fd5b612afe84612abd565b9250612b0c60208501612abd565b9150604084015163ffffffff81168114612b2557600080fd5b809150509250925092565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612b6857612b68612a3d565b500290565b600082612ba3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b84815283602082015273ffffffffffffffffffffffffffffffffffffffff83166040820152608060608201526000612be36080830184612987565b9695505050505050565b600073ffffffffffffffffffffffffffffffffffffffff83811690831681811015612c1a57612c1a612a3d565b039392505050565b600073ffffffffffffffffffffffffffffffffffffffff808316818516808303821115612c5157612c51612a3d565b01949350505050565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a060808301526125ad60a0830184612987565b60008060408385031215612cb457600080fd5b505080516020909101519092909150565b80516fffffffffffffffffffffffffffffffff81168114612adb57600080fd5b600060408284031215612cf757600080fd5b6040516040810181811067ffffffffffffffff82111715612d1a57612d1a6126b9565b604052612d2683612cc5565b8152612d3460208401612cc5565b60208201529392505050565b805167ffffffffffffffff81168114612adb57600080fd5b600060608284031215612d6a57600080fd5b6040516060810181811067ffffffffffffffff82111715612d8d57612d8d6126b9565b604052612d9983612d40565b8152612da760208401612d40565b6020820152612db860408401612cc5565b60408201529392505050565b600073ffffffffffffffffffffffffffffffffffffffff80891683528715156020840152866040840152808616606084015250831515608083015260c060a0830152612e1360c0830184612987565b9897505050505050505056fea2646970667358221220f8eb3ff934908f8e1bec8fd0a8d1a7e687bd7455ed6df7eb70a50db9a167ab9d64736f6c634300080a0033","sourceMap":"1012:16674:5:-:0;;;1210:1;1186:25;;1347:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1384:38:5;;;1428:14;:40;;-1:-1:-1;;;;;;1428:40:5;523:42;1428:40;;;1012:16674;;14:290:12;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:12;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:12:o;:::-;1012:16674:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x60806040526004361061005e5760003560e01c806393b3774c1161004357806393b3774c146100e9578063e2a7b501146100fc578063fa461e331461011e57600080fd5b80632646478b1461006a5780636b2ace871461009057600080fd5b3661006557005b600080fd5b61007d610078366004612793565b61013e565b6040519081526020015b60405180910390f35b34801561009c57600080fd5b506100c47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610087565b61007d6100f736600461281a565b6101d3565b34801561010857600080fd5b5061011c6101173660046128bf565b610325565b005b34801561012a57600080fd5b5061011c6101393660046128bf565b61051a565b60006001546001146101b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f526f75746550726f636573736f72206973206c6f636b6564000000000000000060448201526064015b60405180910390fd5b60026001556101c48787878787876106a0565b60018055979650505050505050565b6000600154600114610241576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f526f75746550726f636573736f72206973206c6f636b6564000000000000000060448201526064016101a8565b6002600155604051600090819073ffffffffffffffffffffffffffffffffffffffff8c16908b908381818185875af1925050503d80600081146102a0576040519150601f19603f3d011682016040523d82523d6000602084013e6102a5565b606091505b509150915081816040516020016102bc919061296b565b60405160208183030381529060405290610303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a891906129d1565b506103128989898989896106a0565b600180559b9a5050505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f526f75746550726f636573736f722e54726964656e74434c5377617043616c6c60448201527f6261636b3a2063616c6c2066726f6d20756e6b6e6f776e20736f75726365000060648201526084016101a8565b600080547fffffffffffffffffffffffff000000000000000000000000000000000000000016600117815580610404838501856129eb565b9150915060008087136104175785610419565b865b9050600081136104ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f526f75746550726f636573736f722e54726964656e74434c5377617043616c6c60448201527f6261636b3a206e6f7420706f73697469766520616d6f756e740000000000000060648201526084016101a8565b73ffffffffffffffffffffffffffffffffffffffff82163014156104ef576104ea73ffffffffffffffffffffffffffffffffffffffff84163383610c7c565b610511565b61051173ffffffffffffffffffffffffffffffffffffffff8416833384610d55565b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f526f75746550726f636573736f722e756e697377617056335377617043616c6c60448201527f6261636b3a2063616c6c2066726f6d20756e6b6e6f776e20736f75726365000060648201526084016101a8565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001178155806105f9838501856129eb565b91509150600080871361060c578561060e565b865b9050600081136104ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f526f75746550726f636573736f722e756e697377617056335377617043616c6c60448201527f6261636b3a206e6f7420706f73697469766520616d6f756e740000000000000060648201526084016101a8565b60008073ffffffffffffffffffffffffffffffffffffffff881673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610767576040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8916906370a0823190602401602060405180830381865afa15801561073e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107629190612a24565b610769565b475b9050600073ffffffffffffffffffffffffffffffffffffffff871673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610833576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301528816906370a0823190602401602060405180830381865afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e9190612a24565b61084c565b8473ffffffffffffffffffffffffffffffffffffffff16315b604080518082019091528581528551860160208201529091505b8051602082015111156109835760006108858280516001018051915290565b90508060ff16600114156108a15761089c82610db9565b61097d565b8060ff16600214156108b75761089c828b610e96565b8060ff16600314156108cc5761089c82610eb6565b8060ff16600414156108e15761089c82610edb565b8060ff16600514156108f65761089c82610efc565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f526f75746550726f636573736f723a20556e6b6e6f776e20636f6d6d616e642060448201527f636f64650000000000000000000000000000000000000000000000000000000060648201526084016101a8565b50610866565b600073ffffffffffffffffffffffffffffffffffffffff8b1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610a49576040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8c16906370a0823190602401602060405180830381865afa158015610a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a449190612a24565b610a4b565b475b905083610a588b83612a6c565b1015610ae6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f526f75746550726f636573736f723a204d696e696d616c20696d70757420626160448201527f6c616e63652076696f6c6174696f6e000000000000000000000000000000000060648201526084016101a8565b600073ffffffffffffffffffffffffffffffffffffffff8a1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610bae576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301528b16906370a0823190602401602060405180830381865afa158015610b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba99190612a24565b610bc7565b8773ffffffffffffffffffffffffffffffffffffffff16315b9050610bd38985612a6c565b811015610c62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f526f75746550726f636573736f723a204d696e696d616c206f7570757420626160448201527f6c616e63652076696f6c6174696f6e000000000000000000000000000000000060648201526084016101a8565b610c6c8482612a84565b9c9b505050505050505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610d509084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611057565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610db39085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610cce565b50505050565b6000610dcb8280516014018051915290565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5f9190612a24565b90508015610e8a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff015b610d5083308484611163565b6000610ea88380516014018051915290565b9050610d5083338385611163565b47610ed7823073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee84611163565b5050565b6000610eed8280516014018051915290565b9050610ed782308360006111c6565b6000610f0e8280516014018051915290565b90506000610f228380516001018051915290565b6040517ff7888aec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301523060248301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063f7888aec90604401602060405180830381865afa158015610fba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fde9190612a24565b90508015611009577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff015b60005b8260ff168110156110505760006110298680516002018051915290565b61ffff8082168502049384900393909150611046873088846111c6565b505060010161100c565b5050505050565b60006110b9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166112f39092919063ffffffff16565b805190915015610d5057808060200190518101906110d79190612a9b565b610d50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101a8565b60006111758580516001018051915290565b905060005b8160ff168110156111be5760006111978780516002018051915290565b61ffff80821686020494859003949091506111b4888888846111c6565b505060010161117a565b505050505050565b60006111d88580516001018051915290565b905060ff81166111f3576111ee8585858561130a565b611050565b8060ff166001141561120b576111ee85858585611683565b8060ff1660021415611223576111ee858585856118a7565b8060ff166003141561123b576111ee85858585611aa6565b8060ff1660041415611253576111ee85858585612100565b8060ff166005141561126b576111ee85858585612278565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f526f75746550726f636573736f723a20556e6b6e6f776e20706f6f6c2074797060448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016101a8565b6060611302848460008561249f565b949350505050565b600061131c8580516014018051915290565b905060006113308680516001018051915290565b905060006113448780516014018051915290565b90506000808473ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b89190612ae0565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000821180156113ed5750600081115b611453576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f57726f6e6720706f6f6c2072657365727665730000000000000000000000000060448201526064016101a8565b6000808560ff1660011461146857828461146b565b83835b91509150876000146114dd5773ffffffffffffffffffffffffffffffffffffffff8a163014156114bb576114b673ffffffffffffffffffffffffffffffffffffffff8a16888a610c7c565b61157d565b6114b673ffffffffffffffffffffffffffffffffffffffff8a168b898b610d55565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301528391908b16906370a0823190602401602060405180830381865afa15801561154c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115709190612a24565b61157a9190612a84565b97505b600061158b896103e5612b30565b905060008161159c856103e8612b30565b6115a69190612a6c565b6115b08484612b30565b6115ba9190612b6d565b90506000808960ff166001146115d2578260006115d6565b6000835b604080516000815260208101918290527f022c0d9f00000000000000000000000000000000000000000000000000000000909152919350915073ffffffffffffffffffffffffffffffffffffffff8c169063022c0d9f9061164090859085908e9060248101612ba8565b600060405180830381600087803b15801561165a57600080fd5b505af115801561166e573d6000803e3d6000fd5b50505050505050505050505050505050505050565b60006116958580516014018051915290565b90506000806116aa8780516001018051915290565b60ff1611905060006116c28780516014018051915290565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590915063128acb088284878161173957611734600173fffd8963efd1fc6a506488495d951d5263988d26612bed565b611749565b6117496401000276a36001612c22565b6040805173ffffffffffffffffffffffffffffffffffffffff8d811660208301528e168183015281518082038301815260608201928390527fffffffff0000000000000000000000000000000000000000000000000000000060e089901b169092526117bc959493929190606401612c5a565b60408051808303816000875af11580156117da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fe9190612ca1565b505060005473ffffffffffffffffffffffffffffffffffffffff16600114610511576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f526f75746550726f636573736f722e73776170556e6956333a20756e6578706560448201527f637465640000000000000000000000000000000000000000000000000000000060648201526084016101a8565b60006118b98580516001018051915290565b905060006118cd8680516014018051915290565b90506001808316141561199c5760006118ec8780516014018051915290565b905060028316611958578073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561193e57600080fd5b505af1158015611952573d6000803e3d6000fd5b50505050505b73ffffffffffffffffffffffffffffffffffffffff821630146119965761199673ffffffffffffffffffffffffffffffffffffffff82168386610c7c565b506111be565b60028216611a645773ffffffffffffffffffffffffffffffffffffffff851630146119e3576119e373ffffffffffffffffffffffffffffffffffffffff8516863086610d55565b6040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff851690632e1a7d4d90602401600060405180830381600087803b158015611a4b57600080fd5b505af1158015611a5f573d6000803e3d6000fd5b505050505b60405173ffffffffffffffffffffffffffffffffffffffff8216904780156108fc02916000818181858888f19350505050158015610511573d6000803e3d6000fd5b6000611ab88580516001018051915290565b90506000611acc8680516014018051915290565b905060ff821615611eaf578215611b835773ffffffffffffffffffffffffffffffffffffffff8516301415611b4157611b3c73ffffffffffffffffffffffffffffffffffffffff85167f000000000000000000000000000000000000000000000000000000000000000085610c7c565b611dd9565b611b3c73ffffffffffffffffffffffffffffffffffffffff8516867f000000000000000000000000000000000000000000000000000000000000000086610d55565b6040517f4ffe34db00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301527f00000000000000000000000000000000000000000000000000000000000000001690634ffe34db906024016040805180830381865afa158015611c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c329190612ce5565b516040517fdf23b45b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301526fffffffffffffffffffffffffffffffff909216917f0000000000000000000000000000000000000000000000000000000000000000169063df23b45b90602401606060405180830381865afa158015611cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf89190612d58565b60409081015190517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301526fffffffffffffffffffffffffffffffff909216918716906370a0823190602401602060405180830381865afa158015611d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc29190612a24565b611dcc9190612a6c565b611dd69190612a84565b92505b6040517f02b9446c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830181905290831660448301526064820185905260006084830152906302b9446c9060a40160408051808303816000875af1158015611e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea89190612ca1565b50506111be565b8215611f70576040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528681166024830152306044830152606482018590527f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90608401600060405180830381600087803b158015611f5357600080fd5b505af1158015611f67573d6000803e3d6000fd5b50505050612029565b6040517ff7888aec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301523060248301527f0000000000000000000000000000000000000000000000000000000000000000169063f7888aec90604401602060405180830381865afa158015612002573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120269190612a24565b92505b6040517f97da6d3000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152306024830152828116604483015260006064830152608482018590527f000000000000000000000000000000000000000000000000000000000000000016906397da6d309060a40160408051808303816000875af11580156120d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f69190612ca1565b5050505050505050565b60006121128580516014018051915290565b85516020808201805190920101875290915082156121e3576040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015286811660248301528381166044830152606482018590527f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90608401600060405180830381600087803b1580156121ca57600080fd5b505af11580156121de573d6000803e3d6000fd5b505050505b6040517f627dd56a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063627dd56a906122359084906004016129d1565b6020604051808303816000875af1158015612254573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105119190612a24565b600061228a8580516014018051915290565b905060008061229f8780516001018051915290565b60ff1611905060006122b78780516014018051915290565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86169081179091559091506321a761188284878161232e57612329600173fffd8963efd1fc6a506488495d951d5263988d26612bed565b61233e565b61233e6401000276a36001612c22565b6040805173ffffffffffffffffffffffffffffffffffffffff8d811660208301528e168183015281518082038301815260608201928390527fffffffff0000000000000000000000000000000000000000000000000000000060e089901b169092526123b39594939291600091606401612dc4565b60408051808303816000875af11580156123d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f59190612ca1565b505060005473ffffffffffffffffffffffffffffffffffffffff16600114610511576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f526f75746550726f636573736f722e7377617054726964656e74434c3a20756e60448201527f657870656374656400000000000000000000000000000000000000000000000060648201526084016101a8565b606082471015612531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016101a8565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161255a919061296b565b60006040518083038185875af1925050503d8060008114612597576040519150601f19603f3d011682016040523d82523d6000602084013e61259c565b606091505b50915091506125ad878383876125b8565b979650505050505050565b6060831561264b5782516126445773ffffffffffffffffffffffffffffffffffffffff85163b612644576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101a8565b5081611302565b61130283838151156126605781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a891906129d1565b73ffffffffffffffffffffffffffffffffffffffff811681146126b657600080fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126126f957600080fd5b813567ffffffffffffffff80821115612714576127146126b9565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561275a5761275a6126b9565b8160405283815286602085880101111561277357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c087890312156127ac57600080fd5b86356127b781612694565b95506020870135945060408701356127ce81612694565b93506060870135925060808701356127e581612694565b915060a087013567ffffffffffffffff81111561280157600080fd5b61280d89828a016126e8565b9150509295509295509295565b600080600080600080600080610100898b03121561283757600080fd5b883561284281612694565b975060208901359650604089013561285981612694565b955060608901359450608089013561287081612694565b935060a0890135925060c089013561288781612694565b915060e089013567ffffffffffffffff8111156128a357600080fd5b6128af8b828c016126e8565b9150509295985092959890939650565b600080600080606085870312156128d557600080fd5b8435935060208501359250604085013567ffffffffffffffff808211156128fb57600080fd5b818701915087601f83011261290f57600080fd5b81358181111561291e57600080fd5b88602082850101111561293057600080fd5b95989497505060200194505050565b60005b8381101561295a578181015183820152602001612942565b83811115610db35750506000910152565b6000825161297d81846020870161293f565b9190910192915050565b6000815180845261299f81602086016020860161293f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006129e46020830184612987565b9392505050565b600080604083850312156129fe57600080fd5b8235612a0981612694565b91506020830135612a1981612694565b809150509250929050565b600060208284031215612a3657600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115612a7f57612a7f612a3d565b500190565b600082821015612a9657612a96612a3d565b500390565b600060208284031215612aad57600080fd5b815180151581146129e457600080fd5b80516dffffffffffffffffffffffffffff81168114612adb57600080fd5b919050565b600080600060608486031215612af557600080fd5b612afe84612abd565b9250612b0c60208501612abd565b9150604084015163ffffffff81168114612b2557600080fd5b809150509250925092565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612b6857612b68612a3d565b500290565b600082612ba3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b84815283602082015273ffffffffffffffffffffffffffffffffffffffff83166040820152608060608201526000612be36080830184612987565b9695505050505050565b600073ffffffffffffffffffffffffffffffffffffffff83811690831681811015612c1a57612c1a612a3d565b039392505050565b600073ffffffffffffffffffffffffffffffffffffffff808316818516808303821115612c5157612c51612a3d565b01949350505050565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a060808301526125ad60a0830184612987565b60008060408385031215612cb457600080fd5b505080516020909101519092909150565b80516fffffffffffffffffffffffffffffffff81168114612adb57600080fd5b600060408284031215612cf757600080fd5b6040516040810181811067ffffffffffffffff82111715612d1a57612d1a6126b9565b604052612d2683612cc5565b8152612d3460208401612cc5565b60208201529392505050565b805167ffffffffffffffff81168114612adb57600080fd5b600060608284031215612d6a57600080fd5b6040516060810181811067ffffffffffffffff82111715612d8d57612d8d6126b9565b604052612d9983612d40565b8152612da760208401612d40565b6020820152612db860408401612cc5565b60408201529392505050565b600073ffffffffffffffffffffffffffffffffffffffff80891683528715156020840152866040840152808616606084015250831515608083015260c060a0830152612e1360c0830184612987565b9897505050505050505056fea2646970667358221220f8eb3ff934908f8e1bec8fd0a8d1a7e687bd7455ed6df7eb70a50db9a167ab9d64736f6c634300080a0033","sourceMap":"1012:16674:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1877:299;;;;;;:::i;:::-;;:::i;:::-;;;2171:25:12;;;2159:2;2144:18;1877:299:5;;;;;;;;1105:42;;;;;;;;;;;;;;;;;;2408::12;2396:55;;;2378:74;;2366:2;2351:18;1105:42:5;2207:251:12;2665:547:5;;;;;;:::i;:::-;;:::i;17005:679::-;;;;;;;;;;-1:-1:-1;17005:679:5;;;;;:::i;:::-;;:::i;:::-;;14626;;;;;;;;;;-1:-1:-1;14626:679:5;;;;;:::i;:::-;;:::i;1877:299::-;2065:17;1247:8;;1259:1;1247:13;1239:50;;;;;;;4495:2:12;1239:50:5;;;4477:21:12;4534:2;4514:18;;;4507:30;4573:26;4553:18;;;4546:54;4617:18;;1239:50:5;;;;;;;;;1308:1;1297:8;:12;2097:74:::1;2118:7:::0;2127:8;2137;2147:12;2161:2;2165:5;2097:20:::1;:74::i;:::-;1337:1:::0;1326:12;;2090:81;1877:299;-1:-1:-1;;;;;;;1877:299:5:o;2665:547::-;2939:17;1247:8;;1259:1;1247:13;1239:50;;;;;;;4495:2:12;1239:50:5;;;4477:21:12;4534:2;4514:18;;;4507:30;4573:26;4553:18;;;4546:54;4617:18;;1239:50:5;4293:348:12;1239:50:5;1308:1;1297:8;:12;3007:52:::1;::::0;2965:12:::1;::::0;;;3007:20:::1;::::0;::::1;::::0;3035:19;;2965:12;3007:52;2965:12;3007:52;3035:19;3007:20;:52:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2964:95;;;;3073:7;3106:11;3089:29;;;;;;;;:::i;:::-;;;;;;;;;;;;;3065:55;;;;;;;;;;;;;;:::i;:::-;;3133:74;3154:7;3163:8;3173;3183:12;3197:2;3201:5;3133:20;:74::i;:::-;1337:1:::0;1326:12;;3126:81;2665:547;-1:-1:-1;;;;;;;;;;;2665:547:5:o;17005:679::-;17152:14;;;;17138:10;:28;17130:103;;;;;;;6147:2:12;17130:103:5;;;6129:21:12;6186:2;6166:18;;;6159:30;6225:34;6205:18;;;6198:62;6296:32;6276:18;;;6269:60;6346:19;;17130:103:5;5945:426:12;17130:103:5;17239:14;:40;;;;523:42;17239:40;;;:14;17319:36;;;;17330:4;17319:36;:::i;:::-;17285:70;;;;17361:13;17392:1;17377:12;:16;:46;;17411:12;17377:46;;;17396:12;17377:46;17361:62;;17446:1;17437:6;:10;17429:80;;;;;;;6987:2:12;17429:80:5;;;6969:21:12;7026:2;7006:18;;;6999:30;7065:34;7045:18;;;7038:62;7136:27;7116:18;;;7109:55;7181:19;;17429:80:5;6785:421:12;17429:80:5;17520:21;;;17536:4;17520:21;17516:163;;;17543:57;:28;;;17572:10;17592:6;17543:28;:57::i;:::-;17516:163;;;17612:67;:32;;;17645:4;17651:10;17671:6;17612:32;:67::i;:::-;17124:560;;;17005:679;;;;:::o;14626:::-;14773:14;;;;14759:10;:28;14751:103;;;;;;;7413:2:12;14751:103:5;;;7395:21:12;7452:2;7432:18;;;7425:30;7491:34;7471:18;;;7464:62;7562:32;7542:18;;;7535:60;7612:19;;14751:103:5;7211:426:12;14751:103:5;14860:14;:40;;;;523:42;14860:40;;;:14;14940:36;;;;14951:4;14940:36;:::i;:::-;14906:70;;;;14982:13;15013:1;14998:12;:16;:46;;15032:12;14998:46;;;15017:12;14998:46;14982:62;;15067:1;15058:6;:10;15050:80;;;;;;;7844:2:12;15050:80:5;;;7826:21:12;7883:2;7863:18;;;7856:30;7922:34;7902:18;;;7895:62;7993:27;7973:18;;;7966:55;8038:19;;15050:80:5;7642:421:12;3535:1455:5;3717:17;;3769:25;;;436:42;3769:25;:89;;3821:37;;;;;3847:10;3821:37;;;2378:74:12;3821:25:5;;;;;;2351:18:12;;3821:37:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3769:89;;;3797:21;3769:89;3742:116;-1:-1:-1;3864:25:5;3892:26;;;436:42;3892:26;:81;;3943:30;;;;;:26;2396:55:12;;;3943:30:5;;;2378:74:12;3943:26:5;;;;;2351:18:12;;3943:30:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3892:81;;;3929:2;3921:19;;;3892:81;208:4:4;202:11;;233:15;;;220:29;;;256:20;;;297:11;;339:17;;334:2;322:15;;315:42;3864:109:5;;-1:-1:-1;4034:435:5;503:13:4;;551:2;539:15;;533:22;-1:-1:-1;4034:435:5;;;4070:17;4090:18;:6;697:13:4;;733:1;724:11;749:10;;766:19;;749:10;594:201;4090:18:5;4070:38;;4120:11;:16;;4135:1;4120:16;4116:346;;;4138:22;4153:6;4138:14;:22::i;:::-;4116:346;;;4177:11;:16;;4192:1;4177:16;4173:289;;;4195:34;4212:6;4220:8;4195:16;:34::i;4173:289::-;4246:11;:16;;4261:1;4246:16;4242:220;;;4264:21;4278:6;4264:13;:21::i;4242:220::-;4302:11;:16;;4317:1;4302:16;4298:164;;;4320:22;4335:6;4320:14;:22::i;4298:164::-;4359:11;:16;;4374:1;4359:16;4355:107;;;4377:26;4396:6;4377:18;:26::i;4355:107::-;4416:46;;;;;8690:2:12;4416:46:5;;;8672:21:12;8729:2;8709:18;;;8702:30;8768:34;8748:18;;;8741:62;8839:6;8819:18;;;8812:34;8863:19;;4416:46:5;8488:400:12;4355:107:5;4062:407;4034:435;;;4475:22;4500:25;;;436:42;4500:25;:89;;4552:37;;;;;4578:10;4552:37;;;2378:74:12;4552:25:5;;;;;;2351:18:12;;4552:37:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4500:89;;;4528:21;4500:89;4475:114;-1:-1:-1;4632:16:5;4603:25;4620:8;4475:114;4603:25;:::i;:::-;:45;;4595:105;;;;;;;9417:2:12;4595:105:5;;;9399:21:12;9456:2;9436:18;;;9429:30;9495:34;9475:18;;;9468:62;9566:17;9546:18;;;9539:45;9601:19;;4595:105:5;9215:411:12;4595:105:5;4707:23;4733:26;;;436:42;4733:26;:81;;4784:30;;;;;:26;2396:55:12;;;4784:30:5;;;2378:74:12;4784:26:5;;;;;2351:18:12;;4784:30:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4733:81;;;4770:2;4762:19;;;4733:81;4707:107;-1:-1:-1;4847:32:5;4867:12;4847:17;:32;:::i;:::-;4828:15;:51;;4820:111;;;;;;;9833:2:12;4820:111:5;;;9815:21:12;9872:2;9852:18;;;9845:30;9911:34;9891:18;;;9884:62;9982:17;9962:18;;;9955:45;10017:19;;4820:111:5;9631:411:12;4820:111:5;4950:35;4968:17;4950:15;:35;:::i;:::-;4938:47;3535:1455;-1:-1:-1;;;;;;;;;;;;3535:1455:5:o;763:205:2:-;902:58;;10381:42:12;10369:55;;902:58:2;;;10351:74:12;10441:18;;;10434:34;;;875:86:2;;895:5;;925:23;;10324:18:12;;902:58:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;875:19;:86::i;:::-;763:205;;;:::o;974:241::-;1139:68;;10691:42:12;10760:15;;;1139:68:2;;;10742:34:12;10812:15;;10792:18;;;10785:43;10844:18;;;10837:34;;;1112:96:2;;1132:5;;1162:27;;10654:18:12;;1139:68:2;10479:398:12;1112:96:2;974:241;;;;:::o;5480:325:5:-;5534:13;5550:20;:6;1527:13:4;;1563:2;1554:12;1580:10;;1597:19;;1580:10;1420:206;5550:20:5;5598:38;;;;;5630:4;5598:38;;;2378:74:12;5534:36:5;;-1:-1:-1;5576:19:5;;5598:23;;;;;;2351:18:12;;5598:38:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5576:60;-1:-1:-1;5664:15:5;;5660:37;;5681:16;;5660:37;5740:60;5758:6;5774:4;5781:5;5788:11;5740:17;:60::i;6047:181::-;6124:13;6140:20;:6;1527:13:4;;1563:2;1554:12;1580:10;;1597:19;;1580:10;1420:206;6140:20:5;6124:36;;6166:57;6184:6;6192:10;6204:5;6211:11;6166:17;:57::i;5127:176::-;5202:21;5229:69;5247:6;5263:4;436:42;5202:21;5229:17;:69::i;:::-;5174:129;5127:176;:::o;7211:138::-;7265:13;7281:20;:6;1527:13:4;;1563:2;1554:12;1580:10;;1597:19;;1580:10;1420:206;7281:20:5;7265:36;;7307:37;7312:6;7328:4;7335:5;7342:1;7307:4;:37::i;7500:535::-;7558:13;7574:20;:6;1527:13:4;;1563:2;1554:12;1580:10;;1597:19;;1580:10;1420:206;7574:20:5;7558:36;;7600:9;7612:18;:6;697:13:4;;733:1;724:11;749:10;;766:19;;749:10;594:201;7612:18:5;7659:40;;;;;:18;11135:15:12;;;7659:40:5;;;11117:34:12;7693:4:5;11167:18:12;;;11160:43;7600:30:5;;-1:-1:-1;7637:19:5;;7659:8;:18;;;;11029::12;;7659:40:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7637:62;-1:-1:-1;7727:15:5;;7723:37;;7744:16;;7723:37;7804:9;7799:226;7823:3;7819:7;;:1;:7;7799:226;;;7843:12;7858:19;:6;904:13:4;;940:1;931:11;956:10;;973:19;;956:10;799:203;7858:19:5;7928:5;7905:19;;;;;7904:29;7943:21;;;;;7843:34;;-1:-1:-1;7974:42:5;7979:6;7995:4;8002:5;7904:29;7974:4;:42::i;:::-;-1:-1:-1;;7828:3:5;;7799:226;;;;7552:483;;;7500:535;:::o;3747:706:2:-;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;4192:27;;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:2;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;;;;11887:2:12;4351:85:2;;;11869:21:12;11926:2;11906:18;;;11899:30;11965:34;11945:18;;;11938:62;12036:12;12016:18;;;12009:40;12066:19;;4351:85:2;11685:406:12;6531:392:5;6640:9;6652:18;:6;697:13:4;;733:1;724:11;749:10;;766:19;;749:10;594:201;6652:18:5;6640:30;;6699:9;6694:219;6718:3;6714:7;;:1;:7;6694:219;;;6738:12;6753:19;:6;904:13:4;;940:1;931:11;956:10;;973:19;;956:10;799:203;6753:19:5;6823:5;6800:19;;;;;6799:29;6838:21;;;;;6738:34;;-1:-1:-1;6869:35:5;6874:6;6882:4;6888:7;6799:29;6869:4;:35::i;:::-;-1:-1:-1;;6723:3:5;;6694:219;;;;6634:289;6531:392;;;;:::o;8250:623::-;8343:14;8360:18;:6;697:13:4;;733:1;724:11;749:10;;766:19;;749:10;594:201;8360:18:5;8343:35;-1:-1:-1;8388:13:5;;;8384:484;;8403:42;8413:6;8421:4;8427:7;8436:8;8403:9;:42::i;:::-;8384:484;;;8460:8;:13;;8472:1;8460:13;8456:412;;;8475:42;8485:6;8493:4;8499:7;8508:8;8475:9;:42::i;8456:412::-;8532:8;:13;;8544:1;8532:13;8528:340;;;8547:43;8558:6;8566:4;8572:7;8581:8;8547:10;:43::i;8528:340::-;8605:8;:13;;8617:1;8605:13;8601:267;;;8620:44;8632:6;8640:4;8646:7;8655:8;8620:11;:44::i;8601:267::-;8679:8;:13;;8691:1;8679:13;8675:193;;;8694:44;8706:6;8714:4;8720:7;8729:8;8694:11;:44::i;8675:193::-;8753:8;:13;;8765:1;8753:13;8749:119;;;8768:46;8782:6;8790:4;8796:7;8805:8;8768:13;:46::i;8749:119::-;8825:43;;;;;12298:2:12;8825:43:5;;;12280:21:12;12337:2;12317:18;;;12310:30;12376:34;12356:18;;;12349:62;12447:3;12427:18;;;12420:31;12468:19;;8825:43:5;12096:397:12;3873:223:3;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4037:21;:52::i;:::-;4030:59;3873:223;-1:-1:-1;;;;3873:223:3:o;11388:1032:5:-;11486:12;11501:20;:6;1527:13:4;;1563:2;1554:12;1580:10;;1597:19;;1580:10;1420:206;11501:20:5;11486:35;;11527:15;11545:18;:6;697:13:4;;733:1;724:11;749:10;;766:19;;749:10;594:201;11545:18:5;11527:36;;11569:10;11582:20;:6;1527:13:4;;1563:2;1554:12;1580:10;;1597:19;;1580:10;1420:206;11582:20:5;11569:33;;11610:10;11622;11653:4;11638:32;;;:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11609:63;;;;;;;;;11691:1;11686:2;:6;:16;;;;;11701:1;11696:2;:6;11686:16;11678:48;;;;;;;13348:2:12;11678:48:5;;;13330:21:12;13387:2;13367:18;;;13360:30;13426:21;13406:18;;;13399:49;13465:18;;11678:48:5;13146:343:12;11678:48:5;11733:17;11752:18;11774:9;:14;;11787:1;11774:14;:36;;11803:2;11807;11774:36;;;11792:2;11796;11774:36;11732:78;;;;11821:8;11833:1;11821:13;11817:232;;11848:21;;;11864:4;11848:21;11844:138;;;11871:44;:28;;;11900:4;11906:8;11871:28;:44::i;:::-;11817:232;;11844:138;11928:54;:32;;;11961:4;11967;11973:8;11928:32;:54::i;11817:232::-;12006:31;;;;;:25;2396:55:12;;;12006:31:5;;;2378:74:12;12040:9:5;;12006:25;;;;;;2351:18:12;;12006:31:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:43;;;;:::i;:::-;11995:54;;11817:232;12092:23;12118:14;:8;12129:3;12118:14;:::i;:::-;12092:40;-1:-1:-1;12138:17:5;12092:40;12192:16;:9;12204:4;12192:16;:::i;:::-;:34;;;;:::i;:::-;12159:28;12177:10;12159:15;:28;:::i;:::-;12158:69;;;;:::i;:::-;12138:89;;12234:18;12254;12276:9;:14;;12289:1;12276:14;:66;;12320:9;12339:1;12276:66;;;12302:1;12306:9;12276:66;12402:12;;;12412:1;12402:12;;;;;;;;;12348:67;;;;12233:109;;-1:-1:-1;12233:109:5;-1:-1:-1;12348:25:5;;;;;;:67;;12233:109;;;;12398:2;;12348:67;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11480:940;;;;;;;;;;;11388:1032;;;;:::o;13175:562::-;13273:12;13288:20;:6;1527:13:4;;1563:2;1554:12;1580:10;;1597:19;;1580:10;1420:206;13288:20:5;13273:35;;13314:15;13353:1;13332:18;:6;697:13:4;;733:1;724:11;749:10;;766:19;;749:10;594:201;13332:18:5;:22;;;13314:40;;13360:17;13380:20;:6;1527:13:4;;1563:2;1554:12;1580:10;;1597:19;;1580:10;1420:206;13380:20:5;13407:14;:21;;;;;;;;;;;;;13360:40;;-1:-1:-1;13434:25:5;13360:40;13484:10;13509:8;13484:10;13526:52;;13560:18;13577:1;882:49;13560:18;:::i;:::-;13526:52;;;13539:18;719:10;13556:1;13539:18;:::i;:::-;13586:25;;;11066:42:12;11135:15;;;13586:25:5;;;11117:34:12;11187:15;;11167:18;;;11160:43;13586:25:5;;;;;;;;;11029:18:12;;;13586:25:5;;;;13434:183;;;;;;;;;;;;;;;13586:25;13434:183;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;13631:14:5;;:41;:14;523:42;13631:41;13623:90;;;;;;;16065:2:12;13623:90:5;;;16047:21:12;16104:2;16084:18;;;16077:30;16143:34;16123:18;;;16116:62;16214:6;16194:18;;;16187:34;16238:19;;13623:90:5;15863:400:12;9121:724:5;9220:22;9245:18;:6;697:13:4;;733:1;724:11;749:10;;766:19;;749:10;594:201;9245:18:5;9220:43;;9269:10;9282:20;:6;1527:13:4;;1563:2;1554:12;1580:10;;1597:19;;1580:10;1420:206;9282:20:5;9269:33;-1:-1:-1;9332:1:5;9313:20;;;:25;9309:532;;;9364:17;9384:20;:6;1527:13:4;;1563:2;1554:12;1580:10;;1597:19;;1580:10;1420:206;9384:20:5;9364:40;-1:-1:-1;9435:1:5;9416:20;;9412:74;;9449:9;9443:24;;;9475:8;9443:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9412:74;9498:19;;;9512:4;9498:19;9494:69;;9519:44;:30;;;9550:2;9554:8;9519:30;:44::i;:::-;9340:230;9309:532;;;9624:1;9605:20;;9601:183;;9646:21;;;9662:4;9646:21;9642:90;;9669:63;:32;;;9702:4;9716;9723:8;9669:32;:63::i;:::-;9742:33;;;;;;;;2171:25:12;;;9742:23:5;;;;;;2144:18:12;;9742:33:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9601:183;9791:43;;:20;;;;9812:21;9791:43;;;;;;;;;9812:21;9791:20;:43;;;;;;;;;;;;;;;;;;;10084:1076;10184:15;10202:18;:6;697:13:4;;733:1;724:11;749:10;;766:19;;749:10;594:201;10202:18:5;10184:36;;10226:10;10239:20;:6;1527:13:4;;1563:2;1554:12;1580:10;;1597:19;;1580:10;1420:206;10239:20:5;10226:33;-1:-1:-1;10270:13:5;;;;10266:890;;10398:13;;10394:427;;10427:21;;;10443:4;10427:21;10423:166;;;10450:57;:28;;;10487:8;10498;10450:28;:57::i;:::-;10394:427;;10423:166;10522:67;:32;;;10555:4;10569:8;10580;10522:32;:67::i;10394:427::-;10780:24;;;;;:15;2396:55:12;;;10780:24:5;;;2378:74:12;10780:8:5;:15;;;;2351:18:12;;10780:24:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:32;10731:30;;;;;:21;2396:55:12;;;10731:30:5;;;2378:74:12;10676:136:5;;;;;10731:8;:21;;;;2351:18:12;;10731:30:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:38;;;;;10676:44;;;;;:25;10710:8;2396:55:12;;10676:44:5;;;2378:74:12;10676:93:5;;;;;:25;;;;;2351:18:12;;10676:44:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:93;;;;:::i;:::-;:136;;;;:::i;:::-;10665:147;;10394:427;10828:61;;;;;:16;18184:15:12;;;10828:61:5;;;18166:34:12;10828:8:5;:16;;18216:18:12;;;18209:43;;;18288:15;;;18268:18;;;18261:43;18320:18;;;18313:34;;;10887:1:5;18363:19:12;;;18356:35;10828:16:5;;;18077:19:12;;10828:61:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;10266:890;;;10934:12;;10930:153;;10958:57;;;;;:17;18962:15:12;;;10958:57:5;;;18944:34:12;19014:15;;;18994:18;;;18987:43;10999:4:5;19046:18:12;;;19039:43;19098:18;;;19091:34;;;10958:8:5;:17;;;;18855:19:12;;10958:57:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10930:153;;;11041:42;;;;;:18;11135:15:12;;;11041:42:5;;;11117:34:12;11077:4:5;11167:18:12;;;11160:43;11041:8:5;:18;;;;11029::12;;11041:42:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11030:53;;10930:153;11091:58;;;;;:17;18184:15:12;;;11091:58:5;;;18166:34:12;11126:4:5;18216:18:12;;;18209:43;18288:15;;;18268:18;;;18261:43;11137:1:5;18320:18:12;;;18313:34;18363:19;;;18356:35;;;11091:8:5;:17;;;;18077:19:12;;11091:58:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;10178:982;;10084:1076;;;;:::o;12634:313::-;12734:12;12749:20;:6;1527:13:4;;1563:2;1554:12;1580:10;;1597:19;;1580:10;1420:206;12749:20:5;1740:13:4;;1776:2;1767:12;;;1800:10;;1832:16;;;;1817:32;;12734:35:5;;-1:-1:-1;12828:13:5;;12824:82;;12851:48;;;;;:17;18962:15:12;;;12851:48:5;;;18944:34:12;19014:15;;;18994:18;;;18987:43;19066:15;;;19046:18;;;19039:43;19098:18;;;19091:34;;;12851:8:5;:17;;;;18855:19:12;;12851:48:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12824:82;12916:26;;;;;:16;;;;;;:26;;12933:8;;12916:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;15533:583::-;15635:12;15650:20;:6;1527:13:4;;1563:2;1554:12;1580:10;;1597:19;;1580:10;1420:206;15650:20:5;15635:35;;15676:15;15715:1;15694:18;:6;697:13:4;;733:1;724:11;749:10;;766:19;;749:10;594:201;15694:18:5;:22;;;15676:40;;15722:17;15742:20;:6;1527:13:4;;1563:2;1554:12;1580:10;;1597:19;;1580:10;1420:206;15742:20:5;15769:14;:21;;;;;;;;;;;;;15722:40;;-1:-1:-1;15796:25:5;15722:40;15846:10;15871:8;15846:10;15888:52;;15922:18;15939:1;882:49;15922:18;:::i;:::-;15888:52;;;15901:18;719:10;15918:1;15901:18;:::i;:::-;15961:25;;;11066:42:12;11135:15;;;15961:25:5;;;11117:34:12;11187:15;;11167:18;;;11160:43;15961:25:5;;;;;;;;;11029:18:12;;;15961:25:5;;;;15796:196;;;;;;;;;;;;;;;-1:-1:-1;;15796:196:5;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;16006:14:5;;:41;:14;523:42;16006:41;15998:94;;;;;;;20804:2:12;15998:94:5;;;20786:21:12;20843:2;20823:18;;;20816:30;20882:34;20862:18;;;20855:62;20953:10;20933:18;;;20926:38;20981:19;;15998:94:5;20602:404:12;4960:446:3;5125:12;5182:5;5157:21;:30;;5149:81;;;;;;;21213:2:12;5149:81:3;;;21195:21:12;21252:2;21232:18;;;21225:30;21291:34;21271:18;;;21264:62;21362:8;21342:18;;;21335:36;21388:19;;5149:81:3;21011:402:12;5149:81:3;5241:12;5255:23;5282:6;:11;;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;4960:446;-1:-1:-1;;;;;;;4960:446:3:o;7466:628::-;7646:12;7674:7;7670:418;;;7701:17;;7697:286;;1465:19;;;;7908:60;;;;;;;21620:2:12;7908:60:3;;;21602:21:12;21659:2;21639:18;;;21632:30;21698:31;21678:18;;;21671:59;21747:18;;7908:60:3;21418:353:12;7908:60:3;-1:-1:-1;8003:10:3;7996:17;;7670:418;8044:33;8052:10;8064:12;8775:17;;:21;8771:379;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;;;;;;;;;;:::i;14:154:12:-;100:42;93:5;89:54;82:5;79:65;69:93;;158:1;155;148:12;69:93;14:154;:::o;173:184::-;225:77;222:1;215:88;322:4;319:1;312:15;346:4;343:1;336:15;362:777;404:5;457:3;450:4;442:6;438:17;434:27;424:55;;475:1;472;465:12;424:55;511:6;498:20;537:18;574:2;570;567:10;564:36;;;580:18;;:::i;:::-;714:2;708:9;776:4;768:13;;619:66;764:22;;;788:2;760:31;756:40;744:53;;;812:18;;;832:22;;;809:46;806:72;;;858:18;;:::i;:::-;898:10;894:2;887:22;933:2;925:6;918:18;979:3;972:4;967:2;959:6;955:15;951:26;948:35;945:55;;;996:1;993;986:12;945:55;1060:2;1053:4;1045:6;1041:17;1034:4;1026:6;1022:17;1009:54;1107:1;1100:4;1095:2;1087:6;1083:15;1079:26;1072:37;1127:6;1118:15;;;;;;362:777;;;;:::o;1144:876::-;1257:6;1265;1273;1281;1289;1297;1350:3;1338:9;1329:7;1325:23;1321:33;1318:53;;;1367:1;1364;1357:12;1318:53;1406:9;1393:23;1425:31;1450:5;1425:31;:::i;:::-;1475:5;-1:-1:-1;1527:2:12;1512:18;;1499:32;;-1:-1:-1;1583:2:12;1568:18;;1555:32;1596:33;1555:32;1596:33;:::i;:::-;1648:7;-1:-1:-1;1702:2:12;1687:18;;1674:32;;-1:-1:-1;1758:3:12;1743:19;;1730:33;1772;1730;1772;:::i;:::-;1824:7;-1:-1:-1;1882:3:12;1867:19;;1854:33;1910:18;1899:30;;1896:50;;;1942:1;1939;1932:12;1896:50;1965:49;2006:7;1997:6;1986:9;1982:22;1965:49;:::i;:::-;1955:59;;;1144:876;;;;;;;;:::o;2463:1095::-;2602:6;2610;2618;2626;2634;2642;2650;2658;2711:3;2699:9;2690:7;2686:23;2682:33;2679:53;;;2728:1;2725;2718:12;2679:53;2767:9;2754:23;2786:31;2811:5;2786:31;:::i;:::-;2836:5;-1:-1:-1;2888:2:12;2873:18;;2860:32;;-1:-1:-1;2944:2:12;2929:18;;2916:32;2957:33;2916:32;2957:33;:::i;:::-;3009:7;-1:-1:-1;3063:2:12;3048:18;;3035:32;;-1:-1:-1;3119:3:12;3104:19;;3091:33;3133;3091;3133;:::i;:::-;3185:7;-1:-1:-1;3239:3:12;3224:19;;3211:33;;-1:-1:-1;3296:3:12;3281:19;;3268:33;3310;3268;3310;:::i;:::-;3362:7;-1:-1:-1;3420:3:12;3405:19;;3392:33;3448:18;3437:30;;3434:50;;;3480:1;3477;3470:12;3434:50;3503:49;3544:7;3535:6;3524:9;3520:22;3503:49;:::i;:::-;3493:59;;;2463:1095;;;;;;;;;;;:::o;3563:725::-;3649:6;3657;3665;3673;3726:2;3714:9;3705:7;3701:23;3697:32;3694:52;;;3742:1;3739;3732:12;3694:52;3778:9;3765:23;3755:33;;3835:2;3824:9;3820:18;3807:32;3797:42;;3890:2;3879:9;3875:18;3862:32;3913:18;3954:2;3946:6;3943:14;3940:34;;;3970:1;3967;3960:12;3940:34;4008:6;3997:9;3993:22;3983:32;;4053:7;4046:4;4042:2;4038:13;4034:27;4024:55;;4075:1;4072;4065:12;4024:55;4115:2;4102:16;4141:2;4133:6;4130:14;4127:34;;;4157:1;4154;4147:12;4127:34;4202:7;4197:2;4188:6;4184:2;4180:15;4176:24;4173:37;4170:57;;;4223:1;4220;4213:12;4170:57;3563:725;;;;-1:-1:-1;;4254:2:12;4246:11;;-1:-1:-1;;;3563:725:12:o;4856:258::-;4928:1;4938:113;4952:6;4949:1;4946:13;4938:113;;;5028:11;;;5022:18;5009:11;;;5002:39;4974:2;4967:10;4938:113;;;5069:6;5066:1;5063:13;5060:48;;;-1:-1:-1;;5104:1:12;5086:16;;5079:27;4856:258::o;5119:274::-;5248:3;5286:6;5280:13;5302:53;5348:6;5343:3;5336:4;5328:6;5324:17;5302:53;:::i;:::-;5371:16;;;;;5119:274;-1:-1:-1;;5119:274:12:o;5398:317::-;5440:3;5478:5;5472:12;5505:6;5500:3;5493:19;5521:63;5577:6;5570:4;5565:3;5561:14;5554:4;5547:5;5543:16;5521:63;:::i;:::-;5629:2;5617:15;5634:66;5613:88;5604:98;;;;5704:4;5600:109;;5398:317;-1:-1:-1;;5398:317:12:o;5720:220::-;5869:2;5858:9;5851:21;5832:4;5889:45;5930:2;5919:9;5915:18;5907:6;5889:45;:::i;:::-;5881:53;5720:220;-1:-1:-1;;;5720:220:12:o;6376:404::-;6460:6;6468;6521:2;6509:9;6500:7;6496:23;6492:32;6489:52;;;6537:1;6534;6527:12;6489:52;6576:9;6563:23;6595:31;6620:5;6595:31;:::i;:::-;6645:5;-1:-1:-1;6702:2:12;6687:18;;6674:32;6715:33;6674:32;6715:33;:::i;:::-;6767:7;6757:17;;;6376:404;;;;;:::o;8299:184::-;8369:6;8422:2;8410:9;8401:7;8397:23;8393:32;8390:52;;;8438:1;8435;8428:12;8390:52;-1:-1:-1;8461:16:12;;8299:184;-1:-1:-1;8299:184:12:o;8893:::-;8945:77;8942:1;8935:88;9042:4;9039:1;9032:15;9066:4;9063:1;9056:15;9082:128;9122:3;9153:1;9149:6;9146:1;9143:13;9140:39;;;9159:18;;:::i;:::-;-1:-1:-1;9195:9:12;;9082:128::o;10047:125::-;10087:4;10115:1;10112;10109:8;10106:34;;;10120:18;;:::i;:::-;-1:-1:-1;10157:9:12;;10047:125::o;11403:277::-;11470:6;11523:2;11511:9;11502:7;11498:23;11494:32;11491:52;;;11539:1;11536;11529:12;11491:52;11571:9;11565:16;11624:5;11617:13;11610:21;11603:5;11600:32;11590:60;;11646:1;11643;11636:12;12498:188;12577:13;;12630:30;12619:42;;12609:53;;12599:81;;12676:1;12673;12666:12;12599:81;12498:188;;;:::o;12691:450::-;12778:6;12786;12794;12847:2;12835:9;12826:7;12822:23;12818:32;12815:52;;;12863:1;12860;12853:12;12815:52;12886:40;12916:9;12886:40;:::i;:::-;12876:50;;12945:49;12990:2;12979:9;12975:18;12945:49;:::i;:::-;12935:59;;13037:2;13026:9;13022:18;13016:25;13081:10;13074:5;13070:22;13063:5;13060:33;13050:61;;13107:1;13104;13097:12;13050:61;13130:5;13120:15;;;12691:450;;;;;:::o;13494:228::-;13534:7;13660:1;13592:66;13588:74;13585:1;13582:81;13577:1;13570:9;13563:17;13559:105;13556:131;;;13667:18;;:::i;:::-;-1:-1:-1;13707:9:12;;13494:228::o;13727:274::-;13767:1;13793;13783:189;;13828:77;13825:1;13818:88;13929:4;13926:1;13919:15;13957:4;13954:1;13947:15;13783:189;-1:-1:-1;13986:9:12;;13727:274::o;14006:482::-;14237:6;14226:9;14219:25;14280:6;14275:2;14264:9;14260:18;14253:34;14335:42;14327:6;14323:55;14318:2;14307:9;14303:18;14296:83;14415:3;14410:2;14399:9;14395:18;14388:31;14200:4;14436:46;14477:3;14466:9;14462:19;14454:6;14436:46;:::i;:::-;14428:54;14006:482;-1:-1:-1;;;;;;14006:482:12:o;14493:254::-;14533:4;14562:42;14654:10;;;;14624;;14676:12;;;14673:38;;;14691:18;;:::i;:::-;14728:13;;14493:254;-1:-1:-1;;;14493:254:12:o;14752:261::-;14792:3;14820:42;14889:2;14886:1;14882:10;14919:2;14916:1;14912:10;14950:3;14946:2;14942:12;14937:3;14934:21;14931:47;;;14958:18;;:::i;:::-;14994:13;;14752:261;-1:-1:-1;;;;14752:261:12:o;15018:592::-;15232:4;15261:42;15342:2;15334:6;15330:15;15319:9;15312:34;15396:6;15389:14;15382:22;15377:2;15366:9;15362:18;15355:50;15441:6;15436:2;15425:9;15421:18;15414:34;15496:2;15488:6;15484:15;15479:2;15468:9;15464:18;15457:43;;15537:3;15531;15520:9;15516:19;15509:32;15558:46;15599:3;15588:9;15584:19;15576:6;15558:46;:::i;15615:243::-;15692:6;15700;15753:2;15741:9;15732:7;15728:23;15724:32;15721:52;;;15769:1;15766;15759:12;15721:52;-1:-1:-1;;15792:16:12;;15848:2;15833:18;;;15827:25;15792:16;;15827:25;;-1:-1:-1;15615:243:12:o;16268:192::-;16347:13;;16400:34;16389:46;;16379:57;;16369:85;;16450:1;16447;16440:12;16465:548;16559:6;16612:2;16600:9;16591:7;16587:23;16583:32;16580:52;;;16628:1;16625;16618:12;16580:52;16661:2;16655:9;16703:2;16695:6;16691:15;16772:6;16760:10;16757:22;16736:18;16724:10;16721:34;16718:62;16715:88;;;16783:18;;:::i;:::-;16819:2;16812:22;16858:40;16888:9;16858:40;:::i;:::-;16850:6;16843:56;16932:49;16977:2;16966:9;16962:18;16932:49;:::i;:::-;16927:2;16915:15;;16908:74;16919:6;16465:548;-1:-1:-1;;;16465:548:12:o;17018:175::-;17096:13;;17149:18;17138:30;;17128:41;;17118:69;;17183:1;17180;17173:12;17198:635;17298:6;17351:2;17339:9;17330:7;17326:23;17322:32;17319:52;;;17367:1;17364;17357:12;17319:52;17400:2;17394:9;17442:2;17434:6;17430:15;17511:6;17499:10;17496:22;17475:18;17463:10;17460:34;17457:62;17454:88;;;17522:18;;:::i;:::-;17558:2;17551:22;17597:39;17626:9;17597:39;:::i;:::-;17589:6;17582:55;17670:48;17714:2;17703:9;17699:18;17670:48;:::i;:::-;17665:2;17657:6;17653:15;17646:73;17752:49;17797:2;17786:9;17782:18;17752:49;:::i;:::-;17747:2;17735:15;;17728:74;17739:6;17198:635;-1:-1:-1;;;17198:635:12:o;19923:674::-;20159:4;20188:42;20269:2;20261:6;20257:15;20246:9;20239:34;20323:6;20316:14;20309:22;20304:2;20293:9;20289:18;20282:50;20368:6;20363:2;20352:9;20348:18;20341:34;20423:2;20415:6;20411:15;20406:2;20395:9;20391:18;20384:43;;20478:6;20471:14;20464:22;20458:3;20447:9;20443:19;20436:51;20524:3;20518;20507:9;20503:19;20496:32;20545:46;20586:3;20575:9;20571:19;20563:6;20545:46;:::i;:::-;20537:54;19923:674;-1:-1:-1;;;;;;;;19923:674:12:o","linkReferences":{},"immutableReferences":{"844":[{"start":162,"length":32},{"start":3955,"length":32},{"start":6935,"length":32},{"start":7006,"length":32},{"start":7112,"length":32},{"start":7309,"length":32},{"start":7482,"length":32},{"start":7710,"length":32},{"start":7951,"length":32},{"start":8123,"length":32},{"start":8330,"length":32},{"start":8582,"length":32}]}},"methodIdentifiers":{"bentoBox()":"6b2ace87","processRoute(address,uint256,address,uint256,address,bytes)":"2646478b","transferValueAndprocessRoute(address,uint256,address,uint256,address,uint256,address,bytes)":"93b3774c","tridentCLSwapCallback(int256,int256,bytes)":"e2a7b501","uniswapV3SwapCallback(int256,int256,bytes)":"fa461e33"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bentoBox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"route\",\"type\":\"bytes\"}],\"name\":\"processRoute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"transferValueTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountValueTransfer\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"route\",\"type\":\"bytes\"}],\"name\":\"transferValueAndprocessRoute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tridentCLSwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Ilya Lyalin\",\"kind\":\"dev\",\"methods\":{\"processRoute(address,uint256,address,uint256,address,bytes)\":{\"params\":{\"amountIn\":\"Amount of the input token\",\"amountOutMin\":\"Minimum amount of the output token\",\"tokenIn\":\"Address of the input token\",\"tokenOut\":\"Address of the output token\"},\"returns\":{\"amountOut\":\"Actual amount of the output token\"}},\"transferValueAndprocessRoute(address,uint256,address,uint256,address,uint256,address,bytes)\":{\"params\":{\"amountIn\":\"Amount of the input token\",\"amountOutMin\":\"Minimum amount of the output token\",\"amountValueTransfer\":\"How much value to transfer\",\"tokenIn\":\"Address of the input token\",\"tokenOut\":\"Address of the output token\",\"transferValueTo\":\"Address where the value should be transferred\"},\"returns\":{\"amountOut\":\"Actual amount of the output token\"}},\"tridentCLSwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a TridentCLPool deployed by the canonical TridentCLFactory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the ITridentCLPoolActions#swap call\"}},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"A route processor for the Sushi Aggregator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"processRoute(address,uint256,address,uint256,address,bytes)\":{\"notice\":\"Processes the route generated off-chain. Has a lock\"},\"transferValueAndprocessRoute(address,uint256,address,uint256,address,uint256,address,bytes)\":{\"notice\":\"Transfers some value to <transferValueTo> and then processes the route\"},\"tridentCLSwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via ITridentCLPool#swap.\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/RouteProcessor2.sol\":\"RouteProcessor2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[\":@openzeppelin/=src/@openzeppelin/\",\":contracts/InputStream.sol/=src/InputStream.sol/\",\":contracts/RouteProcessor2.sol/=src/RouteProcessor2.sol/\",\":forge-std/=lib/forge-std/src/\",\":interfaces/=src/interfaces/\"]},\"sources\":{\"src/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"src/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"src/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"src/@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"src/InputStream.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.10;\\n\\nlibrary InputStream {\\n  function createStream(bytes memory data) internal pure returns (uint256 stream) {\\n    assembly {\\n      stream := mload(0x40)\\n      mstore(0x40, add(stream, 64))\\n      mstore(stream, data)\\n      let length := mload(data)\\n      mstore(add(stream, 32), add(data, length))\\n    }\\n  }\\n\\n  function isNotEmpty(uint256 stream) internal pure returns (bool) {\\n    uint256 pos;\\n    uint256 finish;\\n    assembly {\\n      pos := mload(stream)\\n      finish := mload(add(stream, 32))\\n    }\\n    return pos < finish;\\n  }\\n\\n  function readUint8(uint256 stream) internal pure returns (uint8 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 1)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint16(uint256 stream) internal pure returns (uint16 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 2)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint32(uint256 stream) internal pure returns (uint32 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 4)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint(uint256 stream) internal pure returns (uint256 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 32)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readAddress(uint256 stream) internal pure returns (address res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 20)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readBytes(uint256 stream) internal pure returns (bytes memory res) {\\n    assembly {\\n      let pos := mload(stream)\\n      res := add(pos, 32)\\n      let length := mload(res)\\n      mstore(stream, add(res, length))\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xac36b2e0f406a6000bf69609b28628ab4371996f8abb00abdbce17fdea849629\",\"license\":\"UNLICENSED\"},\"src/RouteProcessor2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.10;\\n\\nimport '../interfaces/IUniswapV2Pair.sol';\\nimport '../interfaces/IUniswapV3Pool.sol';\\nimport '../interfaces/ITridentCLPool.sol';\\nimport '../interfaces/IBentoBoxMinimal.sol';\\nimport '../interfaces/IPool.sol';\\nimport '../interfaces/IWETH.sol';\\nimport './InputStream.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\naddress constant NATIVE_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\naddress constant IMPOSSIBLE_POOL_ADDRESS = 0x0000000000000000000000000000000000000001;\\n\\n/// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\nuint160 constant MIN_SQRT_RATIO = 4295128739;\\n/// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\nuint160 constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n/// @title A route processor for the Sushi Aggregator\\n/// @author Ilya Lyalin\\ncontract RouteProcessor2 {\\n  using SafeERC20 for IERC20;\\n  using InputStream for uint256;\\n\\n  IBentoBoxMinimal public immutable bentoBox;\\n  address private lastCalledPool;\\n\\n  uint private unlocked = 1;\\n  modifier lock() {\\n      require(unlocked == 1, 'RouteProcessor is locked');\\n      unlocked = 2;\\n      _;\\n      unlocked = 1;\\n  }\\n\\n  constructor(address _bentoBox) {\\n    bentoBox = IBentoBoxMinimal(_bentoBox);\\n    lastCalledPool = IMPOSSIBLE_POOL_ADDRESS;\\n  }\\n\\n  /// @notice For native unwrapping\\n  receive() external payable {}\\n\\n  /// @notice Processes the route generated off-chain. Has a lock\\n  /// @param tokenIn Address of the input token\\n  /// @param amountIn Amount of the input token\\n  /// @param tokenOut Address of the output token\\n  /// @param amountOutMin Minimum amount of the output token\\n  /// @return amountOut Actual amount of the output token\\n  function processRoute(\\n    address tokenIn,\\n    uint256 amountIn,\\n    address tokenOut,\\n    uint256 amountOutMin,\\n    address to,\\n    bytes memory route\\n  ) external payable lock returns (uint256 amountOut) {\\n    return processRouteInternal(tokenIn, amountIn, tokenOut, amountOutMin, to, route);\\n  }\\n\\n  /// @notice Transfers some value to <transferValueTo> and then processes the route\\n  /// @param transferValueTo Address where the value should be transferred\\n  /// @param amountValueTransfer How much value to transfer\\n  /// @param tokenIn Address of the input token\\n  /// @param amountIn Amount of the input token\\n  /// @param tokenOut Address of the output token\\n  /// @param amountOutMin Minimum amount of the output token\\n  /// @return amountOut Actual amount of the output token\\n  function transferValueAndprocessRoute(\\n    address payable transferValueTo,\\n    uint256 amountValueTransfer,\\n    address tokenIn,\\n    uint256 amountIn,\\n    address tokenOut,\\n    uint256 amountOutMin,\\n    address to,\\n    bytes memory route\\n  ) external payable lock returns (uint256 amountOut) {\\n    (bool success, bytes memory returnBytes) = transferValueTo.call{value: amountValueTransfer}('');\\n    require(success, string(abi.encodePacked(returnBytes)));\\n    return processRouteInternal(tokenIn, amountIn, tokenOut, amountOutMin, to, route);\\n  }\\n\\n  /// @notice Processes the route generated off-chain\\n  /// @param tokenIn Address of the input token\\n  /// @param amountIn Amount of the input token\\n  /// @param tokenOut Address of the output token\\n  /// @param amountOutMin Minimum amount of the output token\\n  /// @return amountOut Actual amount of the output token\\n  function processRouteInternal(\\n    address tokenIn,\\n    uint256 amountIn,\\n    address tokenOut,\\n    uint256 amountOutMin,\\n    address to,\\n    bytes memory route\\n  ) private returns (uint256 amountOut) {\\n    uint256 balanceInInitial = tokenIn == NATIVE_ADDRESS ? address(this).balance : IERC20(tokenIn).balanceOf(msg.sender);\\n    uint256 balanceOutInitial = tokenOut == NATIVE_ADDRESS ? address(to).balance : IERC20(tokenOut).balanceOf(to);\\n\\n    uint256 stream = InputStream.createStream(route);\\n    while (stream.isNotEmpty()) {\\n      uint8 commandCode = stream.readUint8();\\n      if (commandCode == 1) processMyERC20(stream);\\n      else if (commandCode == 2) processUserERC20(stream, amountIn);\\n      else if (commandCode == 3) processNative(stream);\\n      else if (commandCode == 4) processOnePool(stream);\\n      else if (commandCode == 5) processInsideBento(stream);\\n      else revert('RouteProcessor: Unknown command code');\\n    }\\n\\n    uint256 balanceInFinal = tokenIn == NATIVE_ADDRESS ? address(this).balance : IERC20(tokenIn).balanceOf(msg.sender);\\n    require(balanceInFinal + amountIn >= balanceInInitial, 'RouteProcessor: Minimal imput balance violation');\\n\\n    uint256 balanceOutFinal = tokenOut == NATIVE_ADDRESS ? address(to).balance : IERC20(tokenOut).balanceOf(to);\\n    require(balanceOutFinal >= balanceOutInitial + amountOutMin, 'RouteProcessor: Minimal ouput balance violation');\\n\\n    amountOut = balanceOutFinal - balanceOutInitial;\\n  }\\n\\n  /// @notice Processes native coin: call swap for all pools that swap from native coin\\n  /// @param stream Streamed process program\\n  function processNative(uint256 stream) private {\\n    uint256 amountTotal = address(this).balance;\\n    distributeAndSwap(stream, address(this), NATIVE_ADDRESS, amountTotal);\\n  }\\n\\n  /// @notice Processes ERC20 token from this contract balance:\\n  /// @notice Call swap for all pools that swap from this token\\n  /// @param stream Streamed process program\\n  function processMyERC20(uint256 stream) private {\\n    address token = stream.readAddress();\\n    uint256 amountTotal = IERC20(token).balanceOf(address(this));\\n    unchecked {\\n      if (amountTotal > 0) amountTotal -= 1;     // slot undrain protection\\n    }\\n    distributeAndSwap(stream, address(this), token, amountTotal);\\n  }\\n  \\n  /// @notice Processes ERC20 token from msg.sender balance:\\n  /// @notice Call swap for all pools that swap from this token\\n  /// @param stream Streamed process program\\n  /// @param amountTotal Amount of tokens to take from msg.sender\\n  function processUserERC20(uint256 stream, uint256 amountTotal) private {\\n    address token = stream.readAddress();\\n    distributeAndSwap(stream, msg.sender, token, amountTotal);\\n  }\\n\\n  /// @notice Distributes amountTotal to several pools according to their shares and calls swap for each pool\\n  /// @param stream Streamed process program\\n  /// @param from Where to take liquidity for swap\\n  /// @param tokenIn Input token\\n  /// @param amountTotal Total amount of tokenIn for swaps \\n  function distributeAndSwap(uint256 stream, address from, address tokenIn, uint256 amountTotal) private {\\n    uint8 num = stream.readUint8();\\n    unchecked {\\n      for (uint256 i = 0; i < num; ++i) {\\n        uint16 share = stream.readUint16();\\n        uint256 amount = (amountTotal * share) / 65535;\\n        amountTotal -= amount;\\n        swap(stream, from, tokenIn, amount);\\n      }\\n    }\\n  }\\n\\n  /// @notice Processes ERC20 token for cases when the token has only one output pool\\n  /// @notice In this case liquidity is already at pool balance. This is an optimization\\n  /// @notice Call swap for all pools that swap from this token\\n  /// @param stream Streamed process program\\n  function processOnePool(uint256 stream) private {\\n    address token = stream.readAddress();\\n    swap(stream, address(this), token, 0);\\n  }\\n\\n  /// @notice Processes Bento tokens \\n  /// @notice Call swap for all pools that swap from this token\\n  /// @param stream Streamed process program\\n  function processInsideBento(uint256 stream) private {\\n    address token = stream.readAddress();\\n    uint8 num = stream.readUint8();\\n\\n    uint256 amountTotal = bentoBox.balanceOf(token, address(this));\\n    unchecked {\\n      if (amountTotal > 0) amountTotal -= 1;     // slot undrain protection\\n      for (uint256 i = 0; i < num; ++i) {\\n        uint16 share = stream.readUint16();\\n        uint256 amount = (amountTotal * share) / 65535;\\n        amountTotal -= amount;\\n        swap(stream, address(this), token, amount);\\n      }\\n    }\\n  }\\n\\n  /// @notice Makes swap\\n  /// @param stream Streamed process program\\n  /// @param from Where to take liquidity for swap\\n  /// @param tokenIn Input token\\n  /// @param amountIn Amount of tokenIn to take for swap\\n  function swap(uint256 stream, address from, address tokenIn, uint256 amountIn) private {\\n    uint8 poolType = stream.readUint8();\\n    if (poolType == 0) swapUniV2(stream, from, tokenIn, amountIn);\\n    else if (poolType == 1) swapUniV3(stream, from, tokenIn, amountIn);\\n    else if (poolType == 2) wrapNative(stream, from, tokenIn, amountIn);\\n    else if (poolType == 3) bentoBridge(stream, from, tokenIn, amountIn);\\n    else if (poolType == 4) swapTrident(stream, from, tokenIn, amountIn);\\n    else if (poolType == 5) swapTridentCL(stream, from, tokenIn, amountIn);\\n    else revert('RouteProcessor: Unknown pool type');\\n  }\\n\\n  /// @notice Wraps/unwraps native token\\n  /// @param stream [direction & fake, recipient, wrapToken?]\\n  /// @param from Where to take liquidity for swap\\n  /// @param tokenIn Input token\\n  /// @param amountIn Amount of tokenIn to take for swap\\n  function wrapNative(uint256 stream, address from, address tokenIn, uint256 amountIn) private {\\n    uint8 directionAndFake = stream.readUint8();\\n    address to = stream.readAddress();\\n\\n    if (directionAndFake & 1 == 1) {  // wrap native\\n      address wrapToken = stream.readAddress();\\n      if (directionAndFake & 2 == 0) IWETH(wrapToken).deposit{value: amountIn}();\\n      if (to != address(this)) IERC20(wrapToken).safeTransfer(to, amountIn);\\n    } else { // unwrap native\\n      if (directionAndFake & 2 == 0) {\\n        if (from != address(this)) IERC20(tokenIn).safeTransferFrom(from, address(this), amountIn);\\n        IWETH(tokenIn).withdraw(amountIn);\\n      }\\n      payable(to).transfer(address(this).balance);\\n    }\\n  }\\n\\n  /// @notice Bridge/unbridge tokens to/from Bento\\n  /// @param stream [direction, recipient]\\n  /// @param from Where to take liquidity for swap\\n  /// @param tokenIn Input token\\n  /// @param amountIn Amount of tokenIn to take for swap\\n  function bentoBridge(uint256 stream, address from, address tokenIn, uint256 amountIn) private {\\n    uint8 direction = stream.readUint8();\\n    address to = stream.readAddress();\\n\\n    if (direction > 0) {  // outside to Bento\\n      // deposit to arbitrary recipient is possible only from address(bentoBox)\\n      if (amountIn != 0) {\\n        if (from == address(this)) IERC20(tokenIn).safeTransfer(address(bentoBox), amountIn);\\n        else IERC20(tokenIn).safeTransferFrom(from, address(bentoBox), amountIn);\\n      } else {\\n        // tokens already are at address(bentoBox)\\n        amountIn = IERC20(tokenIn).balanceOf(address(bentoBox)) +\\n        bentoBox.strategyData(tokenIn).balance -\\n        bentoBox.totals(tokenIn).elastic;\\n      }\\n      bentoBox.deposit(tokenIn, address(bentoBox), to, amountIn, 0);\\n    } else { // Bento to outside\\n      if (amountIn > 0) {\\n        bentoBox.transfer(tokenIn, from, address(this), amountIn);\\n      } else amountIn = bentoBox.balanceOf(tokenIn, address(this));\\n      bentoBox.withdraw(tokenIn, address(this), to, 0, amountIn);\\n    }\\n  }\\n\\n  /// @notice UniswapV2 pool swap\\n  /// @param stream [pool, direction, recipient]\\n  /// @param from Where to take liquidity for swap\\n  /// @param tokenIn Input token\\n  /// @param amountIn Amount of tokenIn to take for swap\\n  function swapUniV2(uint256 stream, address from, address tokenIn, uint256 amountIn) private {\\n    address pool = stream.readAddress();\\n    uint8 direction = stream.readUint8();\\n    address to = stream.readAddress();\\n\\n    (uint256 r0, uint256 r1, ) = IUniswapV2Pair(pool).getReserves();\\n    require(r0 > 0 && r1 > 0, 'Wrong pool reserves');\\n    (uint256 reserveIn, uint256 reserveOut) = direction == 1 ? (r0, r1) : (r1, r0);\\n\\n    if (amountIn != 0) {\\n      if (from == address(this)) IERC20(tokenIn).safeTransfer(pool, amountIn);\\n      else IERC20(tokenIn).safeTransferFrom(from, pool, amountIn);\\n    } else amountIn = IERC20(tokenIn).balanceOf(pool) - reserveIn;  // tokens already were transferred\\n\\n    uint256 amountInWithFee = amountIn * 997;\\n    uint256 amountOut = (amountInWithFee * reserveOut) / (reserveIn * 1000 + amountInWithFee);\\n    (uint256 amount0Out, uint256 amount1Out) = direction == 1 ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n    IUniswapV2Pair(pool).swap(amount0Out, amount1Out, to, new bytes(0));\\n  }\\n\\n  /// @notice Trident pool swap\\n  /// @param stream [pool, swapData]\\n  /// @param from Where to take liquidity for swap\\n  /// @param tokenIn Input token\\n  /// @param amountIn Amount of tokenIn to take for swap\\n  function swapTrident(uint256 stream, address from, address tokenIn, uint256 amountIn) private {\\n    address pool = stream.readAddress();\\n    bytes memory swapData = stream.readBytes();\\n\\n    if (amountIn != 0) {\\n      bentoBox.transfer(tokenIn, from, pool, amountIn);\\n    }\\n    \\n    IPool(pool).swap(swapData);\\n  }\\n\\n  /// @notice UniswapV3 pool swap\\n  /// @param stream [pool, direction, recipient]\\n  /// @param from Where to take liquidity for swap\\n  /// @param tokenIn Input token\\n  /// @param amountIn Amount of tokenIn to take for swap\\n  function swapUniV3(uint256 stream, address from, address tokenIn, uint256 amountIn) private {\\n    address pool = stream.readAddress();\\n    bool zeroForOne = stream.readUint8() > 0;\\n    address recipient = stream.readAddress();\\n\\n    lastCalledPool = pool;\\n    IUniswapV3Pool(pool).swap(\\n      recipient,\\n      zeroForOne,\\n      int256(amountIn),\\n      zeroForOne ? MIN_SQRT_RATIO + 1 : MAX_SQRT_RATIO - 1,\\n      abi.encode(tokenIn, from)\\n    );\\n    require(lastCalledPool == IMPOSSIBLE_POOL_ADDRESS, 'RouteProcessor.swapUniV3: unexpected'); // Just to be sure\\n  }\\n\\n  /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n  /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n  /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n  /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n  /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n  /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n  /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n  /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n  /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n  function uniswapV3SwapCallback(\\n    int256 amount0Delta,\\n    int256 amount1Delta,\\n    bytes calldata data\\n  ) external {\\n    require(msg.sender == lastCalledPool, 'RouteProcessor.uniswapV3SwapCallback: call from unknown source');\\n    lastCalledPool = IMPOSSIBLE_POOL_ADDRESS;\\n    (address tokenIn, address from) = abi.decode(data, (address, address));\\n    int256 amount = amount0Delta > 0 ? amount0Delta : amount1Delta;\\n    require(amount > 0, 'RouteProcessor.uniswapV3SwapCallback: not positive amount');\\n\\n    if (from == address(this)) IERC20(tokenIn).safeTransfer(msg.sender, uint256(amount));\\n     else IERC20(tokenIn).safeTransferFrom(from, msg.sender, uint256(amount));\\n  }\\n\\n  /// @notice TridentCL pool swap\\n  /// @param stream [pool, direction, recipient]\\n  /// @param from Where to take liquidity for swap\\n  /// @param tokenIn Input token\\n  /// @param amountIn Amount of tokenIn to take for swap\\n  function swapTridentCL(uint256 stream, address from, address tokenIn, uint256 amountIn) private {\\n    address pool = stream.readAddress();\\n    bool zeroForOne = stream.readUint8() > 0;\\n    address recipient = stream.readAddress();\\n\\n    lastCalledPool = pool;\\n    ITridentCLPool(pool).swap(\\n      recipient,\\n      zeroForOne,\\n      int256(amountIn),\\n      zeroForOne ? MIN_SQRT_RATIO + 1 : MAX_SQRT_RATIO - 1,\\n      false,\\n      abi.encode(tokenIn, from)\\n    );\\n    require(lastCalledPool == IMPOSSIBLE_POOL_ADDRESS, 'RouteProcessor.swapTridentCL: unexpected'); // Just to be sure\\n  }\\n\\n  /// @notice Called to `msg.sender` after executing a swap via ITridentCLPool#swap.\\n  /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n  /// The caller of this method must be checked to be a TridentCLPool deployed by the canonical TridentCLFactory.\\n  /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n  /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n  /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n  /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n  /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n  /// @param data Any data passed through by the caller via the ITridentCLPoolActions#swap call\\n  function tridentCLSwapCallback(\\n    int256 amount0Delta,\\n    int256 amount1Delta,\\n    bytes calldata data\\n  ) external {\\n    require(msg.sender == lastCalledPool, 'RouteProcessor.TridentCLSwapCallback: call from unknown source');\\n    lastCalledPool = IMPOSSIBLE_POOL_ADDRESS;\\n    (address tokenIn, address from) = abi.decode(data, (address, address));\\n    int256 amount = amount0Delta > 0 ? amount0Delta : amount1Delta;\\n    require(amount > 0, 'RouteProcessor.TridentCLSwapCallback: not positive amount');\\n\\n    if (from == address(this)) IERC20(tokenIn).safeTransfer(msg.sender, uint256(amount));\\n     else IERC20(tokenIn).safeTransferFrom(from, msg.sender, uint256(amount));\\n  }\\n}\\n\",\"keccak256\":\"0x7c802ca31e22aea4458b23d01c20bdbd1949e70ef72b4f427550cfd6a1b2ffa8\",\"license\":\"UNLICENSED\"},\"src/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.8.0;\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\nstruct StrategyData {\\n    uint64 strategyStartDate;\\n    uint64 targetPercentage;\\n    uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n}\\n\\n/// @notice A rebasing library\\nlibrary RebaseLibrary {\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(Rebase memory total, uint256 elastic) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = (elastic * total.base) / total.elastic;\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(Rebase memory total, uint256 base) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = (base * total.elastic) / total.base;\\n        }\\n    }\\n}\\n\\n/// @notice Minimal BentoBox vault interface.\\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    /// @dev Reads the Rebase `totals`from storage for a given token\\n    function totals(address token) external view returns (Rebase memory total);\\n\\n    function strategyData(address token) external view returns (StrategyData memory total);\\n\\n    /// @dev Approves users' BentoBox assets to a \\\"master\\\" contract.\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function harvest(\\n        address token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0c12eba7a5b9d22d37ab8883fe22d6a312a90682809dbd11c43f8e6ceaff73bf\",\"license\":\"UNLICENSED\"},\"src/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data) external returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data) external returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data) external view returns (uint256 finalAmountOut);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\\n    function getAmountIn(bytes calldata data) external view returns (uint256 finalAmountIn);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(address indexed recipient, address indexed tokenIn, address indexed tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\\n\",\"keccak256\":\"0xa6f92ccb525b018c0c209819640e8d746f1134b4c4d9acd4f22d3e170323f1fa\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/ITridentCLPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.10;\\n\\ninterface ITridentCLPool {\\n  function token0() external returns (address);\\n  function token1() external returns (address);\\n\\n  function swap(\\n    address recipient,\\n    bool zeroForOne,\\n    int256 amountSpecified,\\n    uint160 sqrtPriceLimitX96,\\n    bool unwrapBento,\\n    bytes calldata data\\n  ) external returns (int256 amount0, int256 amount1);\\n}\\n\",\"keccak256\":\"0x572376b80c86a94692b0e27e6e63790b763295e32ba1f956c1d331fc1296de8d\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"src/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.10;\\n\\ninterface IUniswapV3Pool {\\n  function token0() external returns (address);\\n  function token1() external returns (address);\\n\\n  function swap(\\n    address recipient,\\n    bool zeroForOne,\\n    int256 amountSpecified,\\n    uint160 sqrtPriceLimitX96,\\n    bytes calldata data\\n  ) external returns (int256 amount0, int256 amount1);\\n}\\n\",\"keccak256\":\"0x2a4d7c6120e613f0e95d4dc8c650efb9b59e3c25c64e3e5c0a379281500f0a79\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.10;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xae8529ae159f784b90fdcd0629bd03bf7b68accc81edccac53357ad08406a378\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","metadata":{"compiler":{"version":"0.8.10+commit.fc410830"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_bentoBox","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"stateMutability":"view","type":"function","name":"bentoBox","outputs":[{"internalType":"contract IBentoBoxMinimal","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"route","type":"bytes"}],"stateMutability":"payable","type":"function","name":"processRoute","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}]},{"inputs":[{"internalType":"address payable","name":"transferValueTo","type":"address"},{"internalType":"uint256","name":"amountValueTransfer","type":"uint256"},{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"route","type":"bytes"}],"stateMutability":"payable","type":"function","name":"transferValueAndprocessRoute","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}]},{"inputs":[{"internalType":"int256","name":"amount0Delta","type":"int256"},{"internalType":"int256","name":"amount1Delta","type":"int256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"tridentCLSwapCallback"},{"inputs":[{"internalType":"int256","name":"amount0Delta","type":"int256"},{"internalType":"int256","name":"amount1Delta","type":"int256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"uniswapV3SwapCallback"},{"inputs":[],"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"processRoute(address,uint256,address,uint256,address,bytes)":{"params":{"amountIn":"Amount of the input token","amountOutMin":"Minimum amount of the output token","tokenIn":"Address of the input token","tokenOut":"Address of the output token"},"returns":{"amountOut":"Actual amount of the output token"}},"transferValueAndprocessRoute(address,uint256,address,uint256,address,uint256,address,bytes)":{"params":{"amountIn":"Amount of the input token","amountOutMin":"Minimum amount of the output token","amountValueTransfer":"How much value to transfer","tokenIn":"Address of the input token","tokenOut":"Address of the output token","transferValueTo":"Address where the value should be transferred"},"returns":{"amountOut":"Actual amount of the output token"}},"tridentCLSwapCallback(int256,int256,bytes)":{"details":"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a TridentCLPool deployed by the canonical TridentCLFactory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.","params":{"amount0Delta":"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.","amount1Delta":"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.","data":"Any data passed through by the caller via the ITridentCLPoolActions#swap call"}},"uniswapV3SwapCallback(int256,int256,bytes)":{"details":"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.","params":{"amount0Delta":"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.","amount1Delta":"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.","data":"Any data passed through by the caller via the IUniswapV3PoolActions#swap call"}}},"version":1},"userdoc":{"kind":"user","methods":{"processRoute(address,uint256,address,uint256,address,bytes)":{"notice":"Processes the route generated off-chain. Has a lock"},"transferValueAndprocessRoute(address,uint256,address,uint256,address,uint256,address,bytes)":{"notice":"Transfers some value to <transferValueTo> and then processes the route"},"tridentCLSwapCallback(int256,int256,bytes)":{"notice":"Called to `msg.sender` after executing a swap via ITridentCLPool#swap."},"uniswapV3SwapCallback(int256,int256,bytes)":{"notice":"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."}},"version":1}},"settings":{"remappings":["@openzeppelin/=src/@openzeppelin/","contracts/InputStream.sol/=src/InputStream.sol/","contracts/RouteProcessor2.sol/=src/RouteProcessor2.sol/","forge-std/=lib/forge-std/src/","interfaces/=src/interfaces/"],"optimizer":{"enabled":true,"runs":10000000},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"src/RouteProcessor2.sol":"RouteProcessor2"},"evmVersion":"london","libraries":{}},"sources":{"src/@openzeppelin/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n","license":"MIT"},"src/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"keccak256":"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n","license":"MIT"},"src/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"keccak256":"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n","license":"MIT"},"src/@openzeppelin/contracts/utils/Address.sol":{"keccak256":"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n","license":"MIT"},"src/InputStream.sol":{"keccak256":"0xac36b2e0f406a6000bf69609b28628ab4371996f8abb00abdbce17fdea849629","urls":[],"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.8.10;\n\nlibrary InputStream {\n  function createStream(bytes memory data) internal pure returns (uint256 stream) {\n    assembly {\n      stream := mload(0x40)\n      mstore(0x40, add(stream, 64))\n      mstore(stream, data)\n      let length := mload(data)\n      mstore(add(stream, 32), add(data, length))\n    }\n  }\n\n  function isNotEmpty(uint256 stream) internal pure returns (bool) {\n    uint256 pos;\n    uint256 finish;\n    assembly {\n      pos := mload(stream)\n      finish := mload(add(stream, 32))\n    }\n    return pos < finish;\n  }\n\n  function readUint8(uint256 stream) internal pure returns (uint8 res) {\n    assembly {\n      let pos := mload(stream)\n      pos := add(pos, 1)\n      res := mload(pos)\n      mstore(stream, pos)\n    }\n  }\n\n  function readUint16(uint256 stream) internal pure returns (uint16 res) {\n    assembly {\n      let pos := mload(stream)\n      pos := add(pos, 2)\n      res := mload(pos)\n      mstore(stream, pos)\n    }\n  }\n\n  function readUint32(uint256 stream) internal pure returns (uint32 res) {\n    assembly {\n      let pos := mload(stream)\n      pos := add(pos, 4)\n      res := mload(pos)\n      mstore(stream, pos)\n    }\n  }\n\n  function readUint(uint256 stream) internal pure returns (uint256 res) {\n    assembly {\n      let pos := mload(stream)\n      pos := add(pos, 32)\n      res := mload(pos)\n      mstore(stream, pos)\n    }\n  }\n\n  function readAddress(uint256 stream) internal pure returns (address res) {\n    assembly {\n      let pos := mload(stream)\n      pos := add(pos, 20)\n      res := mload(pos)\n      mstore(stream, pos)\n    }\n  }\n\n  function readBytes(uint256 stream) internal pure returns (bytes memory res) {\n    assembly {\n      let pos := mload(stream)\n      res := add(pos, 32)\n      let length := mload(res)\n      mstore(stream, add(res, length))\n    }\n  }\n}\n","license":"UNLICENSED"},"src/RouteProcessor2.sol":{"keccak256":"0x7c802ca31e22aea4458b23d01c20bdbd1949e70ef72b4f427550cfd6a1b2ffa8","urls":[],"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.8.10;\n\nimport '../interfaces/IUniswapV2Pair.sol';\nimport '../interfaces/IUniswapV3Pool.sol';\nimport '../interfaces/ITridentCLPool.sol';\nimport '../interfaces/IBentoBoxMinimal.sol';\nimport '../interfaces/IPool.sol';\nimport '../interfaces/IWETH.sol';\nimport './InputStream.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\naddress constant NATIVE_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\naddress constant IMPOSSIBLE_POOL_ADDRESS = 0x0000000000000000000000000000000000000001;\n\n/// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\nuint160 constant MIN_SQRT_RATIO = 4295128739;\n/// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\nuint160 constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n/// @title A route processor for the Sushi Aggregator\n/// @author Ilya Lyalin\ncontract RouteProcessor2 {\n  using SafeERC20 for IERC20;\n  using InputStream for uint256;\n\n  IBentoBoxMinimal public immutable bentoBox;\n  address private lastCalledPool;\n\n  uint private unlocked = 1;\n  modifier lock() {\n      require(unlocked == 1, 'RouteProcessor is locked');\n      unlocked = 2;\n      _;\n      unlocked = 1;\n  }\n\n  constructor(address _bentoBox) {\n    bentoBox = IBentoBoxMinimal(_bentoBox);\n    lastCalledPool = IMPOSSIBLE_POOL_ADDRESS;\n  }\n\n  /// @notice For native unwrapping\n  receive() external payable {}\n\n  /// @notice Processes the route generated off-chain. Has a lock\n  /// @param tokenIn Address of the input token\n  /// @param amountIn Amount of the input token\n  /// @param tokenOut Address of the output token\n  /// @param amountOutMin Minimum amount of the output token\n  /// @return amountOut Actual amount of the output token\n  function processRoute(\n    address tokenIn,\n    uint256 amountIn,\n    address tokenOut,\n    uint256 amountOutMin,\n    address to,\n    bytes memory route\n  ) external payable lock returns (uint256 amountOut) {\n    return processRouteInternal(tokenIn, amountIn, tokenOut, amountOutMin, to, route);\n  }\n\n  /// @notice Transfers some value to <transferValueTo> and then processes the route\n  /// @param transferValueTo Address where the value should be transferred\n  /// @param amountValueTransfer How much value to transfer\n  /// @param tokenIn Address of the input token\n  /// @param amountIn Amount of the input token\n  /// @param tokenOut Address of the output token\n  /// @param amountOutMin Minimum amount of the output token\n  /// @return amountOut Actual amount of the output token\n  function transferValueAndprocessRoute(\n    address payable transferValueTo,\n    uint256 amountValueTransfer,\n    address tokenIn,\n    uint256 amountIn,\n    address tokenOut,\n    uint256 amountOutMin,\n    address to,\n    bytes memory route\n  ) external payable lock returns (uint256 amountOut) {\n    (bool success, bytes memory returnBytes) = transferValueTo.call{value: amountValueTransfer}('');\n    require(success, string(abi.encodePacked(returnBytes)));\n    return processRouteInternal(tokenIn, amountIn, tokenOut, amountOutMin, to, route);\n  }\n\n  /// @notice Processes the route generated off-chain\n  /// @param tokenIn Address of the input token\n  /// @param amountIn Amount of the input token\n  /// @param tokenOut Address of the output token\n  /// @param amountOutMin Minimum amount of the output token\n  /// @return amountOut Actual amount of the output token\n  function processRouteInternal(\n    address tokenIn,\n    uint256 amountIn,\n    address tokenOut,\n    uint256 amountOutMin,\n    address to,\n    bytes memory route\n  ) private returns (uint256 amountOut) {\n    uint256 balanceInInitial = tokenIn == NATIVE_ADDRESS ? address(this).balance : IERC20(tokenIn).balanceOf(msg.sender);\n    uint256 balanceOutInitial = tokenOut == NATIVE_ADDRESS ? address(to).balance : IERC20(tokenOut).balanceOf(to);\n\n    uint256 stream = InputStream.createStream(route);\n    while (stream.isNotEmpty()) {\n      uint8 commandCode = stream.readUint8();\n      if (commandCode == 1) processMyERC20(stream);\n      else if (commandCode == 2) processUserERC20(stream, amountIn);\n      else if (commandCode == 3) processNative(stream);\n      else if (commandCode == 4) processOnePool(stream);\n      else if (commandCode == 5) processInsideBento(stream);\n      else revert('RouteProcessor: Unknown command code');\n    }\n\n    uint256 balanceInFinal = tokenIn == NATIVE_ADDRESS ? address(this).balance : IERC20(tokenIn).balanceOf(msg.sender);\n    require(balanceInFinal + amountIn >= balanceInInitial, 'RouteProcessor: Minimal imput balance violation');\n\n    uint256 balanceOutFinal = tokenOut == NATIVE_ADDRESS ? address(to).balance : IERC20(tokenOut).balanceOf(to);\n    require(balanceOutFinal >= balanceOutInitial + amountOutMin, 'RouteProcessor: Minimal ouput balance violation');\n\n    amountOut = balanceOutFinal - balanceOutInitial;\n  }\n\n  /// @notice Processes native coin: call swap for all pools that swap from native coin\n  /// @param stream Streamed process program\n  function processNative(uint256 stream) private {\n    uint256 amountTotal = address(this).balance;\n    distributeAndSwap(stream, address(this), NATIVE_ADDRESS, amountTotal);\n  }\n\n  /// @notice Processes ERC20 token from this contract balance:\n  /// @notice Call swap for all pools that swap from this token\n  /// @param stream Streamed process program\n  function processMyERC20(uint256 stream) private {\n    address token = stream.readAddress();\n    uint256 amountTotal = IERC20(token).balanceOf(address(this));\n    unchecked {\n      if (amountTotal > 0) amountTotal -= 1;     // slot undrain protection\n    }\n    distributeAndSwap(stream, address(this), token, amountTotal);\n  }\n  \n  /// @notice Processes ERC20 token from msg.sender balance:\n  /// @notice Call swap for all pools that swap from this token\n  /// @param stream Streamed process program\n  /// @param amountTotal Amount of tokens to take from msg.sender\n  function processUserERC20(uint256 stream, uint256 amountTotal) private {\n    address token = stream.readAddress();\n    distributeAndSwap(stream, msg.sender, token, amountTotal);\n  }\n\n  /// @notice Distributes amountTotal to several pools according to their shares and calls swap for each pool\n  /// @param stream Streamed process program\n  /// @param from Where to take liquidity for swap\n  /// @param tokenIn Input token\n  /// @param amountTotal Total amount of tokenIn for swaps \n  function distributeAndSwap(uint256 stream, address from, address tokenIn, uint256 amountTotal) private {\n    uint8 num = stream.readUint8();\n    unchecked {\n      for (uint256 i = 0; i < num; ++i) {\n        uint16 share = stream.readUint16();\n        uint256 amount = (amountTotal * share) / 65535;\n        amountTotal -= amount;\n        swap(stream, from, tokenIn, amount);\n      }\n    }\n  }\n\n  /// @notice Processes ERC20 token for cases when the token has only one output pool\n  /// @notice In this case liquidity is already at pool balance. This is an optimization\n  /// @notice Call swap for all pools that swap from this token\n  /// @param stream Streamed process program\n  function processOnePool(uint256 stream) private {\n    address token = stream.readAddress();\n    swap(stream, address(this), token, 0);\n  }\n\n  /// @notice Processes Bento tokens \n  /// @notice Call swap for all pools that swap from this token\n  /// @param stream Streamed process program\n  function processInsideBento(uint256 stream) private {\n    address token = stream.readAddress();\n    uint8 num = stream.readUint8();\n\n    uint256 amountTotal = bentoBox.balanceOf(token, address(this));\n    unchecked {\n      if (amountTotal > 0) amountTotal -= 1;     // slot undrain protection\n      for (uint256 i = 0; i < num; ++i) {\n        uint16 share = stream.readUint16();\n        uint256 amount = (amountTotal * share) / 65535;\n        amountTotal -= amount;\n        swap(stream, address(this), token, amount);\n      }\n    }\n  }\n\n  /// @notice Makes swap\n  /// @param stream Streamed process program\n  /// @param from Where to take liquidity for swap\n  /// @param tokenIn Input token\n  /// @param amountIn Amount of tokenIn to take for swap\n  function swap(uint256 stream, address from, address tokenIn, uint256 amountIn) private {\n    uint8 poolType = stream.readUint8();\n    if (poolType == 0) swapUniV2(stream, from, tokenIn, amountIn);\n    else if (poolType == 1) swapUniV3(stream, from, tokenIn, amountIn);\n    else if (poolType == 2) wrapNative(stream, from, tokenIn, amountIn);\n    else if (poolType == 3) bentoBridge(stream, from, tokenIn, amountIn);\n    else if (poolType == 4) swapTrident(stream, from, tokenIn, amountIn);\n    else if (poolType == 5) swapTridentCL(stream, from, tokenIn, amountIn);\n    else revert('RouteProcessor: Unknown pool type');\n  }\n\n  /// @notice Wraps/unwraps native token\n  /// @param stream [direction & fake, recipient, wrapToken?]\n  /// @param from Where to take liquidity for swap\n  /// @param tokenIn Input token\n  /// @param amountIn Amount of tokenIn to take for swap\n  function wrapNative(uint256 stream, address from, address tokenIn, uint256 amountIn) private {\n    uint8 directionAndFake = stream.readUint8();\n    address to = stream.readAddress();\n\n    if (directionAndFake & 1 == 1) {  // wrap native\n      address wrapToken = stream.readAddress();\n      if (directionAndFake & 2 == 0) IWETH(wrapToken).deposit{value: amountIn}();\n      if (to != address(this)) IERC20(wrapToken).safeTransfer(to, amountIn);\n    } else { // unwrap native\n      if (directionAndFake & 2 == 0) {\n        if (from != address(this)) IERC20(tokenIn).safeTransferFrom(from, address(this), amountIn);\n        IWETH(tokenIn).withdraw(amountIn);\n      }\n      payable(to).transfer(address(this).balance);\n    }\n  }\n\n  /// @notice Bridge/unbridge tokens to/from Bento\n  /// @param stream [direction, recipient]\n  /// @param from Where to take liquidity for swap\n  /// @param tokenIn Input token\n  /// @param amountIn Amount of tokenIn to take for swap\n  function bentoBridge(uint256 stream, address from, address tokenIn, uint256 amountIn) private {\n    uint8 direction = stream.readUint8();\n    address to = stream.readAddress();\n\n    if (direction > 0) {  // outside to Bento\n      // deposit to arbitrary recipient is possible only from address(bentoBox)\n      if (amountIn != 0) {\n        if (from == address(this)) IERC20(tokenIn).safeTransfer(address(bentoBox), amountIn);\n        else IERC20(tokenIn).safeTransferFrom(from, address(bentoBox), amountIn);\n      } else {\n        // tokens already are at address(bentoBox)\n        amountIn = IERC20(tokenIn).balanceOf(address(bentoBox)) +\n        bentoBox.strategyData(tokenIn).balance -\n        bentoBox.totals(tokenIn).elastic;\n      }\n      bentoBox.deposit(tokenIn, address(bentoBox), to, amountIn, 0);\n    } else { // Bento to outside\n      if (amountIn > 0) {\n        bentoBox.transfer(tokenIn, from, address(this), amountIn);\n      } else amountIn = bentoBox.balanceOf(tokenIn, address(this));\n      bentoBox.withdraw(tokenIn, address(this), to, 0, amountIn);\n    }\n  }\n\n  /// @notice UniswapV2 pool swap\n  /// @param stream [pool, direction, recipient]\n  /// @param from Where to take liquidity for swap\n  /// @param tokenIn Input token\n  /// @param amountIn Amount of tokenIn to take for swap\n  function swapUniV2(uint256 stream, address from, address tokenIn, uint256 amountIn) private {\n    address pool = stream.readAddress();\n    uint8 direction = stream.readUint8();\n    address to = stream.readAddress();\n\n    (uint256 r0, uint256 r1, ) = IUniswapV2Pair(pool).getReserves();\n    require(r0 > 0 && r1 > 0, 'Wrong pool reserves');\n    (uint256 reserveIn, uint256 reserveOut) = direction == 1 ? (r0, r1) : (r1, r0);\n\n    if (amountIn != 0) {\n      if (from == address(this)) IERC20(tokenIn).safeTransfer(pool, amountIn);\n      else IERC20(tokenIn).safeTransferFrom(from, pool, amountIn);\n    } else amountIn = IERC20(tokenIn).balanceOf(pool) - reserveIn;  // tokens already were transferred\n\n    uint256 amountInWithFee = amountIn * 997;\n    uint256 amountOut = (amountInWithFee * reserveOut) / (reserveIn * 1000 + amountInWithFee);\n    (uint256 amount0Out, uint256 amount1Out) = direction == 1 ? (uint256(0), amountOut) : (amountOut, uint256(0));\n    IUniswapV2Pair(pool).swap(amount0Out, amount1Out, to, new bytes(0));\n  }\n\n  /// @notice Trident pool swap\n  /// @param stream [pool, swapData]\n  /// @param from Where to take liquidity for swap\n  /// @param tokenIn Input token\n  /// @param amountIn Amount of tokenIn to take for swap\n  function swapTrident(uint256 stream, address from, address tokenIn, uint256 amountIn) private {\n    address pool = stream.readAddress();\n    bytes memory swapData = stream.readBytes();\n\n    if (amountIn != 0) {\n      bentoBox.transfer(tokenIn, from, pool, amountIn);\n    }\n    \n    IPool(pool).swap(swapData);\n  }\n\n  /// @notice UniswapV3 pool swap\n  /// @param stream [pool, direction, recipient]\n  /// @param from Where to take liquidity for swap\n  /// @param tokenIn Input token\n  /// @param amountIn Amount of tokenIn to take for swap\n  function swapUniV3(uint256 stream, address from, address tokenIn, uint256 amountIn) private {\n    address pool = stream.readAddress();\n    bool zeroForOne = stream.readUint8() > 0;\n    address recipient = stream.readAddress();\n\n    lastCalledPool = pool;\n    IUniswapV3Pool(pool).swap(\n      recipient,\n      zeroForOne,\n      int256(amountIn),\n      zeroForOne ? MIN_SQRT_RATIO + 1 : MAX_SQRT_RATIO - 1,\n      abi.encode(tokenIn, from)\n    );\n    require(lastCalledPool == IMPOSSIBLE_POOL_ADDRESS, 'RouteProcessor.swapUniV3: unexpected'); // Just to be sure\n  }\n\n  /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n  /// @dev In the implementation you must pay the pool tokens owed for the swap.\n  /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n  /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n  /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n  /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n  /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n  /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n  /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n  function uniswapV3SwapCallback(\n    int256 amount0Delta,\n    int256 amount1Delta,\n    bytes calldata data\n  ) external {\n    require(msg.sender == lastCalledPool, 'RouteProcessor.uniswapV3SwapCallback: call from unknown source');\n    lastCalledPool = IMPOSSIBLE_POOL_ADDRESS;\n    (address tokenIn, address from) = abi.decode(data, (address, address));\n    int256 amount = amount0Delta > 0 ? amount0Delta : amount1Delta;\n    require(amount > 0, 'RouteProcessor.uniswapV3SwapCallback: not positive amount');\n\n    if (from == address(this)) IERC20(tokenIn).safeTransfer(msg.sender, uint256(amount));\n     else IERC20(tokenIn).safeTransferFrom(from, msg.sender, uint256(amount));\n  }\n\n  /// @notice TridentCL pool swap\n  /// @param stream [pool, direction, recipient]\n  /// @param from Where to take liquidity for swap\n  /// @param tokenIn Input token\n  /// @param amountIn Amount of tokenIn to take for swap\n  function swapTridentCL(uint256 stream, address from, address tokenIn, uint256 amountIn) private {\n    address pool = stream.readAddress();\n    bool zeroForOne = stream.readUint8() > 0;\n    address recipient = stream.readAddress();\n\n    lastCalledPool = pool;\n    ITridentCLPool(pool).swap(\n      recipient,\n      zeroForOne,\n      int256(amountIn),\n      zeroForOne ? MIN_SQRT_RATIO + 1 : MAX_SQRT_RATIO - 1,\n      false,\n      abi.encode(tokenIn, from)\n    );\n    require(lastCalledPool == IMPOSSIBLE_POOL_ADDRESS, 'RouteProcessor.swapTridentCL: unexpected'); // Just to be sure\n  }\n\n  /// @notice Called to `msg.sender` after executing a swap via ITridentCLPool#swap.\n  /// @dev In the implementation you must pay the pool tokens owed for the swap.\n  /// The caller of this method must be checked to be a TridentCLPool deployed by the canonical TridentCLFactory.\n  /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n  /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n  /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n  /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n  /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n  /// @param data Any data passed through by the caller via the ITridentCLPoolActions#swap call\n  function tridentCLSwapCallback(\n    int256 amount0Delta,\n    int256 amount1Delta,\n    bytes calldata data\n  ) external {\n    require(msg.sender == lastCalledPool, 'RouteProcessor.TridentCLSwapCallback: call from unknown source');\n    lastCalledPool = IMPOSSIBLE_POOL_ADDRESS;\n    (address tokenIn, address from) = abi.decode(data, (address, address));\n    int256 amount = amount0Delta > 0 ? amount0Delta : amount1Delta;\n    require(amount > 0, 'RouteProcessor.TridentCLSwapCallback: not positive amount');\n\n    if (from == address(this)) IERC20(tokenIn).safeTransfer(msg.sender, uint256(amount));\n     else IERC20(tokenIn).safeTransferFrom(from, msg.sender, uint256(amount));\n  }\n}\n","license":"UNLICENSED"},"src/interfaces/IBentoBoxMinimal.sol":{"keccak256":"0x0c12eba7a5b9d22d37ab8883fe22d6a312a90682809dbd11c43f8e6ceaff73bf","urls":[],"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.8.0;\n\nstruct Rebase {\n    uint128 elastic;\n    uint128 base;\n}\n\nstruct StrategyData {\n    uint64 strategyStartDate;\n    uint64 targetPercentage;\n    uint128 balance; // the balance of the strategy that BentoBox thinks is in there\n}\n\n/// @notice A rebasing library\nlibrary RebaseLibrary {\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\n    function toBase(Rebase memory total, uint256 elastic) internal pure returns (uint256 base) {\n        if (total.elastic == 0) {\n            base = elastic;\n        } else {\n            base = (elastic * total.base) / total.elastic;\n        }\n    }\n\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\n    function toElastic(Rebase memory total, uint256 base) internal pure returns (uint256 elastic) {\n        if (total.base == 0) {\n            elastic = base;\n        } else {\n            elastic = (base * total.elastic) / total.base;\n        }\n    }\n}\n\n/// @notice Minimal BentoBox vault interface.\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\ninterface IBentoBoxMinimal {\n    /// @notice Balance per ERC-20 token per account in shares.\n    function balanceOf(address, address) external view returns (uint256);\n\n    /// @dev Helper function to represent an `amount` of `token` in shares.\n    /// @param token The ERC-20 token.\n    /// @param amount The `token` amount.\n    /// @param roundUp If the result `share` should be rounded up.\n    /// @return share The token amount represented in shares.\n    function toShare(\n        address token,\n        uint256 amount,\n        bool roundUp\n    ) external view returns (uint256 share);\n\n    /// @dev Helper function to represent shares back into the `token` amount.\n    /// @param token The ERC-20 token.\n    /// @param share The amount of shares.\n    /// @param roundUp If the result should be rounded up.\n    /// @return amount The share amount back into native representation.\n    function toAmount(\n        address token,\n        uint256 share,\n        bool roundUp\n    ) external view returns (uint256 amount);\n\n    /// @notice Registers this contract so that users can approve it for BentoBox.\n    function registerProtocol() external;\n\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\n    /// @param token The ERC-20 token to deposit.\n    /// @param from which account to pull the tokens.\n    /// @param to which account to push the tokens.\n    /// @param amount Token amount in native representation to deposit.\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\n    /// @return amountOut The amount deposited.\n    /// @return shareOut The deposited amount represented in shares.\n    function deposit(\n        address token,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\n\n    /// @notice Withdraws an amount of `token` from a user account.\n    /// @param token_ The ERC-20 token to withdraw.\n    /// @param from which user to pull the tokens.\n    /// @param to which user to push the tokens.\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\n    /// @param share Like above, but `share` takes precedence over `amount`.\n    function withdraw(\n        address token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external returns (uint256 amountOut, uint256 shareOut);\n\n    /// @notice Transfer shares from a user account to another one.\n    /// @param token The ERC-20 token to transfer.\n    /// @param from which user to pull the tokens.\n    /// @param to which user to push the tokens.\n    /// @param share The amount of `token` in shares.\n    function transfer(\n        address token,\n        address from,\n        address to,\n        uint256 share\n    ) external;\n\n    /// @dev Reads the Rebase `totals`from storage for a given token\n    function totals(address token) external view returns (Rebase memory total);\n\n    function strategyData(address token) external view returns (StrategyData memory total);\n\n    /// @dev Approves users' BentoBox assets to a \"master\" contract.\n    function setMasterContractApproval(\n        address user,\n        address masterContract,\n        bool approved,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function harvest(\n        address token,\n        bool balance,\n        uint256 maxChangeAmount\n    ) external;\n}\n","license":"UNLICENSED"},"src/interfaces/IPool.sol":{"keccak256":"0xa6f92ccb525b018c0c209819640e8d746f1134b4c4d9acd4f22d3e170323f1fa","urls":[],"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.5.0;\npragma experimental ABIEncoderV2;\n\n/// @notice Trident pool interface.\ninterface IPool {\n    /// @notice Executes a swap from one token to another.\n    /// @dev The input tokens must've already been sent to the pool.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\n    function swap(bytes calldata data) external returns (uint256 finalAmountOut);\n\n    /// @notice Executes a swap from one token to another with a callback.\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\n    function flashSwap(bytes calldata data) external returns (uint256 finalAmountOut);\n\n    /// @notice Mints liquidity tokens.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\n    function mint(bytes calldata data) external returns (uint256 liquidity);\n\n    /// @notice Burns liquidity tokens.\n    /// @dev The input LP tokens must've already been sent to the pool.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\n    function burn(bytes calldata data) external returns (TokenAmount[] memory withdrawnAmounts);\n\n    /// @notice Burns liquidity tokens for a single output token.\n    /// @dev The input LP tokens must've already been sent to the pool.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return amountOut The amount of output tokens that were sent to the user.\n    function burnSingle(bytes calldata data) external returns (uint256 amountOut);\n\n    /// @return A unique identifier for the pool type.\n    function poolIdentifier() external pure returns (bytes32);\n\n    /// @return An array of tokens supported by the pool.\n    function getAssets() external view returns (address[] memory);\n\n    /// @notice Simulates a trade and returns the expected output.\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\n    function getAmountOut(bytes calldata data) external view returns (uint256 finalAmountOut);\n\n    /// @notice Simulates a trade and returns the expected output.\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\n    function getAmountIn(bytes calldata data) external view returns (uint256 finalAmountIn);\n\n    /// @dev This event must be emitted on all swaps.\n    event Swap(address indexed recipient, address indexed tokenIn, address indexed tokenOut, uint256 amountIn, uint256 amountOut);\n\n    /// @dev This struct frames output tokens for burns.\n    struct TokenAmount {\n        address token;\n        uint256 amount;\n    }\n}\n","license":"GPL-3.0-or-later"},"src/interfaces/ITridentCLPool.sol":{"keccak256":"0x572376b80c86a94692b0e27e6e63790b763295e32ba1f956c1d331fc1296de8d","urls":[],"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.10;\n\ninterface ITridentCLPool {\n  function token0() external returns (address);\n  function token1() external returns (address);\n\n  function swap(\n    address recipient,\n    bool zeroForOne,\n    int256 amountSpecified,\n    uint160 sqrtPriceLimitX96,\n    bool unwrapBento,\n    bytes calldata data\n  ) external returns (int256 amount0, int256 amount1);\n}\n","license":"GPL-3.0-or-later"},"src/interfaces/IUniswapV2Pair.sol":{"keccak256":"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385","urls":[],"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}","license":"GPL-3.0"},"src/interfaces/IUniswapV3Pool.sol":{"keccak256":"0x2a4d7c6120e613f0e95d4dc8c650efb9b59e3c25c64e3e5c0a379281500f0a79","urls":[],"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.10;\n\ninterface IUniswapV3Pool {\n  function token0() external returns (address);\n  function token1() external returns (address);\n\n  function swap(\n    address recipient,\n    bool zeroForOne,\n    int256 amountSpecified,\n    uint160 sqrtPriceLimitX96,\n    bytes calldata data\n  ) external returns (int256 amount0, int256 amount1);\n}\n","license":"GPL-3.0-or-later"},"src/interfaces/IWETH.sol":{"keccak256":"0xae8529ae159f784b90fdcd0629bd03bf7b68accc81edccac53357ad08406a378","urls":[],"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.10;\n\ninterface IWETH {\n  function deposit() external payable;\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function withdraw(uint256) external;\n}\n","license":"GPL-3.0-or-later"}},"version":1},"storageLayout":{"storage":[{"astId":846,"contract":"src/RouteProcessor2.sol:RouteProcessor2","label":"lastCalledPool","offset":0,"slot":"0","type":"t_address"},{"astId":849,"contract":"src/RouteProcessor2.sol:RouteProcessor2","label":"unlocked","offset":0,"slot":"1","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"id":5}