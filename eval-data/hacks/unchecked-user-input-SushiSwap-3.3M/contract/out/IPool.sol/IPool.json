{"abi":[{"type":"function","name":"burn","inputs":[{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"withdrawnAmounts","type":"tuple[]","internalType":"struct IPool.TokenAmount[]","components":[{"name":"token","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}]}],"stateMutability":"nonpayable"},{"type":"function","name":"burnSingle","inputs":[{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"amountOut","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"flashSwap","inputs":[{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"finalAmountOut","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"getAmountIn","inputs":[{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"finalAmountIn","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getAmountOut","inputs":[{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"finalAmountOut","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getAssets","inputs":[],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"mint","inputs":[{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"liquidity","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"poolIdentifier","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"pure"},{"type":"function","name":"swap","inputs":[{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"finalAmountOut","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"event","name":"Swap","inputs":[{"name":"recipient","type":"address","indexed":true,"internalType":"address"},{"name":"tokenIn","type":"address","indexed":true,"internalType":"address"},{"name":"tokenOut","type":"address","indexed":true,"internalType":"address"},{"name":"amountIn","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"amountOut","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"burn(bytes)":"2a07b6c7","burnSingle(bytes)":"af8c09bf","flashSwap(bytes)":"053da1c8","getAmountIn(bytes)":"499a3c50","getAmountOut(bytes)":"a8f1f52e","getAssets()":"67e4ac2c","mint(bytes)":"7ba0e2e7","poolIdentifier()":"a69840a8","swap(bytes)":"627dd56a"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPool.TokenAmount[]\",\"name\":\"withdrawnAmounts\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burnSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finalAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finalAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finalAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finalAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Swap(address,address,address,uint256,uint256)\":{\"details\":\"This event must be emitted on all swaps.\"}},\"kind\":\"dev\",\"methods\":{\"burn(bytes)\":{\"details\":\"The input LP tokens must've already been sent to the pool.\",\"params\":{\"data\":\"ABI-encoded params that the pool requires.\"},\"returns\":{\"withdrawnAmounts\":\"The amount of various output tokens that were sent to the user.\"}},\"burnSingle(bytes)\":{\"details\":\"The input LP tokens must've already been sent to the pool.\",\"params\":{\"data\":\"ABI-encoded params that the pool requires.\"},\"returns\":{\"amountOut\":\"The amount of output tokens that were sent to the user.\"}},\"flashSwap(bytes)\":{\"details\":\"This function allows borrowing the output tokens and sending the input tokens in the callback.\",\"params\":{\"data\":\"ABI-encoded params that the pool requires.\"},\"returns\":{\"finalAmountOut\":\"The amount of output tokens that were sent to the user.\"}},\"getAmountIn(bytes)\":{\"details\":\"The pool does not need to include a trade simulator directly in itself - it can use a library.\",\"params\":{\"data\":\"ABI-encoded params that the pool requires.\"},\"returns\":{\"finalAmountIn\":\"The amount of input tokens that are required from the user if the trade is executed.\"}},\"getAmountOut(bytes)\":{\"details\":\"The pool does not need to include a trade simulator directly in itself - it can use a library.\",\"params\":{\"data\":\"ABI-encoded params that the pool requires.\"},\"returns\":{\"finalAmountOut\":\"The amount of output tokens that will be sent to the user if the trade is executed.\"}},\"getAssets()\":{\"returns\":{\"_0\":\"An array of tokens supported by the pool.\"}},\"mint(bytes)\":{\"params\":{\"data\":\"ABI-encoded params that the pool requires.\"},\"returns\":{\"liquidity\":\"The amount of liquidity tokens that were minted for the user.\"}},\"poolIdentifier()\":{\"returns\":{\"_0\":\"A unique identifier for the pool type.\"}},\"swap(bytes)\":{\"details\":\"The input tokens must've already been sent to the pool.\",\"params\":{\"data\":\"ABI-encoded params that the pool requires.\"},\"returns\":{\"finalAmountOut\":\"The amount of output tokens that were sent to the user.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(bytes)\":{\"notice\":\"Burns liquidity tokens.\"},\"burnSingle(bytes)\":{\"notice\":\"Burns liquidity tokens for a single output token.\"},\"flashSwap(bytes)\":{\"notice\":\"Executes a swap from one token to another with a callback.\"},\"getAmountIn(bytes)\":{\"notice\":\"Simulates a trade and returns the expected output.\"},\"getAmountOut(bytes)\":{\"notice\":\"Simulates a trade and returns the expected output.\"},\"mint(bytes)\":{\"notice\":\"Mints liquidity tokens.\"},\"swap(bytes)\":{\"notice\":\"Executes a swap from one token to another.\"}},\"notice\":\"Trident pool interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IPool.sol\":\"IPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[\":@openzeppelin/=src/@openzeppelin/\",\":contracts/InputStream.sol/=src/InputStream.sol/\",\":contracts/RouteProcessor2.sol/=src/RouteProcessor2.sol/\",\":forge-std/=lib/forge-std/src/\",\":interfaces/=src/interfaces/\"]},\"sources\":{\"src/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data) external returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data) external returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data) external view returns (uint256 finalAmountOut);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\\n    function getAmountIn(bytes calldata data) external view returns (uint256 finalAmountIn);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(address indexed recipient, address indexed tokenIn, address indexed tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\\n\",\"keccak256\":\"0xa6f92ccb525b018c0c209819640e8d746f1134b4c4d9acd4f22d3e170323f1fa\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","metadata":{"compiler":{"version":"0.8.10+commit.fc410830"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"recipient","type":"address","indexed":true},{"internalType":"address","name":"tokenIn","type":"address","indexed":true},{"internalType":"address","name":"tokenOut","type":"address","indexed":true},{"internalType":"uint256","name":"amountIn","type":"uint256","indexed":false},{"internalType":"uint256","name":"amountOut","type":"uint256","indexed":false}],"type":"event","name":"Swap","anonymous":false},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"burn","outputs":[{"internalType":"struct IPool.TokenAmount[]","name":"withdrawnAmounts","type":"tuple[]","components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}]}]},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"burnSingle","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}]},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"flashSwap","outputs":[{"internalType":"uint256","name":"finalAmountOut","type":"uint256"}]},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"view","type":"function","name":"getAmountIn","outputs":[{"internalType":"uint256","name":"finalAmountIn","type":"uint256"}]},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"view","type":"function","name":"getAmountOut","outputs":[{"internalType":"uint256","name":"finalAmountOut","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getAssets","outputs":[{"internalType":"address[]","name":"","type":"address[]"}]},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"mint","outputs":[{"internalType":"uint256","name":"liquidity","type":"uint256"}]},{"inputs":[],"stateMutability":"pure","type":"function","name":"poolIdentifier","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"swap","outputs":[{"internalType":"uint256","name":"finalAmountOut","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"burn(bytes)":{"details":"The input LP tokens must've already been sent to the pool.","params":{"data":"ABI-encoded params that the pool requires."},"returns":{"withdrawnAmounts":"The amount of various output tokens that were sent to the user."}},"burnSingle(bytes)":{"details":"The input LP tokens must've already been sent to the pool.","params":{"data":"ABI-encoded params that the pool requires."},"returns":{"amountOut":"The amount of output tokens that were sent to the user."}},"flashSwap(bytes)":{"details":"This function allows borrowing the output tokens and sending the input tokens in the callback.","params":{"data":"ABI-encoded params that the pool requires."},"returns":{"finalAmountOut":"The amount of output tokens that were sent to the user."}},"getAmountIn(bytes)":{"details":"The pool does not need to include a trade simulator directly in itself - it can use a library.","params":{"data":"ABI-encoded params that the pool requires."},"returns":{"finalAmountIn":"The amount of input tokens that are required from the user if the trade is executed."}},"getAmountOut(bytes)":{"details":"The pool does not need to include a trade simulator directly in itself - it can use a library.","params":{"data":"ABI-encoded params that the pool requires."},"returns":{"finalAmountOut":"The amount of output tokens that will be sent to the user if the trade is executed."}},"getAssets()":{"returns":{"_0":"An array of tokens supported by the pool."}},"mint(bytes)":{"params":{"data":"ABI-encoded params that the pool requires."},"returns":{"liquidity":"The amount of liquidity tokens that were minted for the user."}},"poolIdentifier()":{"returns":{"_0":"A unique identifier for the pool type."}},"swap(bytes)":{"details":"The input tokens must've already been sent to the pool.","params":{"data":"ABI-encoded params that the pool requires."},"returns":{"finalAmountOut":"The amount of output tokens that were sent to the user."}}},"version":1},"userdoc":{"kind":"user","methods":{"burn(bytes)":{"notice":"Burns liquidity tokens."},"burnSingle(bytes)":{"notice":"Burns liquidity tokens for a single output token."},"flashSwap(bytes)":{"notice":"Executes a swap from one token to another with a callback."},"getAmountIn(bytes)":{"notice":"Simulates a trade and returns the expected output."},"getAmountOut(bytes)":{"notice":"Simulates a trade and returns the expected output."},"mint(bytes)":{"notice":"Mints liquidity tokens."},"swap(bytes)":{"notice":"Executes a swap from one token to another."}},"version":1}},"settings":{"remappings":["@openzeppelin/=src/@openzeppelin/","contracts/InputStream.sol/=src/InputStream.sol/","contracts/RouteProcessor2.sol/=src/RouteProcessor2.sol/","forge-std/=lib/forge-std/src/","interfaces/=src/interfaces/"],"optimizer":{"enabled":true,"runs":10000000},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IPool.sol":"IPool"},"evmVersion":"london","libraries":{}},"sources":{"src/interfaces/IPool.sol":{"keccak256":"0xa6f92ccb525b018c0c209819640e8d746f1134b4c4d9acd4f22d3e170323f1fa","urls":[],"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.5.0;\npragma experimental ABIEncoderV2;\n\n/// @notice Trident pool interface.\ninterface IPool {\n    /// @notice Executes a swap from one token to another.\n    /// @dev The input tokens must've already been sent to the pool.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\n    function swap(bytes calldata data) external returns (uint256 finalAmountOut);\n\n    /// @notice Executes a swap from one token to another with a callback.\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\n    function flashSwap(bytes calldata data) external returns (uint256 finalAmountOut);\n\n    /// @notice Mints liquidity tokens.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\n    function mint(bytes calldata data) external returns (uint256 liquidity);\n\n    /// @notice Burns liquidity tokens.\n    /// @dev The input LP tokens must've already been sent to the pool.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\n    function burn(bytes calldata data) external returns (TokenAmount[] memory withdrawnAmounts);\n\n    /// @notice Burns liquidity tokens for a single output token.\n    /// @dev The input LP tokens must've already been sent to the pool.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return amountOut The amount of output tokens that were sent to the user.\n    function burnSingle(bytes calldata data) external returns (uint256 amountOut);\n\n    /// @return A unique identifier for the pool type.\n    function poolIdentifier() external pure returns (bytes32);\n\n    /// @return An array of tokens supported by the pool.\n    function getAssets() external view returns (address[] memory);\n\n    /// @notice Simulates a trade and returns the expected output.\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\n    function getAmountOut(bytes calldata data) external view returns (uint256 finalAmountOut);\n\n    /// @notice Simulates a trade and returns the expected output.\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\n    function getAmountIn(bytes calldata data) external view returns (uint256 finalAmountIn);\n\n    /// @dev This event must be emitted on all swaps.\n    event Swap(address indexed recipient, address indexed tokenIn, address indexed tokenOut, uint256 amountIn, uint256 amountOut);\n\n    /// @dev This struct frames output tokens for burns.\n    struct TokenAmount {\n        address token;\n        uint256 amount;\n    }\n}\n","license":"GPL-3.0-or-later"}},"version":1},"storageLayout":{"storage":[],"types":{}},"id":7}