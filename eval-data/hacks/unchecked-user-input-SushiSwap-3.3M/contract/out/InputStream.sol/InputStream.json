{"abi":[],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122071a1c70fdbf620094cc928d0b879acce9e4e559901998914f5e0679ee69ee1bf64736f6c634300080a0033","sourceMap":"65:1796:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;65:1796:4;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122071a1c70fdbf620094cc928d0b879acce9e4e559901998914f5e0679ee69ee1bf64736f6c634300080a0033","sourceMap":"65:1796:4:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/InputStream.sol\":\"InputStream\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[\":@openzeppelin/=src/@openzeppelin/\",\":contracts/InputStream.sol/=src/InputStream.sol/\",\":contracts/RouteProcessor2.sol/=src/RouteProcessor2.sol/\",\":forge-std/=lib/forge-std/src/\",\":interfaces/=src/interfaces/\"]},\"sources\":{\"src/InputStream.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.10;\\n\\nlibrary InputStream {\\n  function createStream(bytes memory data) internal pure returns (uint256 stream) {\\n    assembly {\\n      stream := mload(0x40)\\n      mstore(0x40, add(stream, 64))\\n      mstore(stream, data)\\n      let length := mload(data)\\n      mstore(add(stream, 32), add(data, length))\\n    }\\n  }\\n\\n  function isNotEmpty(uint256 stream) internal pure returns (bool) {\\n    uint256 pos;\\n    uint256 finish;\\n    assembly {\\n      pos := mload(stream)\\n      finish := mload(add(stream, 32))\\n    }\\n    return pos < finish;\\n  }\\n\\n  function readUint8(uint256 stream) internal pure returns (uint8 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 1)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint16(uint256 stream) internal pure returns (uint16 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 2)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint32(uint256 stream) internal pure returns (uint32 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 4)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint(uint256 stream) internal pure returns (uint256 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 32)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readAddress(uint256 stream) internal pure returns (address res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 20)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readBytes(uint256 stream) internal pure returns (bytes memory res) {\\n    assembly {\\n      let pos := mload(stream)\\n      res := add(pos, 32)\\n      let length := mload(res)\\n      mstore(stream, add(res, length))\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xac36b2e0f406a6000bf69609b28628ab4371996f8abb00abdbce17fdea849629\",\"license\":\"UNLICENSED\"}},\"version\":1}","metadata":{"compiler":{"version":"0.8.10+commit.fc410830"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/=src/@openzeppelin/","contracts/InputStream.sol/=src/InputStream.sol/","contracts/RouteProcessor2.sol/=src/RouteProcessor2.sol/","forge-std/=lib/forge-std/src/","interfaces/=src/interfaces/"],"optimizer":{"enabled":true,"runs":10000000},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"src/InputStream.sol":"InputStream"},"evmVersion":"london","libraries":{}},"sources":{"src/InputStream.sol":{"keccak256":"0xac36b2e0f406a6000bf69609b28628ab4371996f8abb00abdbce17fdea849629","urls":[],"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.8.10;\n\nlibrary InputStream {\n  function createStream(bytes memory data) internal pure returns (uint256 stream) {\n    assembly {\n      stream := mload(0x40)\n      mstore(0x40, add(stream, 64))\n      mstore(stream, data)\n      let length := mload(data)\n      mstore(add(stream, 32), add(data, length))\n    }\n  }\n\n  function isNotEmpty(uint256 stream) internal pure returns (bool) {\n    uint256 pos;\n    uint256 finish;\n    assembly {\n      pos := mload(stream)\n      finish := mload(add(stream, 32))\n    }\n    return pos < finish;\n  }\n\n  function readUint8(uint256 stream) internal pure returns (uint8 res) {\n    assembly {\n      let pos := mload(stream)\n      pos := add(pos, 1)\n      res := mload(pos)\n      mstore(stream, pos)\n    }\n  }\n\n  function readUint16(uint256 stream) internal pure returns (uint16 res) {\n    assembly {\n      let pos := mload(stream)\n      pos := add(pos, 2)\n      res := mload(pos)\n      mstore(stream, pos)\n    }\n  }\n\n  function readUint32(uint256 stream) internal pure returns (uint32 res) {\n    assembly {\n      let pos := mload(stream)\n      pos := add(pos, 4)\n      res := mload(pos)\n      mstore(stream, pos)\n    }\n  }\n\n  function readUint(uint256 stream) internal pure returns (uint256 res) {\n    assembly {\n      let pos := mload(stream)\n      pos := add(pos, 32)\n      res := mload(pos)\n      mstore(stream, pos)\n    }\n  }\n\n  function readAddress(uint256 stream) internal pure returns (address res) {\n    assembly {\n      let pos := mload(stream)\n      pos := add(pos, 20)\n      res := mload(pos)\n      mstore(stream, pos)\n    }\n  }\n\n  function readBytes(uint256 stream) internal pure returns (bytes memory res) {\n    assembly {\n      let pos := mload(stream)\n      res := add(pos, 32)\n      let length := mload(res)\n      mstore(stream, add(res, length))\n    }\n  }\n}\n","license":"UNLICENSED"}},"version":1},"storageLayout":{"storage":[],"types":{}},"id":4}